
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005548  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056fc  080056fc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080056fc  080056fc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056fc  080056fc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001298  20000088  0800578c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001320  0800578c  00021320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d41  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002db8  00000000  00000000  00030e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00033bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c67  00000000  00000000  00034c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198e5  00000000  00000000  00035877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012187  00000000  00000000  0004f15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095508  00000000  00000000  000612e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004634  00000000  00000000  000f67ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000fae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08005640 	.word	0x08005640

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08005640 	.word	0x08005640

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2iz>:
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000700:	d30f      	bcc.n	8000722 <__aeabi_f2iz+0x2a>
 8000702:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d90d      	bls.n	8000728 <__aeabi_f2iz+0x30>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000714:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000718:	fa23 f002 	lsr.w	r0, r3, r2
 800071c:	bf18      	it	ne
 800071e:	4240      	negne	r0, r0
 8000720:	4770      	bx	lr
 8000722:	f04f 0000 	mov.w	r0, #0
 8000726:	4770      	bx	lr
 8000728:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800072c:	d101      	bne.n	8000732 <__aeabi_f2iz+0x3a>
 800072e:	0242      	lsls	r2, r0, #9
 8000730:	d105      	bne.n	800073e <__aeabi_f2iz+0x46>
 8000732:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000736:	bf08      	it	eq
 8000738:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800073c:	4770      	bx	lr
 800073e:	f04f 0000 	mov.w	r0, #0
 8000742:	4770      	bx	lr

08000744 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4a06      	ldr	r2, [pc, #24]	; (800076c <vApplicationGetIdleTaskMemory+0x28>)
 8000754:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	4a05      	ldr	r2, [pc, #20]	; (8000770 <vApplicationGetIdleTaskMemory+0x2c>)
 800075a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	200000a4 	.word	0x200000a4
 8000770:	20000144 	.word	0x20000144

08000774 <get_sensor_mask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t get_sensor_mask(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 3; i++)
 800077e:	2300      	movs	r3, #0
 8000780:	71bb      	strb	r3, [r7, #6]
 8000782:	e018      	b.n	80007b6 <get_sensor_mask+0x42>
	{
		temp <<= 1;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	71fb      	strb	r3, [r7, #7]
		if(sensor_value[i] > v_compare[i])
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <get_sensor_mask+0x54>)
 800078e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	490d      	ldr	r1, [pc, #52]	; (80007cc <get_sensor_mask+0x58>)
 8000796:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800079a:	429a      	cmp	r2, r3
 800079c:	d904      	bls.n	80007a8 <get_sensor_mask+0x34>
		{
			temp |= 0x01;
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	71fb      	strb	r3, [r7, #7]
 80007a6:	e003      	b.n	80007b0 <get_sensor_mask+0x3c>
		}
		else
		{
			temp &= 0x06;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 0306 	and.w	r3, r3, #6
 80007ae:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 3; i++)
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	3301      	adds	r3, #1
 80007b4:	71bb      	strb	r3, [r7, #6]
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d9e3      	bls.n	8000784 <get_sensor_mask+0x10>
		}
	}
	return temp;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000410 	.word	0x20000410
 80007cc:	20000418 	.word	0x20000418

080007d0 <run>:

void run(int16_t left_speed, int16_t right_speed)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	460a      	mov	r2, r1
 80007da:	80fb      	strh	r3, [r7, #6]
 80007dc:	4613      	mov	r3, r2
 80007de:	80bb      	strh	r3, [r7, #4]
	if(left_speed > 0)
 80007e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	dd09      	ble.n	80007fc <run+0x2c>
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <run+0xbc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, left_speed);
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <run+0xbc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007f8:	639a      	str	r2, [r3, #56]	; 0x38
 80007fa:	e019      	b.n	8000830 <run+0x60>
	}
	else if(left_speed < 0)
 80007fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000800:	2b00      	cmp	r3, #0
 8000802:	da0d      	bge.n	8000820 <run+0x50>
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, abs(left_speed));
 8000804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000808:	2b00      	cmp	r3, #0
 800080a:	bfb8      	it	lt
 800080c:	425b      	neglt	r3, r3
 800080e:	b29a      	uxth	r2, r3
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <run+0xbc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <run+0xbc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2200      	movs	r2, #0
 800081c:	639a      	str	r2, [r3, #56]	; 0x38
 800081e:	e007      	b.n	8000830 <run+0x60>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <run+0xbc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2200      	movs	r2, #0
 8000826:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <run+0xbc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(right_speed > 0)
 8000830:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	dd09      	ble.n	800084c <run+0x7c>
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <run+0xbc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2200      	movs	r2, #0
 800083e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, right_speed);
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <run+0xbc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000848:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
	}
}
 800084a:	e019      	b.n	8000880 <run+0xb0>
	else if(right_speed < 0)
 800084c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	da0d      	bge.n	8000870 <run+0xa0>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, abs(right_speed));
 8000854:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	bfb8      	it	lt
 800085c:	425b      	neglt	r3, r3
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <run+0xbc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <run+0xbc>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2200      	movs	r2, #0
 800086c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800086e:	e007      	b.n	8000880 <run+0xb0>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <run+0xbc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2200      	movs	r2, #0
 8000876:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <run+0xbc>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	200003b8 	.word	0x200003b8

08000890 <PID>:

void PID(float kP, float kD)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
	error = sensor_value[2] - sensor_value[0];
 800089a:	4b48      	ldr	r3, [pc, #288]	; (80009bc <PID+0x12c>)
 800089c:	889b      	ldrh	r3, [r3, #4]
 800089e:	461a      	mov	r2, r3
 80008a0:	4b46      	ldr	r3, [pc, #280]	; (80009bc <PID+0x12c>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fd0c 	bl	80002c4 <__aeabi_i2f>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a44      	ldr	r2, [pc, #272]	; (80009c0 <PID+0x130>)
 80008b0:	6013      	str	r3, [r2, #0]

	uP = kP * error;
 80008b2:	4b43      	ldr	r3, [pc, #268]	; (80009c0 <PID+0x130>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fd57 	bl	800036c <__aeabi_fmul>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <PID+0x134>)
 80008c4:	601a      	str	r2, [r3, #0]
	uD = kD * ((error - pre_error)/deltaT);
 80008c6:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <PID+0x130>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a3f      	ldr	r2, [pc, #252]	; (80009c8 <PID+0x138>)
 80008cc:	6812      	ldr	r2, [r2, #0]
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fc41 	bl	8000158 <__aeabi_fsub>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <PID+0x13c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4619      	mov	r1, r3
 80008e0:	4610      	mov	r0, r2
 80008e2:	f7ff fdf7 	bl	80004d4 <__aeabi_fdiv>
 80008e6:	4603      	mov	r3, r0
 80008e8:	6839      	ldr	r1, [r7, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fd3e 	bl	800036c <__aeabi_fmul>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <PID+0x140>)
 80008f6:	601a      	str	r2, [r3, #0]

	u = uP + uD;
 80008f8:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <PID+0x134>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <PID+0x140>)
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fc2a 	bl	800015c <__addsf3>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <PID+0x144>)
 800090e:	601a      	str	r2, [r3, #0]

	if(u > 1000) u = 1000;
 8000910:	4b30      	ldr	r3, [pc, #192]	; (80009d4 <PID+0x144>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4930      	ldr	r1, [pc, #192]	; (80009d8 <PID+0x148>)
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fee4 	bl	80006e4 <__aeabi_fcmpgt>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <PID+0x9a>
 8000922:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <PID+0x144>)
 8000924:	4a2c      	ldr	r2, [pc, #176]	; (80009d8 <PID+0x148>)
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	e00b      	b.n	8000942 <PID+0xb2>
	else if(u < -1000) u = -1000;
 800092a:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <PID+0x144>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	492b      	ldr	r1, [pc, #172]	; (80009dc <PID+0x14c>)
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff feb9 	bl	80006a8 <__aeabi_fcmplt>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d002      	beq.n	8000942 <PID+0xb2>
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <PID+0x144>)
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <PID+0x14c>)
 8000940:	601a      	str	r2, [r3, #0]

	pre_error = error;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <PID+0x130>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <PID+0x138>)
 8000948:	6013      	str	r3, [r2, #0]
//	pre_uI = uI;

	lsp = speed - u;
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <PID+0x150>)
 800094c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fcb7 	bl	80002c4 <__aeabi_i2f>
 8000956:	4602      	mov	r2, r0
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <PID+0x144>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	4610      	mov	r0, r2
 8000960:	f7ff fbfa 	bl	8000158 <__aeabi_fsub>
 8000964:	4603      	mov	r3, r0
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fec6 	bl	80006f8 <__aeabi_f2iz>
 800096c:	4603      	mov	r3, r0
 800096e:	b21a      	sxth	r2, r3
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <PID+0x154>)
 8000972:	801a      	strh	r2, [r3, #0]
	rsp = speed + u;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <PID+0x150>)
 8000976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fca2 	bl	80002c4 <__aeabi_i2f>
 8000980:	4602      	mov	r2, r0
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <PID+0x144>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f7ff fbe7 	bl	800015c <__addsf3>
 800098e:	4603      	mov	r3, r0
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff feb1 	bl	80006f8 <__aeabi_f2iz>
 8000996:	4603      	mov	r3, r0
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <PID+0x158>)
 800099c:	801a      	strh	r2, [r3, #0]

	run(lsp, rsp);
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <PID+0x154>)
 80009a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a4:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <PID+0x158>)
 80009a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff0f 	bl	80007d0 <run>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000410 	.word	0x20000410
 80009c0:	20000424 	.word	0x20000424
 80009c4:	20000428 	.word	0x20000428
 80009c8:	2000043c 	.word	0x2000043c
 80009cc:	20000018 	.word	0x20000018
 80009d0:	20000430 	.word	0x20000430
 80009d4:	20000434 	.word	0x20000434
 80009d8:	447a0000 	.word	0x447a0000
 80009dc:	c47a0000 	.word	0xc47a0000
 80009e0:	2000001c 	.word	0x2000001c
 80009e4:	2000040c 	.word	0x2000040c
 80009e8:	2000040e 	.word	0x2000040e

080009ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BT1_Pin)
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	2b80      	cmp	r3, #128	; 0x80
 80009fa:	d102      	bne.n	8000a02 <HAL_GPIO_EXTI_Callback+0x16>
	{
		start_learn = 1;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_GPIO_EXTI_Callback+0x2c>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BT2_Pin)
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d102      	bne.n	8000a0e <HAL_GPIO_EXTI_Callback+0x22>
	{
		run_enable = 1;
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <HAL_GPIO_EXTI_Callback+0x30>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	2000041e 	.word	0x2000041e
 8000a1c:	2000041f 	.word	0x2000041f

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b5b0      	push	{r4, r5, r7, lr}
 8000a22:	b096      	sub	sp, #88	; 0x58
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a26:	f000 ffc3 	bl	80019b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2a:	f000 f869 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2e:	f000 f9b7 	bl	8000da0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a32:	f000 f997 	bl	8000d64 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a36:	f000 f8bf 	bl	8000bb8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a3a:	f000 f919 	bl	8000c70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4826      	ldr	r0, [pc, #152]	; (8000adc <main+0xbc>)
 8000a42:	f002 fe11 	bl	8003668 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a46:	2104      	movs	r1, #4
 8000a48:	4824      	ldr	r0, [pc, #144]	; (8000adc <main+0xbc>)
 8000a4a:	f002 fe0d 	bl	8003668 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a4e:	2108      	movs	r1, #8
 8000a50:	4822      	ldr	r0, [pc, #136]	; (8000adc <main+0xbc>)
 8000a52:	f002 fe09 	bl	8003668 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000a56:	210c      	movs	r1, #12
 8000a58:	4820      	ldr	r0, [pc, #128]	; (8000adc <main+0xbc>)
 8000a5a:	f002 fe05 	bl	8003668 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, sensor_value, 3);
 8000a5e:	2203      	movs	r2, #3
 8000a60:	491f      	ldr	r1, [pc, #124]	; (8000ae0 <main+0xc0>)
 8000a62:	4820      	ldr	r0, [pc, #128]	; (8000ae4 <main+0xc4>)
 8000a64:	f001 f8ae 	bl	8001bc4 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <main+0xc8>)
 8000a6a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000a6e:	461d      	mov	r5, r3
 8000a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 fb10 	bl	80040a8 <osThreadCreate>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <main+0xcc>)
 8000a8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of PIDTask */
  osThreadDef(PIDTask, StartPIDTask, osPriorityAboveNormal, 0, 128);
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <main+0xd0>)
 8000a90:	f107 0420 	add.w	r4, r7, #32
 8000a94:	461d      	mov	r5, r3
 8000a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PIDTaskHandle = osThreadCreate(osThread(PIDTask), NULL);
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 fafd 	bl	80040a8 <osThreadCreate>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <main+0xd4>)
 8000ab2:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDTask */
  osThreadDef(LEDTask, StartLEDTask, osPriorityBelowNormal, 0, 128);
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <main+0xd8>)
 8000ab6:	1d3c      	adds	r4, r7, #4
 8000ab8:	461d      	mov	r5, r3
 8000aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000abe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTaskHandle = osThreadCreate(osThread(LEDTask), NULL);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 faec 	bl	80040a8 <osThreadCreate>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <main+0xdc>)
 8000ad4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ad6:	f003 fae0 	bl	800409a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <main+0xba>
 8000adc:	200003b8 	.word	0x200003b8
 8000ae0:	20000410 	.word	0x20000410
 8000ae4:	20000344 	.word	0x20000344
 8000ae8:	08005664 	.word	0x08005664
 8000aec:	20000400 	.word	0x20000400
 8000af0:	08005688 	.word	0x08005688
 8000af4:	20000404 	.word	0x20000404
 8000af8:	080056ac 	.word	0x080056ac
 8000afc:	20000408 	.word	0x20000408

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	; 0x50
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b0a:	2228      	movs	r2, #40	; 0x28
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 fcbe 	bl	8005490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b30:	2301      	movs	r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b4c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 ffaa 	bl	8002ab0 <HAL_RCC_OscConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b62:	f000 fd5d 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b66:	230f      	movs	r3, #15
 8000b68:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b76:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2102      	movs	r1, #2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fa16 	bl	8002fb4 <HAL_RCC_ClockConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b8e:	f000 fd47 	bl	8001620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b92:	2302      	movs	r3, #2
 8000b94:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b9a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fbb2 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000baa:	f000 fd39 	bl	8001620 <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3750      	adds	r7, #80	; 0x50
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <MX_ADC1_Init+0xb0>)
 8000bca:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <MX_ADC1_Init+0xb4>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <MX_ADC1_Init+0xb0>)
 8000bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <MX_ADC1_Init+0xb0>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_ADC1_Init+0xb0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_ADC1_Init+0xb0>)
 8000be4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000be8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_ADC1_Init+0xb0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_ADC1_Init+0xb0>)
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf6:	481c      	ldr	r0, [pc, #112]	; (8000c68 <MX_ADC1_Init+0xb0>)
 8000bf8:	f000 ff0c 	bl	8001a14 <HAL_ADC_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c02:	f000 fd0d 	bl	8001620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c06:	2304      	movs	r3, #4
 8000c08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4814      	ldr	r0, [pc, #80]	; (8000c68 <MX_ADC1_Init+0xb0>)
 8000c18:	f001 f8ce 	bl	8001db8 <HAL_ADC_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c22:	f000 fcfd 	bl	8001620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c26:	2305      	movs	r3, #5
 8000c28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_ADC1_Init+0xb0>)
 8000c34:	f001 f8c0 	bl	8001db8 <HAL_ADC_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c3e:	f000 fcef 	bl	8001620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c42:	2306      	movs	r3, #6
 8000c44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c46:	2303      	movs	r3, #3
 8000c48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <MX_ADC1_Init+0xb0>)
 8000c50:	f001 f8b2 	bl	8001db8 <HAL_ADC_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c5a:	f000 fce1 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000344 	.word	0x20000344
 8000c6c:	40012400 	.word	0x40012400

08000c70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
 8000c8e:	615a      	str	r2, [r3, #20]
 8000c90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c92:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000c94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000c9a:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000c9c:	2247      	movs	r2, #71	; 0x47
 8000c9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cba:	4829      	ldr	r0, [pc, #164]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000cbc:	f002 fc84 	bl	80035c8 <HAL_TIM_PWM_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cc6:	f000 fcab 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4821      	ldr	r0, [pc, #132]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000cda:	f003 f957 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ce4:	f000 fc9c 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce8:	2360      	movs	r3, #96	; 0x60
 8000cea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4818      	ldr	r0, [pc, #96]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000d00:	f002 fe44 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d0a:	f000 fc89 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2204      	movs	r2, #4
 8000d12:	4619      	mov	r1, r3
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000d16:	f002 fe39 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d20:	f000 fc7e 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2208      	movs	r2, #8
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000d2c:	f002 fe2e 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000d36:	f000 fc73 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	220c      	movs	r2, #12
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4807      	ldr	r0, [pc, #28]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000d42:	f002 fe23 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000d4c:	f000 fc68 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d50:	4803      	ldr	r0, [pc, #12]	; (8000d60 <MX_TIM2_Init+0xf0>)
 8000d52:	f000 fd27 	bl	80017a4 <HAL_TIM_MspPostInit>

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200003b8 	.word	0x200003b8

08000d64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_DMA_Init+0x38>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <MX_DMA_Init+0x38>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6153      	str	r3, [r2, #20]
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_DMA_Init+0x38>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2105      	movs	r1, #5
 8000d86:	200b      	movs	r0, #11
 8000d88:	f001 fac5 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d8c:	200b      	movs	r0, #11
 8000d8e:	f001 fade 	bl	800234e <HAL_NVIC_EnableIRQ>

}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db4:	4b3c      	ldr	r3, [pc, #240]	; (8000ea8 <MX_GPIO_Init+0x108>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a3b      	ldr	r2, [pc, #236]	; (8000ea8 <MX_GPIO_Init+0x108>)
 8000dba:	f043 0320 	orr.w	r3, r3, #32
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <MX_GPIO_Init+0x108>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0320 	and.w	r3, r3, #32
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <MX_GPIO_Init+0x108>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a35      	ldr	r2, [pc, #212]	; (8000ea8 <MX_GPIO_Init+0x108>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <MX_GPIO_Init+0x108>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <MX_GPIO_Init+0x108>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <MX_GPIO_Init+0x108>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <MX_GPIO_Init+0x108>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_LED_2_Pin|ADC_LED_1_Pin|RED_LED_Pin|GREEN_LED_Pin
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f24e 410c 	movw	r1, #58380	; 0xe40c
 8000e02:	482a      	ldr	r0, [pc, #168]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000e04:	f001 fe24 	bl	8002a50 <HAL_GPIO_WritePin>
                          |BLUE_LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_LED_3_GPIO_Port, ADC_LED_3_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0e:	4828      	ldr	r0, [pc, #160]	; (8000eb0 <MX_GPIO_Init+0x110>)
 8000e10:	f001 fe1e 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BT1_Pin */
  GPIO_InitStruct.Pin = BT1_Pin;
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <MX_GPIO_Init+0x114>)
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT1_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	4822      	ldr	r0, [pc, #136]	; (8000eb0 <MX_GPIO_Init+0x110>)
 8000e28:	f001 fc8e 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT2_Pin */
  GPIO_InitStruct.Pin = BT2_Pin;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <MX_GPIO_Init+0x114>)
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT2_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481b      	ldr	r0, [pc, #108]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000e40:	f001 fc82 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_LED_2_Pin ADC_LED_1_Pin RED_LED_Pin GREEN_LED_Pin
                           BLUE_LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = ADC_LED_2_Pin|ADC_LED_1_Pin|RED_LED_Pin|GREEN_LED_Pin
 8000e44:	f24e 430c 	movw	r3, #58380	; 0xe40c
 8000e48:	613b      	str	r3, [r7, #16]
                          |BLUE_LED_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <MX_GPIO_Init+0x10c>)
 8000e5e:	f001 fc73 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_LED_3_Pin */
  GPIO_InitStruct.Pin = ADC_LED_3_Pin;
 8000e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_LED_3_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MX_GPIO_Init+0x110>)
 8000e7c:	f001 fc64 	bl	8002748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2105      	movs	r1, #5
 8000e84:	2006      	movs	r0, #6
 8000e86:	f001 fa46 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e8a:	2006      	movs	r0, #6
 8000e8c:	f001 fa5f 	bl	800234e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2105      	movs	r1, #5
 8000e94:	2017      	movs	r0, #23
 8000e96:	f001 fa3e 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e9a:	2017      	movs	r0, #23
 8000e9c:	f001 fa57 	bl	800234e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010c00 	.word	0x40010c00
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	10110000 	.word	0x10110000

08000eb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(start_learn)
 8000ec0:	4b97      	ldr	r3, [pc, #604]	; (8001120 <StartDefaultTask+0x268>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d079      	beq.n	8000fbc <StartDefaultTask+0x104>
	{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ece:	4895      	ldr	r0, [pc, #596]	; (8001124 <StartDefaultTask+0x26c>)
 8000ed0:	f001 fdbe 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eda:	4892      	ldr	r0, [pc, #584]	; (8001124 <StartDefaultTask+0x26c>)
 8000edc:	f001 fdb8 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee6:	488f      	ldr	r0, [pc, #572]	; (8001124 <StartDefaultTask+0x26c>)
 8000ee8:	f001 fdb2 	bl	8002a50 <HAL_GPIO_WritePin>
		osDelay(1000);
 8000eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef0:	f003 f926 	bl	8004140 <osDelay>
		for(int i = 0; i < 500000; i++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	e034      	b.n	8000f64 <StartDefaultTask+0xac>
		{
			run(200, -200);
 8000efa:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8000efe:	20c8      	movs	r0, #200	; 0xc8
 8000f00:	f7ff fc66 	bl	80007d0 <run>
			for(uint8_t j = 0; j < 3; j++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	72fb      	strb	r3, [r7, #11]
 8000f08:	e026      	b.n	8000f58 <StartDefaultTask+0xa0>
			{
				if(sensor_value[j] > MaxOfMin[j])
 8000f0a:	7afb      	ldrb	r3, [r7, #11]
 8000f0c:	4a86      	ldr	r2, [pc, #536]	; (8001128 <StartDefaultTask+0x270>)
 8000f0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f12:	7afb      	ldrb	r3, [r7, #11]
 8000f14:	4985      	ldr	r1, [pc, #532]	; (800112c <StartDefaultTask+0x274>)
 8000f16:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d907      	bls.n	8000f2e <StartDefaultTask+0x76>
				{
					MaxOfMin[j] = sensor_value[j];
 8000f1e:	7afa      	ldrb	r2, [r7, #11]
 8000f20:	7afb      	ldrb	r3, [r7, #11]
 8000f22:	4981      	ldr	r1, [pc, #516]	; (8001128 <StartDefaultTask+0x270>)
 8000f24:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000f28:	4a80      	ldr	r2, [pc, #512]	; (800112c <StartDefaultTask+0x274>)
 8000f2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				if(sensor_value[j] < MinOfMax[j])
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	4a7d      	ldr	r2, [pc, #500]	; (8001128 <StartDefaultTask+0x270>)
 8000f32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f36:	7afb      	ldrb	r3, [r7, #11]
 8000f38:	497d      	ldr	r1, [pc, #500]	; (8001130 <StartDefaultTask+0x278>)
 8000f3a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d207      	bcs.n	8000f52 <StartDefaultTask+0x9a>
				{
					MinOfMax[j] = sensor_value[j];
 8000f42:	7afa      	ldrb	r2, [r7, #11]
 8000f44:	7afb      	ldrb	r3, [r7, #11]
 8000f46:	4978      	ldr	r1, [pc, #480]	; (8001128 <StartDefaultTask+0x270>)
 8000f48:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000f4c:	4a78      	ldr	r2, [pc, #480]	; (8001130 <StartDefaultTask+0x278>)
 8000f4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(uint8_t j = 0; j < 3; j++)
 8000f52:	7afb      	ldrb	r3, [r7, #11]
 8000f54:	3301      	adds	r3, #1
 8000f56:	72fb      	strb	r3, [r7, #11]
 8000f58:	7afb      	ldrb	r3, [r7, #11]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d9d5      	bls.n	8000f0a <StartDefaultTask+0x52>
		for(int i = 0; i < 500000; i++)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4a73      	ldr	r2, [pc, #460]	; (8001134 <StartDefaultTask+0x27c>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	ddc6      	ble.n	8000efa <StartDefaultTask+0x42>
				}
			}
		}
		run(0, 0);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fc2e 	bl	80007d0 <run>
		for(uint8_t i = 0; i < 3; i++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	72bb      	strb	r3, [r7, #10]
 8000f78:	e01a      	b.n	8000fb0 <StartDefaultTask+0xf8>
		{
			v_compare[i] = (MinOfMax[i] + MaxOfMin[i]) / 2 + calib_weight[i];
 8000f7a:	7abb      	ldrb	r3, [r7, #10]
 8000f7c:	4a6c      	ldr	r2, [pc, #432]	; (8001130 <StartDefaultTask+0x278>)
 8000f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f82:	4619      	mov	r1, r3
 8000f84:	7abb      	ldrb	r3, [r7, #10]
 8000f86:	4a69      	ldr	r2, [pc, #420]	; (800112c <StartDefaultTask+0x274>)
 8000f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f8c:	440b      	add	r3, r1
 8000f8e:	0fda      	lsrs	r2, r3, #31
 8000f90:	4413      	add	r3, r2
 8000f92:	105b      	asrs	r3, r3, #1
 8000f94:	b299      	uxth	r1, r3
 8000f96:	7abb      	ldrb	r3, [r7, #10]
 8000f98:	4a67      	ldr	r2, [pc, #412]	; (8001138 <StartDefaultTask+0x280>)
 8000f9a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f9e:	7abb      	ldrb	r3, [r7, #10]
 8000fa0:	440a      	add	r2, r1
 8000fa2:	b291      	uxth	r1, r2
 8000fa4:	4a65      	ldr	r2, [pc, #404]	; (800113c <StartDefaultTask+0x284>)
 8000fa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 3; i++)
 8000faa:	7abb      	ldrb	r3, [r7, #10]
 8000fac:	3301      	adds	r3, #1
 8000fae:	72bb      	strb	r3, [r7, #10]
 8000fb0:	7abb      	ldrb	r3, [r7, #10]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d9e1      	bls.n	8000f7a <StartDefaultTask+0xc2>
		}
		start_learn = 0;
 8000fb6:	4b5a      	ldr	r3, [pc, #360]	; (8001120 <StartDefaultTask+0x268>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
	}
	switch(get_sensor_mask())
 8000fbc:	f7ff fbda 	bl	8000774 <get_sensor_mask>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b07      	cmp	r3, #7
 8000fc4:	f200 80a7 	bhi.w	8001116 <StartDefaultTask+0x25e>
 8000fc8:	a201      	add	r2, pc, #4	; (adr r2, 8000fd0 <StartDefaultTask+0x118>)
 8000fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fce:	bf00      	nop
 8000fd0:	080010f3 	.word	0x080010f3
 8000fd4:	08001081 	.word	0x08001081
 8000fd8:	08001039 	.word	0x08001039
 8000fdc:	0800105d 	.word	0x0800105d
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	080010a5 	.word	0x080010a5
 8000fe8:	08001015 	.word	0x08001015
 8000fec:	080010c9 	.word	0x080010c9
	{
		case 0x04:			// 100
//			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
//			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
			HAL_GPIO_WritePin(ADC_LED_1_GPIO_Port, ADC_LED_1_Pin, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff6:	484b      	ldr	r0, [pc, #300]	; (8001124 <StartDefaultTask+0x26c>)
 8000ff8:	f001 fd2a 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_2_GPIO_Port, ADC_LED_2_Pin, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2104      	movs	r1, #4
 8001000:	4848      	ldr	r0, [pc, #288]	; (8001124 <StartDefaultTask+0x26c>)
 8001002:	f001 fd25 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_3_GPIO_Port, ADC_LED_3_Pin, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100c:	484c      	ldr	r0, [pc, #304]	; (8001140 <StartDefaultTask+0x288>)
 800100e:	f001 fd1f 	bl	8002a50 <HAL_GPIO_WritePin>
			break;
 8001012:	e080      	b.n	8001116 <StartDefaultTask+0x25e>
		case 0x06:			// 110
//			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
//			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
			HAL_GPIO_WritePin(ADC_LED_1_GPIO_Port, ADC_LED_1_Pin, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101a:	4842      	ldr	r0, [pc, #264]	; (8001124 <StartDefaultTask+0x26c>)
 800101c:	f001 fd18 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_2_GPIO_Port, ADC_LED_2_Pin, 1);
 8001020:	2201      	movs	r2, #1
 8001022:	2104      	movs	r1, #4
 8001024:	483f      	ldr	r0, [pc, #252]	; (8001124 <StartDefaultTask+0x26c>)
 8001026:	f001 fd13 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_3_GPIO_Port, ADC_LED_3_Pin, 1);
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001030:	4843      	ldr	r0, [pc, #268]	; (8001140 <StartDefaultTask+0x288>)
 8001032:	f001 fd0d 	bl	8002a50 <HAL_GPIO_WritePin>
			break;
 8001036:	e06e      	b.n	8001116 <StartDefaultTask+0x25e>
		case 0x02:			// 010
//			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
//			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
			HAL_GPIO_WritePin(ADC_LED_1_GPIO_Port, ADC_LED_1_Pin, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103e:	4839      	ldr	r0, [pc, #228]	; (8001124 <StartDefaultTask+0x26c>)
 8001040:	f001 fd06 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_2_GPIO_Port, ADC_LED_2_Pin, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	2104      	movs	r1, #4
 8001048:	4836      	ldr	r0, [pc, #216]	; (8001124 <StartDefaultTask+0x26c>)
 800104a:	f001 fd01 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_3_GPIO_Port, ADC_LED_3_Pin, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001054:	483a      	ldr	r0, [pc, #232]	; (8001140 <StartDefaultTask+0x288>)
 8001056:	f001 fcfb 	bl	8002a50 <HAL_GPIO_WritePin>
			break;
 800105a:	e05c      	b.n	8001116 <StartDefaultTask+0x25e>
		case 0x03:			// 011
//			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
//			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
			HAL_GPIO_WritePin(ADC_LED_1_GPIO_Port, ADC_LED_1_Pin, 1);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001062:	4830      	ldr	r0, [pc, #192]	; (8001124 <StartDefaultTask+0x26c>)
 8001064:	f001 fcf4 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_2_GPIO_Port, ADC_LED_2_Pin, 1);
 8001068:	2201      	movs	r2, #1
 800106a:	2104      	movs	r1, #4
 800106c:	482d      	ldr	r0, [pc, #180]	; (8001124 <StartDefaultTask+0x26c>)
 800106e:	f001 fcef 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_3_GPIO_Port, ADC_LED_3_Pin, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001078:	4831      	ldr	r0, [pc, #196]	; (8001140 <StartDefaultTask+0x288>)
 800107a:	f001 fce9 	bl	8002a50 <HAL_GPIO_WritePin>
			break;
 800107e:	e04a      	b.n	8001116 <StartDefaultTask+0x25e>
		case 0x01:			// 001
//			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
//			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
			HAL_GPIO_WritePin(ADC_LED_1_GPIO_Port, ADC_LED_1_Pin, 1);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001086:	4827      	ldr	r0, [pc, #156]	; (8001124 <StartDefaultTask+0x26c>)
 8001088:	f001 fce2 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_2_GPIO_Port, ADC_LED_2_Pin, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2104      	movs	r1, #4
 8001090:	4824      	ldr	r0, [pc, #144]	; (8001124 <StartDefaultTask+0x26c>)
 8001092:	f001 fcdd 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_3_GPIO_Port, ADC_LED_3_Pin, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109c:	4828      	ldr	r0, [pc, #160]	; (8001140 <StartDefaultTask+0x288>)
 800109e:	f001 fcd7 	bl	8002a50 <HAL_GPIO_WritePin>
			break;
 80010a2:	e038      	b.n	8001116 <StartDefaultTask+0x25e>
		case 0x05:			// 101
//			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
//			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
			HAL_GPIO_WritePin(ADC_LED_1_GPIO_Port, ADC_LED_1_Pin, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010aa:	481e      	ldr	r0, [pc, #120]	; (8001124 <StartDefaultTask+0x26c>)
 80010ac:	f001 fcd0 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_2_GPIO_Port, ADC_LED_2_Pin, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2104      	movs	r1, #4
 80010b4:	481b      	ldr	r0, [pc, #108]	; (8001124 <StartDefaultTask+0x26c>)
 80010b6:	f001 fccb 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_3_GPIO_Port, ADC_LED_3_Pin, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	481f      	ldr	r0, [pc, #124]	; (8001140 <StartDefaultTask+0x288>)
 80010c2:	f001 fcc5 	bl	8002a50 <HAL_GPIO_WritePin>
			break;
 80010c6:	e026      	b.n	8001116 <StartDefaultTask+0x25e>
		case 0x07:			// 111
//			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
//			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
			HAL_GPIO_WritePin(ADC_LED_1_GPIO_Port, ADC_LED_1_Pin, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ce:	4815      	ldr	r0, [pc, #84]	; (8001124 <StartDefaultTask+0x26c>)
 80010d0:	f001 fcbe 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_2_GPIO_Port, ADC_LED_2_Pin, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2104      	movs	r1, #4
 80010d8:	4812      	ldr	r0, [pc, #72]	; (8001124 <StartDefaultTask+0x26c>)
 80010da:	f001 fcb9 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_3_GPIO_Port, ADC_LED_3_Pin, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e4:	4816      	ldr	r0, [pc, #88]	; (8001140 <StartDefaultTask+0x288>)
 80010e6:	f001 fcb3 	bl	8002a50 <HAL_GPIO_WritePin>
			ready = 0;
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <StartDefaultTask+0x28c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
			break;
 80010f0:	e011      	b.n	8001116 <StartDefaultTask+0x25e>
		case 0x00:			// 000
//			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
//			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
//			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
			HAL_GPIO_WritePin(ADC_LED_1_GPIO_Port, ADC_LED_1_Pin, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f8:	480a      	ldr	r0, [pc, #40]	; (8001124 <StartDefaultTask+0x26c>)
 80010fa:	f001 fca9 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_2_GPIO_Port, ADC_LED_2_Pin, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2104      	movs	r1, #4
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <StartDefaultTask+0x26c>)
 8001104:	f001 fca4 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADC_LED_3_GPIO_Port, ADC_LED_3_Pin, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <StartDefaultTask+0x288>)
 8001110:	f001 fc9e 	bl	8002a50 <HAL_GPIO_WritePin>
			break;
 8001114:	bf00      	nop
	}
    osDelay(1);
 8001116:	2001      	movs	r0, #1
 8001118:	f003 f812 	bl	8004140 <osDelay>
	if(start_learn)
 800111c:	e6d0      	b.n	8000ec0 <StartDefaultTask+0x8>
 800111e:	bf00      	nop
 8001120:	2000041e 	.word	0x2000041e
 8001124:	40010c00 	.word	0x40010c00
 8001128:	20000410 	.word	0x20000410
 800112c:	20000008 	.word	0x20000008
 8001130:	20000000 	.word	0x20000000
 8001134:	0007a11f 	.word	0x0007a11f
 8001138:	20000010 	.word	0x20000010
 800113c:	20000418 	.word	0x20000418
 8001140:	40010800 	.word	0x40010800
 8001144:	20000420 	.word	0x20000420

08001148 <StartPIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPIDTask */
void StartPIDTask(void const * argument)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPIDTask */
  /* Infinite loop */
  for(;;)
  {
	if(run_enable)
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <StartPIDTask+0xa0>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d009      	beq.n	800116c <StartPIDTask+0x24>
	{
		osDelay(3000);
 8001158:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800115c:	f002 fff0 	bl	8004140 <osDelay>
		ready = 1;
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <StartPIDTask+0xa4>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
		run_enable = 0;
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <StartPIDTask+0xa0>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	}
	if(ready)
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <StartPIDTask+0xa4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00e      	beq.n	8001192 <StartPIDTask+0x4a>
	{
		if(sensor_value[1] > v_compare[1])
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <StartPIDTask+0xa8>)
 8001176:	885a      	ldrh	r2, [r3, #2]
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <StartPIDTask+0xac>)
 800117a:	885b      	ldrh	r3, [r3, #2]
 800117c:	429a      	cmp	r2, r3
 800117e:	d92e      	bls.n	80011de <StartPIDTask+0x96>
		{
			PID(kP, kD);
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <StartPIDTask+0xb0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <StartPIDTask+0xb4>)
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fb80 	bl	8000890 <PID>
 8001190:	e025      	b.n	80011de <StartPIDTask+0x96>
		}
	}
	else if(!ready)
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <StartPIDTask+0xa4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d121      	bne.n	80011de <StartPIDTask+0x96>
	{
		uP = 0;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <StartPIDTask+0xb8>)
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
		uI = 0;
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <StartPIDTask+0xbc>)
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
		uD = 0;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <StartPIDTask+0xc0>)
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
		error = 0;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <StartPIDTask+0xc4>)
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
		pre_error = 0;
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <StartPIDTask+0xc8>)
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
		pre_uI = 0;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <StartPIDTask+0xcc>)
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
		lsp = 0;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <StartPIDTask+0xd0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	801a      	strh	r2, [r3, #0]
		rsp = 0;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <StartPIDTask+0xd4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	801a      	strh	r2, [r3, #0]
		run(0, 0);
 80011d6:	2100      	movs	r1, #0
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff faf9 	bl	80007d0 <run>
	}
    osDelay(1);
 80011de:	2001      	movs	r0, #1
 80011e0:	f002 ffae 	bl	8004140 <osDelay>
	if(run_enable)
 80011e4:	e7b4      	b.n	8001150 <StartPIDTask+0x8>
 80011e6:	bf00      	nop
 80011e8:	2000041f 	.word	0x2000041f
 80011ec:	20000420 	.word	0x20000420
 80011f0:	20000410 	.word	0x20000410
 80011f4:	20000418 	.word	0x20000418
 80011f8:	20000020 	.word	0x20000020
 80011fc:	20000024 	.word	0x20000024
 8001200:	20000428 	.word	0x20000428
 8001204:	2000042c 	.word	0x2000042c
 8001208:	20000430 	.word	0x20000430
 800120c:	20000424 	.word	0x20000424
 8001210:	2000043c 	.word	0x2000043c
 8001214:	20000438 	.word	0x20000438
 8001218:	2000040c 	.word	0x2000040c
 800121c:	2000040e 	.word	0x2000040e

08001220 <StartLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDTask */
void StartLEDTask(void const * argument)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDTask */
  /* Infinite loop */
  for(;;)
  {
	if(run_enable || ready || start_learn)
 8001228:	4bda      	ldr	r3, [pc, #872]	; (8001594 <StartLEDTask+0x374>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d108      	bne.n	8001242 <StartLEDTask+0x22>
 8001230:	4bd9      	ldr	r3, [pc, #868]	; (8001598 <StartLEDTask+0x378>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d104      	bne.n	8001242 <StartLEDTask+0x22>
 8001238:	4bd8      	ldr	r3, [pc, #864]	; (800159c <StartLEDTask+0x37c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 81c4 	beq.w	80015ca <StartLEDTask+0x3aa>
	{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001248:	48d5      	ldr	r0, [pc, #852]	; (80015a0 <StartLEDTask+0x380>)
 800124a:	f001 fc01 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001254:	48d2      	ldr	r0, [pc, #840]	; (80015a0 <StartLEDTask+0x380>)
 8001256:	f001 fbfb 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001260:	48cf      	ldr	r0, [pc, #828]	; (80015a0 <StartLEDTask+0x380>)
 8001262:	f001 fbf5 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 8001266:	20c8      	movs	r0, #200	; 0xc8
 8001268:	f003 f9d8 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001272:	48cb      	ldr	r0, [pc, #812]	; (80015a0 <StartLEDTask+0x380>)
 8001274:	f001 fbec 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127e:	48c8      	ldr	r0, [pc, #800]	; (80015a0 <StartLEDTask+0x380>)
 8001280:	f001 fbe6 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128a:	48c5      	ldr	r0, [pc, #788]	; (80015a0 <StartLEDTask+0x380>)
 800128c:	f001 fbe0 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 8001290:	20c8      	movs	r0, #200	; 0xc8
 8001292:	f003 f9c3 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129c:	48c0      	ldr	r0, [pc, #768]	; (80015a0 <StartLEDTask+0x380>)
 800129e:	f001 fbd7 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a8:	48bd      	ldr	r0, [pc, #756]	; (80015a0 <StartLEDTask+0x380>)
 80012aa:	f001 fbd1 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b4:	48ba      	ldr	r0, [pc, #744]	; (80015a0 <StartLEDTask+0x380>)
 80012b6:	f001 fbcb 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 80012ba:	20c8      	movs	r0, #200	; 0xc8
 80012bc:	f003 f9ae 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c6:	48b6      	ldr	r0, [pc, #728]	; (80015a0 <StartLEDTask+0x380>)
 80012c8:	f001 fbc2 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d2:	48b3      	ldr	r0, [pc, #716]	; (80015a0 <StartLEDTask+0x380>)
 80012d4:	f001 fbbc 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012de:	48b0      	ldr	r0, [pc, #704]	; (80015a0 <StartLEDTask+0x380>)
 80012e0:	f001 fbb6 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 80012e4:	20c8      	movs	r0, #200	; 0xc8
 80012e6:	f003 f999 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f0:	48ab      	ldr	r0, [pc, #684]	; (80015a0 <StartLEDTask+0x380>)
 80012f2:	f001 fbad 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012fc:	48a8      	ldr	r0, [pc, #672]	; (80015a0 <StartLEDTask+0x380>)
 80012fe:	f001 fba7 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001308:	48a5      	ldr	r0, [pc, #660]	; (80015a0 <StartLEDTask+0x380>)
 800130a:	f001 fba1 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 800130e:	20c8      	movs	r0, #200	; 0xc8
 8001310:	f003 f984 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131a:	48a1      	ldr	r0, [pc, #644]	; (80015a0 <StartLEDTask+0x380>)
 800131c:	f001 fb98 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001326:	489e      	ldr	r0, [pc, #632]	; (80015a0 <StartLEDTask+0x380>)
 8001328:	f001 fb92 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001332:	489b      	ldr	r0, [pc, #620]	; (80015a0 <StartLEDTask+0x380>)
 8001334:	f001 fb8c 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 8001338:	20c8      	movs	r0, #200	; 0xc8
 800133a:	f003 f96f 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001344:	4896      	ldr	r0, [pc, #600]	; (80015a0 <StartLEDTask+0x380>)
 8001346:	f001 fb83 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001350:	4893      	ldr	r0, [pc, #588]	; (80015a0 <StartLEDTask+0x380>)
 8001352:	f001 fb7d 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800135c:	4890      	ldr	r0, [pc, #576]	; (80015a0 <StartLEDTask+0x380>)
 800135e:	f001 fb77 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 8001362:	20c8      	movs	r0, #200	; 0xc8
 8001364:	f003 f95a 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136e:	488c      	ldr	r0, [pc, #560]	; (80015a0 <StartLEDTask+0x380>)
 8001370:	f001 fb6e 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137a:	4889      	ldr	r0, [pc, #548]	; (80015a0 <StartLEDTask+0x380>)
 800137c:	f001 fb68 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001386:	4886      	ldr	r0, [pc, #536]	; (80015a0 <StartLEDTask+0x380>)
 8001388:	f001 fb62 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 800138c:	20c8      	movs	r0, #200	; 0xc8
 800138e:	f003 f945 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 8001392:	2201      	movs	r2, #1
 8001394:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001398:	4881      	ldr	r0, [pc, #516]	; (80015a0 <StartLEDTask+0x380>)
 800139a:	f001 fb59 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a4:	487e      	ldr	r0, [pc, #504]	; (80015a0 <StartLEDTask+0x380>)
 80013a6:	f001 fb53 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b0:	487b      	ldr	r0, [pc, #492]	; (80015a0 <StartLEDTask+0x380>)
 80013b2:	f001 fb4d 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 80013b6:	20c8      	movs	r0, #200	; 0xc8
 80013b8:	f003 f930 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c2:	4877      	ldr	r0, [pc, #476]	; (80015a0 <StartLEDTask+0x380>)
 80013c4:	f001 fb44 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ce:	4874      	ldr	r0, [pc, #464]	; (80015a0 <StartLEDTask+0x380>)
 80013d0:	f001 fb3e 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4871      	ldr	r0, [pc, #452]	; (80015a0 <StartLEDTask+0x380>)
 80013dc:	f001 fb38 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 80013e0:	20c8      	movs	r0, #200	; 0xc8
 80013e2:	f003 f91b 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ec:	486c      	ldr	r0, [pc, #432]	; (80015a0 <StartLEDTask+0x380>)
 80013ee:	f001 fb2f 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f8:	4869      	ldr	r0, [pc, #420]	; (80015a0 <StartLEDTask+0x380>)
 80013fa:	f001 fb29 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001404:	4866      	ldr	r0, [pc, #408]	; (80015a0 <StartLEDTask+0x380>)
 8001406:	f001 fb23 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 800140a:	20c8      	movs	r0, #200	; 0xc8
 800140c:	f003 f906 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001416:	4862      	ldr	r0, [pc, #392]	; (80015a0 <StartLEDTask+0x380>)
 8001418:	f001 fb1a 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001422:	485f      	ldr	r0, [pc, #380]	; (80015a0 <StartLEDTask+0x380>)
 8001424:	f001 fb14 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142e:	485c      	ldr	r0, [pc, #368]	; (80015a0 <StartLEDTask+0x380>)
 8001430:	f001 fb0e 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 8001434:	20c8      	movs	r0, #200	; 0xc8
 8001436:	f003 f8f1 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	4857      	ldr	r0, [pc, #348]	; (80015a0 <StartLEDTask+0x380>)
 8001442:	f001 fb05 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144c:	4854      	ldr	r0, [pc, #336]	; (80015a0 <StartLEDTask+0x380>)
 800144e:	f001 faff 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001458:	4851      	ldr	r0, [pc, #324]	; (80015a0 <StartLEDTask+0x380>)
 800145a:	f001 faf9 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 800145e:	20c8      	movs	r0, #200	; 0xc8
 8001460:	f003 f8dc 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146a:	484d      	ldr	r0, [pc, #308]	; (80015a0 <StartLEDTask+0x380>)
 800146c:	f001 faf0 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001476:	484a      	ldr	r0, [pc, #296]	; (80015a0 <StartLEDTask+0x380>)
 8001478:	f001 faea 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001482:	4847      	ldr	r0, [pc, #284]	; (80015a0 <StartLEDTask+0x380>)
 8001484:	f001 fae4 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 8001488:	20c8      	movs	r0, #200	; 0xc8
 800148a:	f003 f8c7 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001494:	4842      	ldr	r0, [pc, #264]	; (80015a0 <StartLEDTask+0x380>)
 8001496:	f001 fadb 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a0:	483f      	ldr	r0, [pc, #252]	; (80015a0 <StartLEDTask+0x380>)
 80014a2:	f001 fad5 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ac:	483c      	ldr	r0, [pc, #240]	; (80015a0 <StartLEDTask+0x380>)
 80014ae:	f001 facf 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 80014b2:	20c8      	movs	r0, #200	; 0xc8
 80014b4:	f003 f8b2 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014be:	4838      	ldr	r0, [pc, #224]	; (80015a0 <StartLEDTask+0x380>)
 80014c0:	f001 fac6 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ca:	4835      	ldr	r0, [pc, #212]	; (80015a0 <StartLEDTask+0x380>)
 80014cc:	f001 fac0 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d6:	4832      	ldr	r0, [pc, #200]	; (80015a0 <StartLEDTask+0x380>)
 80014d8:	f001 faba 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 80014dc:	20c8      	movs	r0, #200	; 0xc8
 80014de:	f003 f89d 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e8:	482d      	ldr	r0, [pc, #180]	; (80015a0 <StartLEDTask+0x380>)
 80014ea:	f001 fab1 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f4:	482a      	ldr	r0, [pc, #168]	; (80015a0 <StartLEDTask+0x380>)
 80014f6:	f001 faab 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001500:	4827      	ldr	r0, [pc, #156]	; (80015a0 <StartLEDTask+0x380>)
 8001502:	f001 faa5 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 8001506:	20c8      	movs	r0, #200	; 0xc8
 8001508:	f003 f888 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001512:	4823      	ldr	r0, [pc, #140]	; (80015a0 <StartLEDTask+0x380>)
 8001514:	f001 fa9c 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151e:	4820      	ldr	r0, [pc, #128]	; (80015a0 <StartLEDTask+0x380>)
 8001520:	f001 fa96 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800152a:	481d      	ldr	r0, [pc, #116]	; (80015a0 <StartLEDTask+0x380>)
 800152c:	f001 fa90 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 8001530:	20c8      	movs	r0, #200	; 0xc8
 8001532:	f003 f873 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153c:	4818      	ldr	r0, [pc, #96]	; (80015a0 <StartLEDTask+0x380>)
 800153e:	f001 fa87 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001548:	4815      	ldr	r0, [pc, #84]	; (80015a0 <StartLEDTask+0x380>)
 800154a:	f001 fa81 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 800154e:	2201      	movs	r2, #1
 8001550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001554:	4812      	ldr	r0, [pc, #72]	; (80015a0 <StartLEDTask+0x380>)
 8001556:	f001 fa7b 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 800155a:	20c8      	movs	r0, #200	; 0xc8
 800155c:	f003 f85e 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <StartLEDTask+0x380>)
 8001568:	f001 fa72 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <StartLEDTask+0x380>)
 8001574:	f001 fa6c 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157e:	4808      	ldr	r0, [pc, #32]	; (80015a0 <StartLEDTask+0x380>)
 8001580:	f001 fa66 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 8001584:	20c8      	movs	r0, #200	; 0xc8
 8001586:	f003 f849 	bl	800461c <vTaskDelay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001590:	e008      	b.n	80015a4 <StartLEDTask+0x384>
 8001592:	bf00      	nop
 8001594:	2000041f 	.word	0x2000041f
 8001598:	20000420 	.word	0x20000420
 800159c:	2000041e 	.word	0x2000041e
 80015a0:	40010c00 	.word	0x40010c00
 80015a4:	4814      	ldr	r0, [pc, #80]	; (80015f8 <StartLEDTask+0x3d8>)
 80015a6:	f001 fa53 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b0:	4811      	ldr	r0, [pc, #68]	; (80015f8 <StartLEDTask+0x3d8>)
 80015b2:	f001 fa4d 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015bc:	480e      	ldr	r0, [pc, #56]	; (80015f8 <StartLEDTask+0x3d8>)
 80015be:	f001 fa47 	bl	8002a50 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(200));
 80015c2:	20c8      	movs	r0, #200	; 0xc8
 80015c4:	f003 f82a 	bl	800461c <vTaskDelay>
 80015c8:	e011      	b.n	80015ee <StartLEDTask+0x3ce>
	}
	else
	{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d0:	4809      	ldr	r0, [pc, #36]	; (80015f8 <StartLEDTask+0x3d8>)
 80015d2:	f001 fa3d 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <StartLEDTask+0x3d8>)
 80015de:	f001 fa37 	bl	8002a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <StartLEDTask+0x3d8>)
 80015ea:	f001 fa31 	bl	8002a50 <HAL_GPIO_WritePin>
	}
    osDelay(1);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f002 fda6 	bl	8004140 <osDelay>
	if(run_enable || ready || start_learn)
 80015f4:	e618      	b.n	8001228 <StartLEDTask+0x8>
 80015f6:	bf00      	nop
 80015f8:	40010c00 	.word	0x40010c00

080015fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800160e:	f000 f9e5 	bl	80019dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40012c00 	.word	0x40012c00

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	e7fe      	b.n	8001628 <Error_Handler+0x8>
	...

0800162c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_MspInit+0x68>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	4a17      	ldr	r2, [pc, #92]	; (8001694 <HAL_MspInit+0x68>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6193      	str	r3, [r2, #24]
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_MspInit+0x68>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_MspInit+0x68>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <HAL_MspInit+0x68>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	61d3      	str	r3, [r2, #28]
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_MspInit+0x68>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	210f      	movs	r1, #15
 8001666:	f06f 0001 	mvn.w	r0, #1
 800166a:	f000 fe54 	bl	8002316 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_MspInit+0x6c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_MspInit+0x6c>)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	40010000 	.word	0x40010000

0800169c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a28      	ldr	r2, [pc, #160]	; (8001758 <HAL_ADC_MspInit+0xbc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d149      	bne.n	8001750 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_ADC_MspInit+0xc0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a26      	ldr	r2, [pc, #152]	; (800175c <HAL_ADC_MspInit+0xc0>)
 80016c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_ADC_MspInit+0xc0>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_ADC_MspInit+0xc0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <HAL_ADC_MspInit+0xc0>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_ADC_MspInit+0xc0>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80016ec:	2370      	movs	r3, #112	; 0x70
 80016ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f0:	2303      	movs	r3, #3
 80016f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	4619      	mov	r1, r3
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <HAL_ADC_MspInit+0xc4>)
 80016fc:	f001 f824 	bl	8002748 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_ADC_MspInit+0xc8>)
 8001702:	4a19      	ldr	r2, [pc, #100]	; (8001768 <HAL_ADC_MspInit+0xcc>)
 8001704:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_ADC_MspInit+0xc8>)
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_ADC_MspInit+0xc8>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_ADC_MspInit+0xc8>)
 8001714:	2280      	movs	r2, #128	; 0x80
 8001716:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_ADC_MspInit+0xc8>)
 800171a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_ADC_MspInit+0xc8>)
 8001722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001726:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_ADC_MspInit+0xc8>)
 800172a:	2220      	movs	r2, #32
 800172c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_ADC_MspInit+0xc8>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001734:	480b      	ldr	r0, [pc, #44]	; (8001764 <HAL_ADC_MspInit+0xc8>)
 8001736:	f000 fe19 	bl	800236c <HAL_DMA_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001740:	f7ff ff6e 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_ADC_MspInit+0xc8>)
 8001748:	621a      	str	r2, [r3, #32]
 800174a:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_ADC_MspInit+0xc8>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40012400 	.word	0x40012400
 800175c:	40021000 	.word	0x40021000
 8001760:	40010800 	.word	0x40010800
 8001764:	20000374 	.word	0x20000374
 8001768:	40020008 	.word	0x40020008

0800176c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177c:	d10b      	bne.n	8001796 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_TIM_PWM_MspInit+0x34>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_TIM_PWM_MspInit+0x34>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	61d3      	str	r3, [r2, #28]
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_TIM_PWM_MspInit+0x34>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c2:	d117      	bne.n	80017f4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_TIM_MspPostInit+0x58>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <HAL_TIM_MspPostInit+0x58>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_TIM_MspPostInit+0x58>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017dc:	230f      	movs	r3, #15
 80017de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2302      	movs	r3, #2
 80017e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4619      	mov	r1, r3
 80017ee:	4804      	ldr	r0, [pc, #16]	; (8001800 <HAL_TIM_MspPostInit+0x5c>)
 80017f0:	f000 ffaa 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010800 	.word	0x40010800

08001804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08c      	sub	sp, #48	; 0x30
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800181a:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <HAL_InitTick+0xd0>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a2d      	ldr	r2, [pc, #180]	; (80018d4 <HAL_InitTick+0xd0>)
 8001820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_InitTick+0xd0>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001832:	f107 020c 	add.w	r2, r7, #12
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f001 fd15 	bl	800326c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001842:	f001 fcff 	bl	8003244 <HAL_RCC_GetPCLK2Freq>
 8001846:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_InitTick+0xd4>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	0c9b      	lsrs	r3, r3, #18
 8001852:	3b01      	subs	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_InitTick+0xd8>)
 8001858:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <HAL_InitTick+0xdc>)
 800185a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <HAL_InitTick+0xd8>)
 800185e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001862:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001864:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_InitTick+0xd8>)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_InitTick+0xd8>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_InitTick+0xd8>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_InitTick+0xd8>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800187c:	4817      	ldr	r0, [pc, #92]	; (80018dc <HAL_InitTick+0xd8>)
 800187e:	f001 fdf9 	bl	8003474 <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800188c:	2b00      	cmp	r3, #0
 800188e:	d11b      	bne.n	80018c8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001890:	4812      	ldr	r0, [pc, #72]	; (80018dc <HAL_InitTick+0xd8>)
 8001892:	f001 fe47 	bl	8003524 <HAL_TIM_Base_Start_IT>
 8001896:	4603      	mov	r3, r0
 8001898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800189c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d111      	bne.n	80018c8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018a4:	2019      	movs	r0, #25
 80018a6:	f000 fd52 	bl	800234e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d808      	bhi.n	80018c2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	2019      	movs	r0, #25
 80018b6:	f000 fd2e 	bl	8002316 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_InitTick+0xe0>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	e002      	b.n	80018c8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3730      	adds	r7, #48	; 0x30
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	431bde83 	.word	0x431bde83
 80018dc:	20000440 	.word	0x20000440
 80018e0:	40012c00 	.word	0x40012c00
 80018e4:	2000002c 	.word	0x2000002c

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ec:	e7fe      	b.n	80018ec <NMI_Handler+0x4>

080018ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler+0x4>

080018fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler+0x4>

08001906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT2_Pin);
 8001916:	2001      	movs	r0, #1
 8001918:	f001 f8b2 	bl	8002a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA1_Channel1_IRQHandler+0x10>)
 8001926:	f000 fddb 	bl	80024e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000374 	.word	0x20000374

08001934 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT1_Pin);
 8001938:	2080      	movs	r0, #128	; 0x80
 800193a:	f001 f8a1 	bl	8002a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM1_UP_IRQHandler+0x10>)
 800194a:	f001 ff2f 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000440 	.word	0x20000440

08001958 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001964:	f7ff fff8 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001968:	480b      	ldr	r0, [pc, #44]	; (8001998 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800196a:	490c      	ldr	r1, [pc, #48]	; (800199c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800196c:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001980:	4c09      	ldr	r4, [pc, #36]	; (80019a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198e:	f003 fddd 	bl	800554c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001992:	f7ff f845 	bl	8000a20 <main>
  bx lr
 8001996:	4770      	bx	lr
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800199c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80019a0:	08005704 	.word	0x08005704
  ldr r2, =_sbss
 80019a4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80019a8:	20001320 	.word	0x20001320

080019ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC1_2_IRQHandler>
	...

080019b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_Init+0x28>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_Init+0x28>)
 80019ba:	f043 0310 	orr.w	r3, r3, #16
 80019be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f000 fc9d 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c6:	200f      	movs	r0, #15
 80019c8:	f7ff ff1c 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019cc:	f7ff fe2e 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40022000 	.word	0x40022000

080019dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_IncTick+0x1c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_IncTick+0x20>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a03      	ldr	r2, [pc, #12]	; (80019fc <HAL_IncTick+0x20>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	20000030 	.word	0x20000030
 80019fc:	20000488 	.word	0x20000488

08001a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <HAL_GetTick+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000488 	.word	0x20000488

08001a14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0be      	b.n	8001bb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fe22 	bl	800169c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 faff 	bl	800205c <ADC_ConversionStop_Disable>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 8099 	bne.w	8001ba2 <HAL_ADC_Init+0x18e>
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 8095 	bne.w	8001ba2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a80:	f023 0302 	bic.w	r3, r3, #2
 8001a84:	f043 0202 	orr.w	r2, r3, #2
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7b1b      	ldrb	r3, [r3, #12]
 8001a9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aac:	d003      	beq.n	8001ab6 <HAL_ADC_Init+0xa2>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d102      	bne.n	8001abc <HAL_ADC_Init+0xa8>
 8001ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aba:	e000      	b.n	8001abe <HAL_ADC_Init+0xaa>
 8001abc:	2300      	movs	r3, #0
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7d1b      	ldrb	r3, [r3, #20]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d119      	bne.n	8001b00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7b1b      	ldrb	r3, [r3, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	035a      	lsls	r2, r3, #13
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	e00b      	b.n	8001b00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <HAL_ADC_Init+0x1a8>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	68b9      	ldr	r1, [r7, #8]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b30:	d003      	beq.n	8001b3a <HAL_ADC_Init+0x126>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d104      	bne.n	8001b44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	051b      	lsls	r3, r3, #20
 8001b42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_ADC_Init+0x1ac>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d10b      	bne.n	8001b80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	f023 0303 	bic.w	r3, r3, #3
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b7e:	e018      	b.n	8001bb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	f023 0312 	bic.w	r3, r3, #18
 8001b88:	f043 0210 	orr.w	r2, r3, #16
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ba0:	e007      	b.n	8001bb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	ffe1f7fd 	.word	0xffe1f7fd
 8001bc0:	ff1f0efe 	.word	0xff1f0efe

08001bc4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a64      	ldr	r2, [pc, #400]	; (8001d6c <HAL_ADC_Start_DMA+0x1a8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d004      	beq.n	8001be8 <HAL_ADC_Start_DMA+0x24>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a63      	ldr	r2, [pc, #396]	; (8001d70 <HAL_ADC_Start_DMA+0x1ac>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d106      	bne.n	8001bf6 <HAL_ADC_Start_DMA+0x32>
 8001be8:	4b60      	ldr	r3, [pc, #384]	; (8001d6c <HAL_ADC_Start_DMA+0x1a8>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 80b3 	bne.w	8001d5c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_Start_DMA+0x40>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e0ae      	b.n	8001d62 <HAL_ADC_Start_DMA+0x19e>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f9cb 	bl	8001fa8 <ADC_Enable>
 8001c12:	4603      	mov	r3, r0
 8001c14:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f040 809a 	bne.w	8001d52 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a4e      	ldr	r2, [pc, #312]	; (8001d70 <HAL_ADC_Start_DMA+0x1ac>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d105      	bne.n	8001c48 <HAL_ADC_Start_DMA+0x84>
 8001c3c:	4b4b      	ldr	r3, [pc, #300]	; (8001d6c <HAL_ADC_Start_DMA+0x1a8>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d115      	bne.n	8001c74 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d026      	beq.n	8001cb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c72:	e01d      	b.n	8001cb0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a39      	ldr	r2, [pc, #228]	; (8001d6c <HAL_ADC_Start_DMA+0x1a8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_ADC_Start_DMA+0xd0>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a38      	ldr	r2, [pc, #224]	; (8001d70 <HAL_ADC_Start_DMA+0x1ac>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d10d      	bne.n	8001cb0 <HAL_ADC_Start_DMA+0xec>
 8001c94:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_ADC_Start_DMA+0x1a8>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ca8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	f023 0206 	bic.w	r2, r3, #6
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cc8:	e002      	b.n	8001cd0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a25      	ldr	r2, [pc, #148]	; (8001d74 <HAL_ADC_Start_DMA+0x1b0>)
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <HAL_ADC_Start_DMA+0x1b4>)
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <HAL_ADC_Start_DMA+0x1b8>)
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0202 	mvn.w	r2, #2
 8001cf8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d08:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a18      	ldr	r0, [r3, #32]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	334c      	adds	r3, #76	; 0x4c
 8001d14:	4619      	mov	r1, r3
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f000 fb81 	bl	8002420 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d28:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d2c:	d108      	bne.n	8001d40 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d3c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d3e:	e00f      	b.n	8001d60 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d4e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001d50:	e006      	b.n	8001d60 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001d5a:	e001      	b.n	8001d60 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40012400 	.word	0x40012400
 8001d70:	40012800 	.word	0x40012800
 8001d74:	080020df 	.word	0x080020df
 8001d78:	0800215b 	.word	0x0800215b
 8001d7c:	08002177 	.word	0x08002177

08001d80 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x20>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e0dc      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x1da>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b06      	cmp	r3, #6
 8001de6:	d81c      	bhi.n	8001e22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	3b05      	subs	r3, #5
 8001dfa:	221f      	movs	r2, #31
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4019      	ands	r1, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	3b05      	subs	r3, #5
 8001e14:	fa00 f203 	lsl.w	r2, r0, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e20:	e03c      	b.n	8001e9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d81c      	bhi.n	8001e64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b23      	subs	r3, #35	; 0x23
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	4019      	ands	r1, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	3b23      	subs	r3, #35	; 0x23
 8001e56:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
 8001e62:	e01b      	b.n	8001e9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	3b41      	subs	r3, #65	; 0x41
 8001e76:	221f      	movs	r2, #31
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4019      	ands	r1, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b41      	subs	r3, #65	; 0x41
 8001e90:	fa00 f203 	lsl.w	r2, r0, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d91c      	bls.n	8001ede <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68d9      	ldr	r1, [r3, #12]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b1e      	subs	r3, #30
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4019      	ands	r1, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6898      	ldr	r0, [r3, #8]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b1e      	subs	r3, #30
 8001ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	e019      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6919      	ldr	r1, [r3, #16]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	2207      	movs	r2, #7
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4019      	ands	r1, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6898      	ldr	r0, [r3, #8]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b10      	cmp	r3, #16
 8001f18:	d003      	beq.n	8001f22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f1e:	2b11      	cmp	r3, #17
 8001f20:	d132      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_ADC_ConfigChannel+0x1e4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d125      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d126      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f48:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d11a      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	0c9a      	lsrs	r2, r3, #18
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f68:	e002      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f9      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x1b2>
 8001f76:	e007      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f043 0220 	orr.w	r2, r3, #32
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	40012400 	.word	0x40012400
 8001fa0:	20000028 	.word	0x20000028
 8001fa4:	431bde83 	.word	0x431bde83

08001fa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d040      	beq.n	8002048 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <ADC_Enable+0xac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <ADC_Enable+0xb0>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fe4:	e002      	b.n	8001fec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f9      	bne.n	8001fe6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ff2:	f7ff fd05 	bl	8001a00 <HAL_GetTick>
 8001ff6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ff8:	e01f      	b.n	800203a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ffa:	f7ff fd01 	bl	8001a00 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d918      	bls.n	800203a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d011      	beq.n	800203a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	f043 0210 	orr.w	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e007      	b.n	800204a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d1d8      	bne.n	8001ffa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000028 	.word	0x20000028
 8002058:	431bde83 	.word	0x431bde83

0800205c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d12e      	bne.n	80020d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002086:	f7ff fcbb 	bl	8001a00 <HAL_GetTick>
 800208a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800208c:	e01b      	b.n	80020c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800208e:	f7ff fcb7 	bl	8001a00 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d914      	bls.n	80020c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10d      	bne.n	80020c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	f043 0210 	orr.w	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e007      	b.n	80020d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d0dc      	beq.n	800208e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d127      	bne.n	8002148 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800210e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002112:	d115      	bne.n	8002140 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002118:	2b00      	cmp	r3, #0
 800211a:	d111      	bne.n	8002140 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7ff fe1d 	bl	8001d80 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002146:	e004      	b.n	8002152 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7ff fe12 	bl	8001d92 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	f043 0204 	orr.w	r2, r3, #4
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7ff fe01 	bl	8001da4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <__NVIC_GetPriorityGrouping+0x18>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0307 	and.w	r3, r3, #7
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db0b      	blt.n	800223a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4906      	ldr	r1, [pc, #24]	; (8002244 <__NVIC_EnableIRQ+0x34>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2001      	movs	r0, #1
 8002232:	fa00 f202 	lsl.w	r2, r0, r2
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100

08002248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	db0a      	blt.n	8002272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	490c      	ldr	r1, [pc, #48]	; (8002294 <__NVIC_SetPriority+0x4c>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	440b      	add	r3, r1
 800226c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002270:	e00a      	b.n	8002288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4908      	ldr	r1, [pc, #32]	; (8002298 <__NVIC_SetPriority+0x50>)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	3b04      	subs	r3, #4
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	440b      	add	r3, r1
 8002286:	761a      	strb	r2, [r3, #24]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f1c3 0307 	rsb	r3, r3, #7
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	bf28      	it	cs
 80022ba:	2304      	movcs	r3, #4
 80022bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d902      	bls.n	80022cc <NVIC_EncodePriority+0x30>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3b03      	subs	r3, #3
 80022ca:	e000      	b.n	80022ce <NVIC_EncodePriority+0x32>
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	4313      	orrs	r3, r2
         );
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff4f 	bl	80021ac <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff64 	bl	80021f4 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ffb2 	bl	800229c <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff81 	bl	8002248 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff57 	bl	8002210 <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e043      	b.n	800240a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_DMA_Init+0xa8>)
 800238a:	4413      	add	r3, r2
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_DMA_Init+0xac>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	009a      	lsls	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_DMA_Init+0xb0>)
 800239e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	bffdfff8 	.word	0xbffdfff8
 8002418:	cccccccd 	.word	0xcccccccd
 800241c:	40020000 	.word	0x40020000

08002420 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_DMA_Start_IT+0x20>
 800243c:	2302      	movs	r3, #2
 800243e:	e04b      	b.n	80024d8 <HAL_DMA_Start_IT+0xb8>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d13a      	bne.n	80024ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f937 	bl	80026ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 020e 	orr.w	r2, r2, #14
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e00f      	b.n	80024b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0204 	bic.w	r2, r2, #4
 80024a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 020a 	orr.w	r2, r2, #10
 80024b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e005      	b.n	80024d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
 80024d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	2204      	movs	r2, #4
 80024fe:	409a      	lsls	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d04f      	beq.n	80025a8 <HAL_DMA_IRQHandler+0xc8>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d04a      	beq.n	80025a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0204 	bic.w	r2, r2, #4
 800252e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a66      	ldr	r2, [pc, #408]	; (80026d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d029      	beq.n	800258e <HAL_DMA_IRQHandler+0xae>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a65      	ldr	r2, [pc, #404]	; (80026d4 <HAL_DMA_IRQHandler+0x1f4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d022      	beq.n	800258a <HAL_DMA_IRQHandler+0xaa>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a63      	ldr	r2, [pc, #396]	; (80026d8 <HAL_DMA_IRQHandler+0x1f8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01a      	beq.n	8002584 <HAL_DMA_IRQHandler+0xa4>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a62      	ldr	r2, [pc, #392]	; (80026dc <HAL_DMA_IRQHandler+0x1fc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d012      	beq.n	800257e <HAL_DMA_IRQHandler+0x9e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a60      	ldr	r2, [pc, #384]	; (80026e0 <HAL_DMA_IRQHandler+0x200>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00a      	beq.n	8002578 <HAL_DMA_IRQHandler+0x98>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a5f      	ldr	r2, [pc, #380]	; (80026e4 <HAL_DMA_IRQHandler+0x204>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d102      	bne.n	8002572 <HAL_DMA_IRQHandler+0x92>
 800256c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002570:	e00e      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 8002572:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002576:	e00b      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 8002578:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800257c:	e008      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 800257e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002582:	e005      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 8002584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002588:	e002      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 800258a:	2340      	movs	r3, #64	; 0x40
 800258c:	e000      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 800258e:	2304      	movs	r3, #4
 8002590:	4a55      	ldr	r2, [pc, #340]	; (80026e8 <HAL_DMA_IRQHandler+0x208>)
 8002592:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8094 	beq.w	80026c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025a6:	e08e      	b.n	80026c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	2202      	movs	r2, #2
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d056      	beq.n	8002666 <HAL_DMA_IRQHandler+0x186>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d051      	beq.n	8002666 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10b      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 020a 	bic.w	r2, r2, #10
 80025de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a38      	ldr	r2, [pc, #224]	; (80026d0 <HAL_DMA_IRQHandler+0x1f0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d029      	beq.n	8002646 <HAL_DMA_IRQHandler+0x166>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a37      	ldr	r2, [pc, #220]	; (80026d4 <HAL_DMA_IRQHandler+0x1f4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d022      	beq.n	8002642 <HAL_DMA_IRQHandler+0x162>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a35      	ldr	r2, [pc, #212]	; (80026d8 <HAL_DMA_IRQHandler+0x1f8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01a      	beq.n	800263c <HAL_DMA_IRQHandler+0x15c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a34      	ldr	r2, [pc, #208]	; (80026dc <HAL_DMA_IRQHandler+0x1fc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d012      	beq.n	8002636 <HAL_DMA_IRQHandler+0x156>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a32      	ldr	r2, [pc, #200]	; (80026e0 <HAL_DMA_IRQHandler+0x200>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00a      	beq.n	8002630 <HAL_DMA_IRQHandler+0x150>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <HAL_DMA_IRQHandler+0x204>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d102      	bne.n	800262a <HAL_DMA_IRQHandler+0x14a>
 8002624:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002628:	e00e      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 800262a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262e:	e00b      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 8002630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002634:	e008      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 8002636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800263a:	e005      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 800263c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002640:	e002      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 8002642:	2320      	movs	r3, #32
 8002644:	e000      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 8002646:	2302      	movs	r3, #2
 8002648:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <HAL_DMA_IRQHandler+0x208>)
 800264a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d034      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002664:	e02f      	b.n	80026c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2208      	movs	r2, #8
 800266c:	409a      	lsls	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d028      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x1e8>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 020e 	bic.w	r2, r2, #14
 800268e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f202 	lsl.w	r2, r1, r2
 800269e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d004      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
    }
  }
  return;
 80026c6:	bf00      	nop
 80026c8:	bf00      	nop
}
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40020008 	.word	0x40020008
 80026d4:	4002001c 	.word	0x4002001c
 80026d8:	40020030 	.word	0x40020030
 80026dc:	40020044 	.word	0x40020044
 80026e0:	40020058 	.word	0x40020058
 80026e4:	4002006c 	.word	0x4002006c
 80026e8:	40020000 	.word	0x40020000

080026ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	2101      	movs	r1, #1
 8002704:	fa01 f202 	lsl.w	r2, r1, r2
 8002708:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b10      	cmp	r3, #16
 8002718:	d108      	bne.n	800272c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800272a:	e007      	b.n	800273c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
	...

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b08b      	sub	sp, #44	; 0x2c
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275a:	e169      	b.n	8002a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800275c:	2201      	movs	r2, #1
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	429a      	cmp	r2, r3
 8002776:	f040 8158 	bne.w	8002a2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a9a      	ldr	r2, [pc, #616]	; (80029e8 <HAL_GPIO_Init+0x2a0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d05e      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
 8002784:	4a98      	ldr	r2, [pc, #608]	; (80029e8 <HAL_GPIO_Init+0x2a0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d875      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 800278a:	4a98      	ldr	r2, [pc, #608]	; (80029ec <HAL_GPIO_Init+0x2a4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d058      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
 8002790:	4a96      	ldr	r2, [pc, #600]	; (80029ec <HAL_GPIO_Init+0x2a4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d86f      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 8002796:	4a96      	ldr	r2, [pc, #600]	; (80029f0 <HAL_GPIO_Init+0x2a8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d052      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
 800279c:	4a94      	ldr	r2, [pc, #592]	; (80029f0 <HAL_GPIO_Init+0x2a8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d869      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 80027a2:	4a94      	ldr	r2, [pc, #592]	; (80029f4 <HAL_GPIO_Init+0x2ac>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d04c      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
 80027a8:	4a92      	ldr	r2, [pc, #584]	; (80029f4 <HAL_GPIO_Init+0x2ac>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d863      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 80027ae:	4a92      	ldr	r2, [pc, #584]	; (80029f8 <HAL_GPIO_Init+0x2b0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d046      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
 80027b4:	4a90      	ldr	r2, [pc, #576]	; (80029f8 <HAL_GPIO_Init+0x2b0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d85d      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 80027ba:	2b12      	cmp	r3, #18
 80027bc:	d82a      	bhi.n	8002814 <HAL_GPIO_Init+0xcc>
 80027be:	2b12      	cmp	r3, #18
 80027c0:	d859      	bhi.n	8002876 <HAL_GPIO_Init+0x12e>
 80027c2:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <HAL_GPIO_Init+0x80>)
 80027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c8:	08002843 	.word	0x08002843
 80027cc:	0800281d 	.word	0x0800281d
 80027d0:	0800282f 	.word	0x0800282f
 80027d4:	08002871 	.word	0x08002871
 80027d8:	08002877 	.word	0x08002877
 80027dc:	08002877 	.word	0x08002877
 80027e0:	08002877 	.word	0x08002877
 80027e4:	08002877 	.word	0x08002877
 80027e8:	08002877 	.word	0x08002877
 80027ec:	08002877 	.word	0x08002877
 80027f0:	08002877 	.word	0x08002877
 80027f4:	08002877 	.word	0x08002877
 80027f8:	08002877 	.word	0x08002877
 80027fc:	08002877 	.word	0x08002877
 8002800:	08002877 	.word	0x08002877
 8002804:	08002877 	.word	0x08002877
 8002808:	08002877 	.word	0x08002877
 800280c:	08002825 	.word	0x08002825
 8002810:	08002839 	.word	0x08002839
 8002814:	4a79      	ldr	r2, [pc, #484]	; (80029fc <HAL_GPIO_Init+0x2b4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800281a:	e02c      	b.n	8002876 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	623b      	str	r3, [r7, #32]
          break;
 8002822:	e029      	b.n	8002878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	3304      	adds	r3, #4
 800282a:	623b      	str	r3, [r7, #32]
          break;
 800282c:	e024      	b.n	8002878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	3308      	adds	r3, #8
 8002834:	623b      	str	r3, [r7, #32]
          break;
 8002836:	e01f      	b.n	8002878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	330c      	adds	r3, #12
 800283e:	623b      	str	r3, [r7, #32]
          break;
 8002840:	e01a      	b.n	8002878 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800284a:	2304      	movs	r3, #4
 800284c:	623b      	str	r3, [r7, #32]
          break;
 800284e:	e013      	b.n	8002878 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002858:	2308      	movs	r3, #8
 800285a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	611a      	str	r2, [r3, #16]
          break;
 8002862:	e009      	b.n	8002878 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002864:	2308      	movs	r3, #8
 8002866:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	615a      	str	r2, [r3, #20]
          break;
 800286e:	e003      	b.n	8002878 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
          break;
 8002874:	e000      	b.n	8002878 <HAL_GPIO_Init+0x130>
          break;
 8002876:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2bff      	cmp	r3, #255	; 0xff
 800287c:	d801      	bhi.n	8002882 <HAL_GPIO_Init+0x13a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	e001      	b.n	8002886 <HAL_GPIO_Init+0x13e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3304      	adds	r3, #4
 8002886:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2bff      	cmp	r3, #255	; 0xff
 800288c:	d802      	bhi.n	8002894 <HAL_GPIO_Init+0x14c>
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	e002      	b.n	800289a <HAL_GPIO_Init+0x152>
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	3b08      	subs	r3, #8
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	210f      	movs	r1, #15
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	401a      	ands	r2, r3
 80028ac:	6a39      	ldr	r1, [r7, #32]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	431a      	orrs	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80b1 	beq.w	8002a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028c8:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <HAL_GPIO_Init+0x2b8>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a4c      	ldr	r2, [pc, #304]	; (8002a00 <HAL_GPIO_Init+0x2b8>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_GPIO_Init+0x2b8>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028e0:	4a48      	ldr	r2, [pc, #288]	; (8002a04 <HAL_GPIO_Init+0x2bc>)
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	220f      	movs	r2, #15
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a40      	ldr	r2, [pc, #256]	; (8002a08 <HAL_GPIO_Init+0x2c0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d013      	beq.n	8002934 <HAL_GPIO_Init+0x1ec>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a3f      	ldr	r2, [pc, #252]	; (8002a0c <HAL_GPIO_Init+0x2c4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00d      	beq.n	8002930 <HAL_GPIO_Init+0x1e8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a3e      	ldr	r2, [pc, #248]	; (8002a10 <HAL_GPIO_Init+0x2c8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d007      	beq.n	800292c <HAL_GPIO_Init+0x1e4>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a3d      	ldr	r2, [pc, #244]	; (8002a14 <HAL_GPIO_Init+0x2cc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_GPIO_Init+0x1e0>
 8002924:	2303      	movs	r3, #3
 8002926:	e006      	b.n	8002936 <HAL_GPIO_Init+0x1ee>
 8002928:	2304      	movs	r3, #4
 800292a:	e004      	b.n	8002936 <HAL_GPIO_Init+0x1ee>
 800292c:	2302      	movs	r3, #2
 800292e:	e002      	b.n	8002936 <HAL_GPIO_Init+0x1ee>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_GPIO_Init+0x1ee>
 8002934:	2300      	movs	r3, #0
 8002936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002938:	f002 0203 	and.w	r2, r2, #3
 800293c:	0092      	lsls	r2, r2, #2
 800293e:	4093      	lsls	r3, r2
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002946:	492f      	ldr	r1, [pc, #188]	; (8002a04 <HAL_GPIO_Init+0x2bc>)
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3302      	adds	r3, #2
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002960:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	492c      	ldr	r1, [pc, #176]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	608b      	str	r3, [r1, #8]
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800296e:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	43db      	mvns	r3, r3
 8002976:	4928      	ldr	r1, [pc, #160]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 8002978:	4013      	ands	r3, r2
 800297a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d006      	beq.n	8002996 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002988:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	4922      	ldr	r1, [pc, #136]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	60cb      	str	r3, [r1, #12]
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	43db      	mvns	r3, r3
 800299e:	491e      	ldr	r1, [pc, #120]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d006      	beq.n	80029be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	4918      	ldr	r1, [pc, #96]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4914      	ldr	r1, [pc, #80]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d021      	beq.n	8002a1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <HAL_GPIO_Init+0x2d0>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]
 80029e4:	e021      	b.n	8002a2a <HAL_GPIO_Init+0x2e2>
 80029e6:	bf00      	nop
 80029e8:	10320000 	.word	0x10320000
 80029ec:	10310000 	.word	0x10310000
 80029f0:	10220000 	.word	0x10220000
 80029f4:	10210000 	.word	0x10210000
 80029f8:	10120000 	.word	0x10120000
 80029fc:	10110000 	.word	0x10110000
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40010800 	.word	0x40010800
 8002a0c:	40010c00 	.word	0x40010c00
 8002a10:	40011000 	.word	0x40011000
 8002a14:	40011400 	.word	0x40011400
 8002a18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_GPIO_Init+0x304>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	4909      	ldr	r1, [pc, #36]	; (8002a4c <HAL_GPIO_Init+0x304>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f47f ae8e 	bne.w	800275c <HAL_GPIO_Init+0x14>
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	372c      	adds	r7, #44	; 0x2c
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	40010400 	.word	0x40010400

08002a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a6c:	e003      	b.n	8002a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	041a      	lsls	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d006      	beq.n	8002aa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd ffa4 	bl	80009ec <HAL_GPIO_EXTI_Callback>
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40010400 	.word	0x40010400

08002ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e272      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8087 	beq.w	8002bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad0:	4b92      	ldr	r3, [pc, #584]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d00c      	beq.n	8002af6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002adc:	4b8f      	ldr	r3, [pc, #572]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d112      	bne.n	8002b0e <HAL_RCC_OscConfig+0x5e>
 8002ae8:	4b8c      	ldr	r3, [pc, #560]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af4:	d10b      	bne.n	8002b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af6:	4b89      	ldr	r3, [pc, #548]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d06c      	beq.n	8002bdc <HAL_RCC_OscConfig+0x12c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d168      	bne.n	8002bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e24c      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x76>
 8002b18:	4b80      	ldr	r3, [pc, #512]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a7f      	ldr	r2, [pc, #508]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	e02e      	b.n	8002b84 <HAL_RCC_OscConfig+0xd4>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x98>
 8002b2e:	4b7b      	ldr	r3, [pc, #492]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7a      	ldr	r2, [pc, #488]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b78      	ldr	r3, [pc, #480]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a77      	ldr	r2, [pc, #476]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0xd4>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0xbc>
 8002b52:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a71      	ldr	r2, [pc, #452]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b6f      	ldr	r3, [pc, #444]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6e      	ldr	r2, [pc, #440]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xd4>
 8002b6c:	4b6b      	ldr	r3, [pc, #428]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6a      	ldr	r2, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a67      	ldr	r2, [pc, #412]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe ff38 	bl	8001a00 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fe ff34 	bl	8001a00 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e200      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b5d      	ldr	r3, [pc, #372]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0xe4>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe ff24 	bl	8001a00 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7fe ff20 	bl	8001a00 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	; 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1ec      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x10c>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d063      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bea:	4b4c      	ldr	r3, [pc, #304]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bf6:	4b49      	ldr	r3, [pc, #292]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x18c>
 8002c02:	4b46      	ldr	r3, [pc, #280]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_RCC_OscConfig+0x176>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1c0      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b3d      	ldr	r3, [pc, #244]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4939      	ldr	r1, [pc, #228]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	e03a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d020      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_RCC_OscConfig+0x270>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fed9 	bl	8001a00 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c52:	f7fe fed5 	bl	8001a00 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1a1      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c70:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4927      	ldr	r1, [pc, #156]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c86:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <HAL_RCC_OscConfig+0x270>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe feb8 	bl	8001a00 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe feb4 	bl	8001a00 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e180      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d03a      	beq.n	8002d34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d019      	beq.n	8002cfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ccc:	f7fe fe98 	bl	8001a00 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7fe fe94 	bl	8001a00 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e160      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f000 faea 	bl	80032cc <RCC_Delay>
 8002cf8:	e01c      	b.n	8002d34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d00:	f7fe fe7e 	bl	8001a00 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d06:	e00f      	b.n	8002d28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d08:	f7fe fe7a 	bl	8001a00 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d908      	bls.n	8002d28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e146      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	42420000 	.word	0x42420000
 8002d24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d28:	4b92      	ldr	r3, [pc, #584]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e9      	bne.n	8002d08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80a6 	beq.w	8002e8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d46:	4b8b      	ldr	r3, [pc, #556]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10d      	bne.n	8002d6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	4b88      	ldr	r3, [pc, #544]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	4a87      	ldr	r2, [pc, #540]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	61d3      	str	r3, [r2, #28]
 8002d5e:	4b85      	ldr	r3, [pc, #532]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b82      	ldr	r3, [pc, #520]	; (8002f78 <HAL_RCC_OscConfig+0x4c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d118      	bne.n	8002dac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b7f      	ldr	r3, [pc, #508]	; (8002f78 <HAL_RCC_OscConfig+0x4c8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a7e      	ldr	r2, [pc, #504]	; (8002f78 <HAL_RCC_OscConfig+0x4c8>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7fe fe3b 	bl	8001a00 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7fe fe37 	bl	8001a00 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b64      	cmp	r3, #100	; 0x64
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e103      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b75      	ldr	r3, [pc, #468]	; (8002f78 <HAL_RCC_OscConfig+0x4c8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x312>
 8002db4:	4b6f      	ldr	r3, [pc, #444]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4a6e      	ldr	r2, [pc, #440]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6213      	str	r3, [r2, #32]
 8002dc0:	e02d      	b.n	8002e1e <HAL_RCC_OscConfig+0x36e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x334>
 8002dca:	4b6a      	ldr	r3, [pc, #424]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4a69      	ldr	r2, [pc, #420]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	6213      	str	r3, [r2, #32]
 8002dd6:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4a66      	ldr	r2, [pc, #408]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	6213      	str	r3, [r2, #32]
 8002de2:	e01c      	b.n	8002e1e <HAL_RCC_OscConfig+0x36e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d10c      	bne.n	8002e06 <HAL_RCC_OscConfig+0x356>
 8002dec:	4b61      	ldr	r3, [pc, #388]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a60      	ldr	r2, [pc, #384]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	f043 0304 	orr.w	r3, r3, #4
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	4b5e      	ldr	r3, [pc, #376]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6213      	str	r3, [r2, #32]
 8002e04:	e00b      	b.n	8002e1e <HAL_RCC_OscConfig+0x36e>
 8002e06:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	4a5a      	ldr	r2, [pc, #360]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	6213      	str	r3, [r2, #32]
 8002e12:	4b58      	ldr	r3, [pc, #352]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4a57      	ldr	r2, [pc, #348]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	f023 0304 	bic.w	r3, r3, #4
 8002e1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d015      	beq.n	8002e52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7fe fdeb 	bl	8001a00 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2c:	e00a      	b.n	8002e44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7fe fde7 	bl	8001a00 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0b1      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ee      	beq.n	8002e2e <HAL_RCC_OscConfig+0x37e>
 8002e50:	e014      	b.n	8002e7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e52:	f7fe fdd5 	bl	8001a00 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fe fdd1 	bl	8001a00 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e09b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	4b40      	ldr	r3, [pc, #256]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ee      	bne.n	8002e5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d105      	bne.n	8002e8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e82:	4b3c      	ldr	r3, [pc, #240]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8087 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e98:	4b36      	ldr	r3, [pc, #216]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d061      	beq.n	8002f68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d146      	bne.n	8002f3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eac:	4b33      	ldr	r3, [pc, #204]	; (8002f7c <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fda5 	bl	8001a00 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fe fda1 	bl	8001a00 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e06d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ecc:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d108      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	4921      	ldr	r1, [pc, #132]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a19      	ldr	r1, [r3, #32]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	430b      	orrs	r3, r1
 8002f06:	491b      	ldr	r1, [pc, #108]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_RCC_OscConfig+0x4cc>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f12:	f7fe fd75 	bl	8001a00 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7fe fd71 	bl	8001a00 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e03d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x46a>
 8002f38:	e035      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_RCC_OscConfig+0x4cc>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe fd5e 	bl	8001a00 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe fd5a 	bl	8001a00 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e026      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x498>
 8002f66:	e01e      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e019      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_OscConfig+0x500>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0d0      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d910      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b67      	ldr	r3, [pc, #412]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 0207 	bic.w	r2, r3, #7
 8002fde:	4965      	ldr	r1, [pc, #404]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b63      	ldr	r3, [pc, #396]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0b8      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003010:	4b59      	ldr	r3, [pc, #356]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4a58      	ldr	r2, [pc, #352]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800301a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003028:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a52      	ldr	r2, [pc, #328]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003032:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003034:	4b50      	ldr	r3, [pc, #320]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	494d      	ldr	r1, [pc, #308]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d040      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d115      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e07f      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e073      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06b      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003092:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4936      	ldr	r1, [pc, #216]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a4:	f7fe fcac 	bl	8001a00 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ac:	f7fe fca8 	bl	8001a00 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e053      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 020c 	and.w	r2, r3, #12
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1eb      	bne.n	80030ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b27      	ldr	r3, [pc, #156]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d210      	bcs.n	8003104 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0207 	bic.w	r2, r3, #7
 80030ea:	4922      	ldr	r1, [pc, #136]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e032      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4916      	ldr	r1, [pc, #88]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	490e      	ldr	r1, [pc, #56]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003142:	f000 f821 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 8003146:	4602      	mov	r2, r0
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	490a      	ldr	r1, [pc, #40]	; (800317c <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	5ccb      	ldrb	r3, [r1, r3]
 8003156:	fa22 f303 	lsr.w	r3, r2, r3
 800315a:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_RCC_ClockConfig+0x1cc>)
 800315c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_ClockConfig+0x1d0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe fb4e 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40022000 	.word	0x40022000
 8003178:	40021000 	.word	0x40021000
 800317c:	080056d0 	.word	0x080056d0
 8003180:	20000028 	.word	0x20000028
 8003184:	2000002c 	.word	0x2000002c

08003188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031a2:	4b1e      	ldr	r3, [pc, #120]	; (800321c <HAL_RCC_GetSysClockFreq+0x94>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d002      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x30>
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d003      	beq.n	80031be <HAL_RCC_GetSysClockFreq+0x36>
 80031b6:	e027      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ba:	613b      	str	r3, [r7, #16]
      break;
 80031bc:	e027      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	0c9b      	lsrs	r3, r3, #18
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	4a17      	ldr	r2, [pc, #92]	; (8003224 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031c8:	5cd3      	ldrb	r3, [r2, r3]
 80031ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_RCC_GetSysClockFreq+0x94>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	0c5b      	lsrs	r3, r3, #17
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	4a11      	ldr	r2, [pc, #68]	; (8003228 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ea:	fb03 f202 	mul.w	r2, r3, r2
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e004      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a0c      	ldr	r2, [pc, #48]	; (800322c <HAL_RCC_GetSysClockFreq+0xa4>)
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	613b      	str	r3, [r7, #16]
      break;
 8003206:	e002      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetSysClockFreq+0x98>)
 800320a:	613b      	str	r3, [r7, #16]
      break;
 800320c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320e:	693b      	ldr	r3, [r7, #16]
}
 8003210:	4618      	mov	r0, r3
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	007a1200 	.word	0x007a1200
 8003224:	080056e8 	.word	0x080056e8
 8003228:	080056f8 	.word	0x080056f8
 800322c:	003d0900 	.word	0x003d0900

08003230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003234:	4b02      	ldr	r3, [pc, #8]	; (8003240 <HAL_RCC_GetHCLKFreq+0x10>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	20000028 	.word	0x20000028

08003244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003248:	f7ff fff2 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	0adb      	lsrs	r3, r3, #11
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4903      	ldr	r1, [pc, #12]	; (8003268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	080056e0 	.word	0x080056e0

0800326c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	220f      	movs	r2, #15
 800327a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_GetClockConfig+0x58>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0203 	and.w	r2, r3, #3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003288:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_RCC_GetClockConfig+0x58>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_GetClockConfig+0x58>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_RCC_GetClockConfig+0x58>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_RCC_GetClockConfig+0x5c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0207 	and.w	r2, r3, #7
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40022000 	.word	0x40022000

080032cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <RCC_Delay+0x34>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <RCC_Delay+0x38>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0a5b      	lsrs	r3, r3, #9
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032e8:	bf00      	nop
  }
  while (Delay --);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1e5a      	subs	r2, r3, #1
 80032ee:	60fa      	str	r2, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f9      	bne.n	80032e8 <RCC_Delay+0x1c>
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	20000028 	.word	0x20000028
 8003304:	10624dd3 	.word	0x10624dd3

08003308 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d07d      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003324:	2300      	movs	r3, #0
 8003326:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003328:	4b4f      	ldr	r3, [pc, #316]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10d      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003334:	4b4c      	ldr	r3, [pc, #304]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4a4b      	ldr	r2, [pc, #300]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333e:	61d3      	str	r3, [r2, #28]
 8003340:	4b49      	ldr	r3, [pc, #292]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334c:	2301      	movs	r3, #1
 800334e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b46      	ldr	r3, [pc, #280]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d118      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335c:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a42      	ldr	r2, [pc, #264]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003366:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003368:	f7fe fb4a 	bl	8001a00 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	e008      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003370:	f7fe fb46 	bl	8001a00 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e06d      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b3a      	ldr	r3, [pc, #232]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d02e      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d027      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033ac:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033b6:	4b2e      	ldr	r3, [pc, #184]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033bc:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033c2:	4a29      	ldr	r2, [pc, #164]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d014      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d2:	f7fe fb15 	bl	8001a00 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe fb11 	bl	8001a00 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e036      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ee      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4917      	ldr	r1, [pc, #92]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	4313      	orrs	r3, r2
 800340c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	4a13      	ldr	r2, [pc, #76]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	490b      	ldr	r1, [pc, #44]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800344a:	4b07      	ldr	r3, [pc, #28]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4904      	ldr	r1, [pc, #16]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	40007000 	.word	0x40007000
 8003470:	42420440 	.word	0x42420440

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e041      	b.n	800350a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f839 	bl	8003512 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 fb50 	bl	8003b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d001      	beq.n	800353c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e03a      	b.n	80035b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_TIM_Base_Start_IT+0x98>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00e      	beq.n	800357c <HAL_TIM_Base_Start_IT+0x58>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003566:	d009      	beq.n	800357c <HAL_TIM_Base_Start_IT+0x58>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_TIM_Base_Start_IT+0x58>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a13      	ldr	r2, [pc, #76]	; (80035c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d111      	bne.n	80035a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b06      	cmp	r3, #6
 800358c:	d010      	beq.n	80035b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359e:	e007      	b.n	80035b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800

080035c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e041      	b.n	800365e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fe f8bc 	bl	800176c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f000 faa6 	bl	8003b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <HAL_TIM_PWM_Start+0x24>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e022      	b.n	80036d2 <HAL_TIM_PWM_Start+0x6a>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b04      	cmp	r3, #4
 8003690:	d109      	bne.n	80036a6 <HAL_TIM_PWM_Start+0x3e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	bf14      	ite	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	2300      	moveq	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	e015      	b.n	80036d2 <HAL_TIM_PWM_Start+0x6a>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d109      	bne.n	80036c0 <HAL_TIM_PWM_Start+0x58>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e008      	b.n	80036d2 <HAL_TIM_PWM_Start+0x6a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e05e      	b.n	8003798 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d104      	bne.n	80036ea <HAL_TIM_PWM_Start+0x82>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e8:	e013      	b.n	8003712 <HAL_TIM_PWM_Start+0xaa>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d104      	bne.n	80036fa <HAL_TIM_PWM_Start+0x92>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f8:	e00b      	b.n	8003712 <HAL_TIM_PWM_Start+0xaa>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d104      	bne.n	800370a <HAL_TIM_PWM_Start+0xa2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003708:	e003      	b.n	8003712 <HAL_TIM_PWM_Start+0xaa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2202      	movs	r2, #2
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fc12 	bl	8003f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <HAL_TIM_PWM_Start+0x138>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d107      	bne.n	800373a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_TIM_PWM_Start+0x138>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00e      	beq.n	8003762 <HAL_TIM_PWM_Start+0xfa>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374c:	d009      	beq.n	8003762 <HAL_TIM_PWM_Start+0xfa>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <HAL_TIM_PWM_Start+0x13c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_TIM_PWM_Start+0xfa>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a12      	ldr	r2, [pc, #72]	; (80037a8 <HAL_TIM_PWM_Start+0x140>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d111      	bne.n	8003786 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b06      	cmp	r3, #6
 8003772:	d010      	beq.n	8003796 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003784:	e007      	b.n	8003796 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800

080037ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d020      	beq.n	8003810 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01b      	beq.n	8003810 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0202 	mvn.w	r2, #2
 80037e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f993 	bl	8003b22 <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f986 	bl	8003b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f995 	bl	8003b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d020      	beq.n	800385c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01b      	beq.n	800385c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0204 	mvn.w	r2, #4
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f96d 	bl	8003b22 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f960 	bl	8003b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f96f 	bl	8003b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d020      	beq.n	80038a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0208 	mvn.w	r2, #8
 8003878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2204      	movs	r2, #4
 800387e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f947 	bl	8003b22 <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f93a 	bl	8003b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f949 	bl	8003b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d020      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01b      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0210 	mvn.w	r2, #16
 80038c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2208      	movs	r2, #8
 80038ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f921 	bl	8003b22 <HAL_TIM_IC_CaptureCallback>
 80038e0:	e005      	b.n	80038ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f914 	bl	8003b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f923 	bl	8003b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00c      	beq.n	8003918 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0201 	mvn.w	r2, #1
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd fe72 	bl	80015fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fb8f 	bl	800405a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f8f3 	bl	8003b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00c      	beq.n	8003984 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0220 	mvn.w	r2, #32
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fb62 	bl	8004048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0ae      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	f200 809f 	bhi.w	8003af8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039f5 	.word	0x080039f5
 80039c4:	08003af9 	.word	0x08003af9
 80039c8:	08003af9 	.word	0x08003af9
 80039cc:	08003af9 	.word	0x08003af9
 80039d0:	08003a35 	.word	0x08003a35
 80039d4:	08003af9 	.word	0x08003af9
 80039d8:	08003af9 	.word	0x08003af9
 80039dc:	08003af9 	.word	0x08003af9
 80039e0:	08003a77 	.word	0x08003a77
 80039e4:	08003af9 	.word	0x08003af9
 80039e8:	08003af9 	.word	0x08003af9
 80039ec:	08003af9 	.word	0x08003af9
 80039f0:	08003ab7 	.word	0x08003ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f91a 	bl	8003c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0208 	orr.w	r2, r2, #8
 8003a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0204 	bic.w	r2, r2, #4
 8003a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6999      	ldr	r1, [r3, #24]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	619a      	str	r2, [r3, #24]
      break;
 8003a32:	e064      	b.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f960 	bl	8003d00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6999      	ldr	r1, [r3, #24]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	021a      	lsls	r2, r3, #8
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	619a      	str	r2, [r3, #24]
      break;
 8003a74:	e043      	b.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f9a9 	bl	8003dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0208 	orr.w	r2, r2, #8
 8003a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0204 	bic.w	r2, r2, #4
 8003aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69d9      	ldr	r1, [r3, #28]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	61da      	str	r2, [r3, #28]
      break;
 8003ab4:	e023      	b.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 f9f3 	bl	8003ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69d9      	ldr	r1, [r3, #28]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	61da      	str	r2, [r3, #28]
      break;
 8003af6:	e002      	b.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
      break;
 8003afc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a2f      	ldr	r2, [pc, #188]	; (8003c28 <TIM_Base_SetConfig+0xd0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00b      	beq.n	8003b88 <TIM_Base_SetConfig+0x30>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b76:	d007      	beq.n	8003b88 <TIM_Base_SetConfig+0x30>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <TIM_Base_SetConfig+0xd4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_Base_SetConfig+0x30>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a2b      	ldr	r2, [pc, #172]	; (8003c30 <TIM_Base_SetConfig+0xd8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d108      	bne.n	8003b9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a22      	ldr	r2, [pc, #136]	; (8003c28 <TIM_Base_SetConfig+0xd0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <TIM_Base_SetConfig+0x62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba8:	d007      	beq.n	8003bba <TIM_Base_SetConfig+0x62>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a1f      	ldr	r2, [pc, #124]	; (8003c2c <TIM_Base_SetConfig+0xd4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <TIM_Base_SetConfig+0x62>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <TIM_Base_SetConfig+0xd8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d108      	bne.n	8003bcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a0d      	ldr	r2, [pc, #52]	; (8003c28 <TIM_Base_SetConfig+0xd0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d103      	bne.n	8003c00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f023 0201 	bic.w	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	611a      	str	r2, [r3, #16]
  }
}
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800

08003c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f023 0201 	bic.w	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f023 0302 	bic.w	r3, r3, #2
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <TIM_OC1_SetConfig+0xc8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d10c      	bne.n	8003caa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0308 	bic.w	r3, r3, #8
 8003c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f023 0304 	bic.w	r3, r3, #4
 8003ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <TIM_OC1_SetConfig+0xc8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d111      	bne.n	8003cd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	621a      	str	r2, [r3, #32]
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40012c00 	.word	0x40012c00

08003d00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f023 0210 	bic.w	r2, r3, #16
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0320 	bic.w	r3, r3, #32
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a1d      	ldr	r2, [pc, #116]	; (8003dd0 <TIM_OC2_SetConfig+0xd0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d10d      	bne.n	8003d7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <TIM_OC2_SetConfig+0xd0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d113      	bne.n	8003dac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	621a      	str	r2, [r3, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	40012c00 	.word	0x40012c00

08003dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <TIM_OC3_SetConfig+0xd0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d10d      	bne.n	8003e4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <TIM_OC3_SetConfig+0xd0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d113      	bne.n	8003e7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	621a      	str	r2, [r3, #32]
}
 8003e98:	bf00      	nop
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40012c00 	.word	0x40012c00

08003ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	031b      	lsls	r3, r3, #12
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0f      	ldr	r2, [pc, #60]	; (8003f40 <TIM_OC4_SetConfig+0x98>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d109      	bne.n	8003f1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	019b      	lsls	r3, r3, #6
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	40012c00 	.word	0x40012c00

08003f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2201      	movs	r2, #1
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	401a      	ands	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1a      	ldr	r2, [r3, #32]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e046      	b.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a16      	ldr	r2, [pc, #88]	; (800403c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff0:	d009      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a10      	ldr	r2, [pc, #64]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10c      	bne.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800400c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4313      	orrs	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	40012c00 	.word	0x40012c00
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800

08004048 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800407a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800407e:	2b84      	cmp	r3, #132	; 0x84
 8004080:	d005      	beq.n	800408e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004082:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	3303      	adds	r3, #3
 800408c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800408e:	68fb      	ldr	r3, [r7, #12]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr

0800409a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800409e:	f000 faf1 	bl	8004684 <vTaskStartScheduler>
  
  return osOK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040aa:	b089      	sub	sp, #36	; 0x24
 80040ac:	af04      	add	r7, sp, #16
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d020      	beq.n	80040fc <osThreadCreate+0x54>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01c      	beq.n	80040fc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685c      	ldr	r4, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691e      	ldr	r6, [r3, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff ffc9 	bl	800406c <makeFreeRtosPriority>
 80040da:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040e4:	9202      	str	r2, [sp, #8]
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	9100      	str	r1, [sp, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	4632      	mov	r2, r6
 80040ee:	4629      	mov	r1, r5
 80040f0:	4620      	mov	r0, r4
 80040f2:	f000 f8e8 	bl	80042c6 <xTaskCreateStatic>
 80040f6:	4603      	mov	r3, r0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	e01c      	b.n	8004136 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685c      	ldr	r4, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004108:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ffab 	bl	800406c <makeFreeRtosPriority>
 8004116:	4602      	mov	r2, r0
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	9200      	str	r2, [sp, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4632      	mov	r2, r6
 8004124:	4629      	mov	r1, r5
 8004126:	4620      	mov	r0, r4
 8004128:	f000 f92a 	bl	8004380 <xTaskCreate>
 800412c:	4603      	mov	r3, r0
 800412e:	2b01      	cmp	r3, #1
 8004130:	d001      	beq.n	8004136 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	e000      	b.n	8004138 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004136:	68fb      	ldr	r3, [r7, #12]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004140 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <osDelay+0x16>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	e000      	b.n	8004158 <osDelay+0x18>
 8004156:	2301      	movs	r3, #1
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fa5f 	bl	800461c <vTaskDelay>
  
  return osOK;
 800415e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f103 0208 	add.w	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f04f 32ff 	mov.w	r2, #4294967295
 8004180:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f103 0208 	add.w	r2, r3, #8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f103 0208 	add.w	r2, r3, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]
}
 80041fa:	bf00      	nop
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d103      	bne.n	8004224 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	e00c      	b.n	800423e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3308      	adds	r3, #8
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e002      	b.n	8004232 <vListInsert+0x2e>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	d2f6      	bcs.n	800422c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	601a      	str	r2, [r3, #0]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6892      	ldr	r2, [r2, #8]
 800428a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6852      	ldr	r2, [r2, #4]
 8004294:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	429a      	cmp	r2, r3
 800429e:	d103      	bne.n	80042a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	1e5a      	subs	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b08e      	sub	sp, #56	; 0x38
 80042ca:	af04      	add	r7, sp, #16
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <xTaskCreateStatic+0x46>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	61fb      	str	r3, [r7, #28]
}
 8004308:	bf00      	nop
 800430a:	e7fe      	b.n	800430a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800430c:	23a0      	movs	r3, #160	; 0xa0
 800430e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2ba0      	cmp	r3, #160	; 0xa0
 8004314:	d00a      	beq.n	800432c <xTaskCreateStatic+0x66>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	61bb      	str	r3, [r7, #24]
}
 8004328:	bf00      	nop
 800432a:	e7fe      	b.n	800432a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800432c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01e      	beq.n	8004372 <xTaskCreateStatic+0xac>
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01b      	beq.n	8004372 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004342:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	2202      	movs	r2, #2
 8004348:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800434c:	2300      	movs	r3, #0
 800434e:	9303      	str	r3, [sp, #12]
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	9302      	str	r3, [sp, #8]
 8004354:	f107 0314 	add.w	r3, r7, #20
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f851 	bl	800440c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800436a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800436c:	f000 f8ec 	bl	8004548 <prvAddNewTaskToReadyList>
 8004370:	e001      	b.n	8004376 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004376:	697b      	ldr	r3, [r7, #20]
	}
 8004378:	4618      	mov	r0, r3
 800437a:	3728      	adds	r7, #40	; 0x28
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08c      	sub	sp, #48	; 0x30
 8004384:	af04      	add	r7, sp, #16
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fe93 	bl	80050c0 <pvPortMalloc>
 800439a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00e      	beq.n	80043c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043a2:	20a0      	movs	r0, #160	; 0xa0
 80043a4:	f000 fe8c 	bl	80050c0 <pvPortMalloc>
 80043a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
 80043b6:	e005      	b.n	80043c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043b8:	6978      	ldr	r0, [r7, #20]
 80043ba:	f000 ff4d 	bl	8005258 <vPortFree>
 80043be:	e001      	b.n	80043c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d017      	beq.n	80043fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043d2:	88fa      	ldrh	r2, [r7, #6]
 80043d4:	2300      	movs	r3, #0
 80043d6:	9303      	str	r3, [sp, #12]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	9302      	str	r3, [sp, #8]
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f80f 	bl	800440c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043ee:	69f8      	ldr	r0, [r7, #28]
 80043f0:	f000 f8aa 	bl	8004548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043f4:	2301      	movs	r3, #1
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	e002      	b.n	8004400 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043fa:	f04f 33ff 	mov.w	r3, #4294967295
 80043fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004400:	69bb      	ldr	r3, [r7, #24]
	}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004424:	3b01      	subs	r3, #1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f023 0307 	bic.w	r3, r3, #7
 8004432:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <prvInitialiseNewTask+0x48>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	617b      	str	r3, [r7, #20]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01f      	beq.n	800449a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e012      	b.n	8004486 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	7819      	ldrb	r1, [r3, #0]
 8004468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	3334      	adds	r3, #52	; 0x34
 8004470:	460a      	mov	r2, r1
 8004472:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d006      	beq.n	800448e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3301      	adds	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	2b0f      	cmp	r3, #15
 800448a:	d9e9      	bls.n	8004460 <prvInitialiseNewTask+0x54>
 800448c:	e000      	b.n	8004490 <prvInitialiseNewTask+0x84>
			{
				break;
 800448e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004498:	e003      	b.n	80044a2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d901      	bls.n	80044ac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044a8:	2306      	movs	r3, #6
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	2200      	movs	r2, #0
 80044bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	3304      	adds	r3, #4
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fe6f 	bl	80041a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	3318      	adds	r3, #24
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fe6a 	bl	80041a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	f1c3 0207 	rsb	r2, r3, #7
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	334c      	adds	r3, #76	; 0x4c
 80044fc:	224c      	movs	r2, #76	; 0x4c
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f000 ffc5 	bl	8005490 <memset>
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	4a0c      	ldr	r2, [pc, #48]	; (800453c <prvInitialiseNewTask+0x130>)
 800450a:	651a      	str	r2, [r3, #80]	; 0x50
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	4a0c      	ldr	r2, [pc, #48]	; (8004540 <prvInitialiseNewTask+0x134>)
 8004510:	655a      	str	r2, [r3, #84]	; 0x54
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	4a0b      	ldr	r2, [pc, #44]	; (8004544 <prvInitialiseNewTask+0x138>)
 8004516:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	69b8      	ldr	r0, [r7, #24]
 800451e:	f000 fc1f 	bl	8004d60 <pxPortInitialiseStack>
 8004522:	4602      	mov	r2, r0
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004532:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004534:	bf00      	nop
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	200011e0 	.word	0x200011e0
 8004540:	20001248 	.word	0x20001248
 8004544:	200012b0 	.word	0x200012b0

08004548 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004550:	f000 fcf4 	bl	8004f3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004554:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <prvAddNewTaskToReadyList+0xb8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	4a29      	ldr	r2, [pc, #164]	; (8004600 <prvAddNewTaskToReadyList+0xb8>)
 800455c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800455e:	4b29      	ldr	r3, [pc, #164]	; (8004604 <prvAddNewTaskToReadyList+0xbc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004566:	4a27      	ldr	r2, [pc, #156]	; (8004604 <prvAddNewTaskToReadyList+0xbc>)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800456c:	4b24      	ldr	r3, [pc, #144]	; (8004600 <prvAddNewTaskToReadyList+0xb8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d110      	bne.n	8004596 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004574:	f000 facc 	bl	8004b10 <prvInitialiseTaskLists>
 8004578:	e00d      	b.n	8004596 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <prvAddNewTaskToReadyList+0xc0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004582:	4b20      	ldr	r3, [pc, #128]	; (8004604 <prvAddNewTaskToReadyList+0xbc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	429a      	cmp	r2, r3
 800458e:	d802      	bhi.n	8004596 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004590:	4a1c      	ldr	r2, [pc, #112]	; (8004604 <prvAddNewTaskToReadyList+0xbc>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004596:	4b1d      	ldr	r3, [pc, #116]	; (800460c <prvAddNewTaskToReadyList+0xc4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3301      	adds	r3, #1
 800459c:	4a1b      	ldr	r2, [pc, #108]	; (800460c <prvAddNewTaskToReadyList+0xc4>)
 800459e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	2201      	movs	r2, #1
 80045a6:	409a      	lsls	r2, r3
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <prvAddNewTaskToReadyList+0xc8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	4a18      	ldr	r2, [pc, #96]	; (8004610 <prvAddNewTaskToReadyList+0xc8>)
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <prvAddNewTaskToReadyList+0xcc>)
 80045c0:	441a      	add	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f7ff fdf8 	bl	80041be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045ce:	f000 fce5 	bl	8004f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <prvAddNewTaskToReadyList+0xc0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00e      	beq.n	80045f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <prvAddNewTaskToReadyList+0xbc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d207      	bcs.n	80045f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <prvAddNewTaskToReadyList+0xd0>)
 80045ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	2000058c 	.word	0x2000058c
 8004604:	2000048c 	.word	0x2000048c
 8004608:	20000598 	.word	0x20000598
 800460c:	200005a8 	.word	0x200005a8
 8004610:	20000594 	.word	0x20000594
 8004614:	20000490 	.word	0x20000490
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d017      	beq.n	800465e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <vTaskDelay+0x60>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <vTaskDelay+0x30>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	60bb      	str	r3, [r7, #8]
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800464c:	f000 f884 	bl	8004758 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004650:	2100      	movs	r1, #0
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fb1e 	bl	8004c94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004658:	f000 f88c 	bl	8004774 <xTaskResumeAll>
 800465c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <vTaskDelay+0x64>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	200005b4 	.word	0x200005b4
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004692:	463a      	mov	r2, r7
 8004694:	1d39      	adds	r1, r7, #4
 8004696:	f107 0308 	add.w	r3, r7, #8
 800469a:	4618      	mov	r0, r3
 800469c:	f7fc f852 	bl	8000744 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	9202      	str	r2, [sp, #8]
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	460a      	mov	r2, r1
 80046b2:	4921      	ldr	r1, [pc, #132]	; (8004738 <vTaskStartScheduler+0xb4>)
 80046b4:	4821      	ldr	r0, [pc, #132]	; (800473c <vTaskStartScheduler+0xb8>)
 80046b6:	f7ff fe06 	bl	80042c6 <xTaskCreateStatic>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4a20      	ldr	r2, [pc, #128]	; (8004740 <vTaskStartScheduler+0xbc>)
 80046be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046c0:	4b1f      	ldr	r3, [pc, #124]	; (8004740 <vTaskStartScheduler+0xbc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046c8:	2301      	movs	r3, #1
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e001      	b.n	80046d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d11b      	bne.n	8004710 <vTaskStartScheduler+0x8c>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	613b      	str	r3, [r7, #16]
}
 80046ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046ec:	4b15      	ldr	r3, [pc, #84]	; (8004744 <vTaskStartScheduler+0xc0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	334c      	adds	r3, #76	; 0x4c
 80046f2:	4a15      	ldr	r2, [pc, #84]	; (8004748 <vTaskStartScheduler+0xc4>)
 80046f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <vTaskStartScheduler+0xc8>)
 80046f8:	f04f 32ff 	mov.w	r2, #4294967295
 80046fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <vTaskStartScheduler+0xcc>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004704:	4b13      	ldr	r3, [pc, #76]	; (8004754 <vTaskStartScheduler+0xd0>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800470a:	f000 fba5 	bl	8004e58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800470e:	e00e      	b.n	800472e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d10a      	bne.n	800472e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	60fb      	str	r3, [r7, #12]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <vTaskStartScheduler+0xa8>
}
 800472e:	bf00      	nop
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	080056c8 	.word	0x080056c8
 800473c:	08004ae1 	.word	0x08004ae1
 8004740:	200005b0 	.word	0x200005b0
 8004744:	2000048c 	.word	0x2000048c
 8004748:	20000084 	.word	0x20000084
 800474c:	200005ac 	.word	0x200005ac
 8004750:	20000598 	.word	0x20000598
 8004754:	20000590 	.word	0x20000590

08004758 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <vTaskSuspendAll+0x18>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	4a03      	ldr	r2, [pc, #12]	; (8004770 <vTaskSuspendAll+0x18>)
 8004764:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004766:	bf00      	nop
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	200005b4 	.word	0x200005b4

08004774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004782:	4b41      	ldr	r3, [pc, #260]	; (8004888 <xTaskResumeAll+0x114>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	603b      	str	r3, [r7, #0]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047a0:	f000 fbcc 	bl	8004f3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047a4:	4b38      	ldr	r3, [pc, #224]	; (8004888 <xTaskResumeAll+0x114>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	4a37      	ldr	r2, [pc, #220]	; (8004888 <xTaskResumeAll+0x114>)
 80047ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ae:	4b36      	ldr	r3, [pc, #216]	; (8004888 <xTaskResumeAll+0x114>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d161      	bne.n	800487a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047b6:	4b35      	ldr	r3, [pc, #212]	; (800488c <xTaskResumeAll+0x118>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d05d      	beq.n	800487a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047be:	e02e      	b.n	800481e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c0:	4b33      	ldr	r3, [pc, #204]	; (8004890 <xTaskResumeAll+0x11c>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3318      	adds	r3, #24
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fd51 	bl	8004274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fd4c 	bl	8004274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	2201      	movs	r2, #1
 80047e2:	409a      	lsls	r2, r3
 80047e4:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <xTaskResumeAll+0x120>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	4a2a      	ldr	r2, [pc, #168]	; (8004894 <xTaskResumeAll+0x120>)
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4a27      	ldr	r2, [pc, #156]	; (8004898 <xTaskResumeAll+0x124>)
 80047fc:	441a      	add	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7ff fcda 	bl	80041be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480e:	4b23      	ldr	r3, [pc, #140]	; (800489c <xTaskResumeAll+0x128>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	429a      	cmp	r2, r3
 8004816:	d302      	bcc.n	800481e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004818:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <xTaskResumeAll+0x12c>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800481e:	4b1c      	ldr	r3, [pc, #112]	; (8004890 <xTaskResumeAll+0x11c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1cc      	bne.n	80047c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800482c:	f000 fa12 	bl	8004c54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004830:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <xTaskResumeAll+0x130>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d010      	beq.n	800485e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800483c:	f000 f836 	bl	80048ac <xTaskIncrementTick>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <xTaskResumeAll+0x12c>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3b01      	subs	r3, #1
 8004850:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f1      	bne.n	800483c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004858:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <xTaskResumeAll+0x130>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800485e:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <xTaskResumeAll+0x12c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004866:	2301      	movs	r3, #1
 8004868:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800486a:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <xTaskResumeAll+0x134>)
 800486c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800487a:	f000 fb8f 	bl	8004f9c <vPortExitCritical>

	return xAlreadyYielded;
 800487e:	68bb      	ldr	r3, [r7, #8]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	200005b4 	.word	0x200005b4
 800488c:	2000058c 	.word	0x2000058c
 8004890:	2000054c 	.word	0x2000054c
 8004894:	20000594 	.word	0x20000594
 8004898:	20000490 	.word	0x20000490
 800489c:	2000048c 	.word	0x2000048c
 80048a0:	200005a0 	.word	0x200005a0
 80048a4:	2000059c 	.word	0x2000059c
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048b6:	4b4e      	ldr	r3, [pc, #312]	; (80049f0 <xTaskIncrementTick+0x144>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 808e 	bne.w	80049dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048c0:	4b4c      	ldr	r3, [pc, #304]	; (80049f4 <xTaskIncrementTick+0x148>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048c8:	4a4a      	ldr	r2, [pc, #296]	; (80049f4 <xTaskIncrementTick+0x148>)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d120      	bne.n	8004916 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048d4:	4b48      	ldr	r3, [pc, #288]	; (80049f8 <xTaskIncrementTick+0x14c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	603b      	str	r3, [r7, #0]
}
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <xTaskIncrementTick+0x46>
 80048f4:	4b40      	ldr	r3, [pc, #256]	; (80049f8 <xTaskIncrementTick+0x14c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	4b40      	ldr	r3, [pc, #256]	; (80049fc <xTaskIncrementTick+0x150>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a3e      	ldr	r2, [pc, #248]	; (80049f8 <xTaskIncrementTick+0x14c>)
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	4a3e      	ldr	r2, [pc, #248]	; (80049fc <xTaskIncrementTick+0x150>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <xTaskIncrementTick+0x154>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	4a3c      	ldr	r2, [pc, #240]	; (8004a00 <xTaskIncrementTick+0x154>)
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	f000 f99f 	bl	8004c54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004916:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <xTaskIncrementTick+0x158>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	429a      	cmp	r2, r3
 800491e:	d348      	bcc.n	80049b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004920:	4b35      	ldr	r3, [pc, #212]	; (80049f8 <xTaskIncrementTick+0x14c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492a:	4b36      	ldr	r3, [pc, #216]	; (8004a04 <xTaskIncrementTick+0x158>)
 800492c:	f04f 32ff 	mov.w	r2, #4294967295
 8004930:	601a      	str	r2, [r3, #0]
					break;
 8004932:	e03e      	b.n	80049b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004934:	4b30      	ldr	r3, [pc, #192]	; (80049f8 <xTaskIncrementTick+0x14c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d203      	bcs.n	8004954 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800494c:	4a2d      	ldr	r2, [pc, #180]	; (8004a04 <xTaskIncrementTick+0x158>)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004952:	e02e      	b.n	80049b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	3304      	adds	r3, #4
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fc8b 	bl	8004274 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	3318      	adds	r3, #24
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fc82 	bl	8004274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	2201      	movs	r2, #1
 8004976:	409a      	lsls	r2, r3
 8004978:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <xTaskIncrementTick+0x15c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4313      	orrs	r3, r2
 800497e:	4a22      	ldr	r2, [pc, #136]	; (8004a08 <xTaskIncrementTick+0x15c>)
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <xTaskIncrementTick+0x160>)
 8004990:	441a      	add	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	3304      	adds	r3, #4
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f7ff fc10 	bl	80041be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a2:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <xTaskIncrementTick+0x164>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d3b9      	bcc.n	8004920 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049b0:	e7b6      	b.n	8004920 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049b2:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <xTaskIncrementTick+0x164>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b8:	4914      	ldr	r1, [pc, #80]	; (8004a0c <xTaskIncrementTick+0x160>)
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d901      	bls.n	80049ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80049ca:	2301      	movs	r3, #1
 80049cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <xTaskIncrementTick+0x168>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80049d6:	2301      	movs	r3, #1
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	e004      	b.n	80049e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049dc:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <xTaskIncrementTick+0x16c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	4a0d      	ldr	r2, [pc, #52]	; (8004a18 <xTaskIncrementTick+0x16c>)
 80049e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049e6:	697b      	ldr	r3, [r7, #20]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	200005b4 	.word	0x200005b4
 80049f4:	20000590 	.word	0x20000590
 80049f8:	20000544 	.word	0x20000544
 80049fc:	20000548 	.word	0x20000548
 8004a00:	200005a4 	.word	0x200005a4
 8004a04:	200005ac 	.word	0x200005ac
 8004a08:	20000594 	.word	0x20000594
 8004a0c:	20000490 	.word	0x20000490
 8004a10:	2000048c 	.word	0x2000048c
 8004a14:	200005a0 	.word	0x200005a0
 8004a18:	2000059c 	.word	0x2000059c

08004a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a22:	4b29      	ldr	r3, [pc, #164]	; (8004ac8 <vTaskSwitchContext+0xac>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a2a:	4b28      	ldr	r3, [pc, #160]	; (8004acc <vTaskSwitchContext+0xb0>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a30:	e044      	b.n	8004abc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004a32:	4b26      	ldr	r3, [pc, #152]	; (8004acc <vTaskSwitchContext+0xb0>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a38:	4b25      	ldr	r3, [pc, #148]	; (8004ad0 <vTaskSwitchContext+0xb4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	fab3 f383 	clz	r3, r3
 8004a44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a46:	7afb      	ldrb	r3, [r7, #11]
 8004a48:	f1c3 031f 	rsb	r3, r3, #31
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	4921      	ldr	r1, [pc, #132]	; (8004ad4 <vTaskSwitchContext+0xb8>)
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	607b      	str	r3, [r7, #4]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <vTaskSwitchContext+0x5a>
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4a14      	ldr	r2, [pc, #80]	; (8004ad4 <vTaskSwitchContext+0xb8>)
 8004a84:	4413      	add	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d104      	bne.n	8004aa8 <vTaskSwitchContext+0x8c>
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	605a      	str	r2, [r3, #4]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <vTaskSwitchContext+0xbc>)
 8004ab0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ab2:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <vTaskSwitchContext+0xbc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	334c      	adds	r3, #76	; 0x4c
 8004ab8:	4a08      	ldr	r2, [pc, #32]	; (8004adc <vTaskSwitchContext+0xc0>)
 8004aba:	6013      	str	r3, [r2, #0]
}
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	200005b4 	.word	0x200005b4
 8004acc:	200005a0 	.word	0x200005a0
 8004ad0:	20000594 	.word	0x20000594
 8004ad4:	20000490 	.word	0x20000490
 8004ad8:	2000048c 	.word	0x2000048c
 8004adc:	20000084 	.word	0x20000084

08004ae0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ae8:	f000 f852 	bl	8004b90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <prvIdleTask+0x28>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d9f9      	bls.n	8004ae8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <prvIdleTask+0x2c>)
 8004af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b04:	e7f0      	b.n	8004ae8 <prvIdleTask+0x8>
 8004b06:	bf00      	nop
 8004b08:	20000490 	.word	0x20000490
 8004b0c:	e000ed04 	.word	0xe000ed04

08004b10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b16:	2300      	movs	r3, #0
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	e00c      	b.n	8004b36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4a12      	ldr	r2, [pc, #72]	; (8004b70 <prvInitialiseTaskLists+0x60>)
 8004b28:	4413      	add	r3, r2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fb1c 	bl	8004168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3301      	adds	r3, #1
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b06      	cmp	r3, #6
 8004b3a:	d9ef      	bls.n	8004b1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b3c:	480d      	ldr	r0, [pc, #52]	; (8004b74 <prvInitialiseTaskLists+0x64>)
 8004b3e:	f7ff fb13 	bl	8004168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b42:	480d      	ldr	r0, [pc, #52]	; (8004b78 <prvInitialiseTaskLists+0x68>)
 8004b44:	f7ff fb10 	bl	8004168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b48:	480c      	ldr	r0, [pc, #48]	; (8004b7c <prvInitialiseTaskLists+0x6c>)
 8004b4a:	f7ff fb0d 	bl	8004168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b4e:	480c      	ldr	r0, [pc, #48]	; (8004b80 <prvInitialiseTaskLists+0x70>)
 8004b50:	f7ff fb0a 	bl	8004168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b54:	480b      	ldr	r0, [pc, #44]	; (8004b84 <prvInitialiseTaskLists+0x74>)
 8004b56:	f7ff fb07 	bl	8004168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <prvInitialiseTaskLists+0x78>)
 8004b5c:	4a05      	ldr	r2, [pc, #20]	; (8004b74 <prvInitialiseTaskLists+0x64>)
 8004b5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <prvInitialiseTaskLists+0x7c>)
 8004b62:	4a05      	ldr	r2, [pc, #20]	; (8004b78 <prvInitialiseTaskLists+0x68>)
 8004b64:	601a      	str	r2, [r3, #0]
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000490 	.word	0x20000490
 8004b74:	2000051c 	.word	0x2000051c
 8004b78:	20000530 	.word	0x20000530
 8004b7c:	2000054c 	.word	0x2000054c
 8004b80:	20000560 	.word	0x20000560
 8004b84:	20000578 	.word	0x20000578
 8004b88:	20000544 	.word	0x20000544
 8004b8c:	20000548 	.word	0x20000548

08004b90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b96:	e019      	b.n	8004bcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b98:	f000 f9d0 	bl	8004f3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <prvCheckTasksWaitingTermination+0x50>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fb63 	bl	8004274 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <prvCheckTasksWaitingTermination+0x54>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	4a0b      	ldr	r2, [pc, #44]	; (8004be4 <prvCheckTasksWaitingTermination+0x54>)
 8004bb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <prvCheckTasksWaitingTermination+0x58>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <prvCheckTasksWaitingTermination+0x58>)
 8004bc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bc2:	f000 f9eb 	bl	8004f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f810 	bl	8004bec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <prvCheckTasksWaitingTermination+0x58>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e1      	bne.n	8004b98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000560 	.word	0x20000560
 8004be4:	2000058c 	.word	0x2000058c
 8004be8:	20000574 	.word	0x20000574

08004bec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	334c      	adds	r3, #76	; 0x4c
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fc51 	bl	80054a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d108      	bne.n	8004c1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fb23 	bl	8005258 <vPortFree>
				vPortFree( pxTCB );
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fb20 	bl	8005258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c18:	e018      	b.n	8004c4c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d103      	bne.n	8004c2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fb17 	bl	8005258 <vPortFree>
	}
 8004c2a:	e00f      	b.n	8004c4c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d00a      	beq.n	8004c4c <prvDeleteTCB+0x60>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	60fb      	str	r3, [r7, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	e7fe      	b.n	8004c4a <prvDeleteTCB+0x5e>
	}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <prvResetNextTaskUnblockTime+0x38>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <prvResetNextTaskUnblockTime+0x3c>)
 8004c66:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c6c:	e008      	b.n	8004c80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c6e:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <prvResetNextTaskUnblockTime+0x38>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <prvResetNextTaskUnblockTime+0x3c>)
 8004c7e:	6013      	str	r3, [r2, #0]
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000544 	.word	0x20000544
 8004c90:	200005ac 	.word	0x200005ac

08004c94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c9e:	4b29      	ldr	r3, [pc, #164]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ca4:	4b28      	ldr	r3, [pc, #160]	; (8004d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fae2 	bl	8004274 <uxListRemove>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004cb6:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	4b21      	ldr	r3, [pc, #132]	; (8004d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ccc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d10a      	bne.n	8004cec <prvAddCurrentTaskToDelayedList+0x58>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cdc:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	481a      	ldr	r0, [pc, #104]	; (8004d50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ce6:	f7ff fa6a 	bl	80041be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cea:	e026      	b.n	8004d3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cf4:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d209      	bcs.n	8004d18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d04:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f7ff fa77 	bl	8004204 <vListInsert>
}
 8004d16:	e010      	b.n	8004d3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3304      	adds	r3, #4
 8004d22:	4619      	mov	r1, r3
 8004d24:	4610      	mov	r0, r2
 8004d26:	f7ff fa6d 	bl	8004204 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d202      	bcs.n	8004d3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d34:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6013      	str	r3, [r2, #0]
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000590 	.word	0x20000590
 8004d48:	2000048c 	.word	0x2000048c
 8004d4c:	20000594 	.word	0x20000594
 8004d50:	20000578 	.word	0x20000578
 8004d54:	20000548 	.word	0x20000548
 8004d58:	20000544 	.word	0x20000544
 8004d5c:	200005ac 	.word	0x200005ac

08004d60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3b04      	subs	r3, #4
 8004d70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3b04      	subs	r3, #4
 8004d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f023 0201 	bic.w	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3b04      	subs	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d90:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <pxPortInitialiseStack+0x54>)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3b14      	subs	r3, #20
 8004d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3b20      	subs	r3, #32
 8004da6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004da8:	68fb      	ldr	r3, [r7, #12]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	08004db9 	.word	0x08004db9

08004db8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <prvTaskExitError+0x54>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d00a      	beq.n	8004de2 <prvTaskExitError+0x2a>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	60fb      	str	r3, [r7, #12]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <prvTaskExitError+0x28>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	60bb      	str	r3, [r7, #8]
}
 8004df4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004df6:	bf00      	nop
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0fc      	beq.n	8004df8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dfe:	bf00      	nop
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000034 	.word	0x20000034

08004e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <pxCurrentTCBConst2>)
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	6808      	ldr	r0, [r1, #0]
 8004e16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e1a:	f380 8809 	msr	PSP, r0
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8811 	msr	BASEPRI, r0
 8004e2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004e2e:	4770      	bx	lr

08004e30 <pxCurrentTCBConst2>:
 8004e30:	2000048c 	.word	0x2000048c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004e38:	4806      	ldr	r0, [pc, #24]	; (8004e54 <prvPortStartFirstTask+0x1c>)
 8004e3a:	6800      	ldr	r0, [r0, #0]
 8004e3c:	6800      	ldr	r0, [r0, #0]
 8004e3e:	f380 8808 	msr	MSP, r0
 8004e42:	b662      	cpsie	i
 8004e44:	b661      	cpsie	f
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	df00      	svc	0
 8004e50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e52:	bf00      	nop
 8004e54:	e000ed08 	.word	0xe000ed08

08004e58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e5e:	4b32      	ldr	r3, [pc, #200]	; (8004f28 <xPortStartScheduler+0xd0>)
 8004e60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	22ff      	movs	r2, #255	; 0xff
 8004e6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <xPortStartScheduler+0xd4>)
 8004e84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e86:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004e88:	2207      	movs	r2, #7
 8004e8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e8c:	e009      	b.n	8004ea2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004e8e:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4a26      	ldr	r2, [pc, #152]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004e96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eaa:	2b80      	cmp	r3, #128	; 0x80
 8004eac:	d0ef      	beq.n	8004e8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f1c3 0307 	rsb	r3, r3, #7
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d00a      	beq.n	8004ed0 <xPortStartScheduler+0x78>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	60bb      	str	r3, [r7, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ed0:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	4a16      	ldr	r2, [pc, #88]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004ed8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004eda:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ee2:	4a13      	ldr	r2, [pc, #76]	; (8004f30 <xPortStartScheduler+0xd8>)
 8004ee4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004eee:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <xPortStartScheduler+0xdc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a10      	ldr	r2, [pc, #64]	; (8004f34 <xPortStartScheduler+0xdc>)
 8004ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ef8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004efa:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <xPortStartScheduler+0xdc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <xPortStartScheduler+0xdc>)
 8004f00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f06:	f000 f8b9 	bl	800507c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <xPortStartScheduler+0xe0>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f10:	f7ff ff92 	bl	8004e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f14:	f7ff fd82 	bl	8004a1c <vTaskSwitchContext>
	prvTaskExitError();
 8004f18:	f7ff ff4e 	bl	8004db8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	e000e400 	.word	0xe000e400
 8004f2c:	200005b8 	.word	0x200005b8
 8004f30:	200005bc 	.word	0x200005bc
 8004f34:	e000ed20 	.word	0xe000ed20
 8004f38:	20000034 	.word	0x20000034

08004f3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	607b      	str	r3, [r7, #4]
}
 8004f54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f56:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <vPortEnterCritical+0x58>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	4a0d      	ldr	r2, [pc, #52]	; (8004f94 <vPortEnterCritical+0x58>)
 8004f5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <vPortEnterCritical+0x58>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d10f      	bne.n	8004f88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <vPortEnterCritical+0x5c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	603b      	str	r3, [r7, #0]
}
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <vPortEnterCritical+0x4a>
	}
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000034 	.word	0x20000034
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <vPortExitCritical+0x4c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <vPortExitCritical+0x24>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	607b      	str	r3, [r7, #4]
}
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <vPortExitCritical+0x4c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <vPortExitCritical+0x4c>)
 8004fc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fca:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <vPortExitCritical+0x4c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d105      	bne.n	8004fde <vPortExitCritical+0x42>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr
 8004fe8:	20000034 	.word	0x20000034
 8004fec:	00000000 	.word	0x00000000

08004ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ff0:	f3ef 8009 	mrs	r0, PSP
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <pxCurrentTCBConst>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005000:	6010      	str	r0, [r2, #0]
 8005002:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005006:	f04f 0050 	mov.w	r0, #80	; 0x50
 800500a:	f380 8811 	msr	BASEPRI, r0
 800500e:	f7ff fd05 	bl	8004a1c <vTaskSwitchContext>
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f380 8811 	msr	BASEPRI, r0
 800501a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	6808      	ldr	r0, [r1, #0]
 8005022:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005026:	f380 8809 	msr	PSP, r0
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	4770      	bx	lr

08005030 <pxCurrentTCBConst>:
 8005030:	2000048c 	.word	0x2000048c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop

08005038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
}
 8005050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005052:	f7ff fc2b 	bl	80048ac <xTaskIncrementTick>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <SysTick_Handler+0x40>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	2300      	movs	r3, #0
 8005066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f383 8811 	msr	BASEPRI, r3
}
 800506e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <vPortSetupTimerInterrupt+0x30>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005086:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <vPortSetupTimerInterrupt+0x34>)
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800508c:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <vPortSetupTimerInterrupt+0x38>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a09      	ldr	r2, [pc, #36]	; (80050b8 <vPortSetupTimerInterrupt+0x3c>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	099b      	lsrs	r3, r3, #6
 8005098:	4a08      	ldr	r2, [pc, #32]	; (80050bc <vPortSetupTimerInterrupt+0x40>)
 800509a:	3b01      	subs	r3, #1
 800509c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800509e:	4b03      	ldr	r3, [pc, #12]	; (80050ac <vPortSetupTimerInterrupt+0x30>)
 80050a0:	2207      	movs	r2, #7
 80050a2:	601a      	str	r2, [r3, #0]
}
 80050a4:	bf00      	nop
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	e000e010 	.word	0xe000e010
 80050b0:	e000e018 	.word	0xe000e018
 80050b4:	20000028 	.word	0x20000028
 80050b8:	10624dd3 	.word	0x10624dd3
 80050bc:	e000e014 	.word	0xe000e014

080050c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050cc:	f7ff fb44 	bl	8004758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050d0:	4b5b      	ldr	r3, [pc, #364]	; (8005240 <pvPortMalloc+0x180>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050d8:	f000 f920 	bl	800531c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050dc:	4b59      	ldr	r3, [pc, #356]	; (8005244 <pvPortMalloc+0x184>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f040 8093 	bne.w	8005210 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01d      	beq.n	800512c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80050f0:	2208      	movs	r2, #8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d014      	beq.n	800512c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f023 0307 	bic.w	r3, r3, #7
 8005108:	3308      	adds	r3, #8
 800510a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <pvPortMalloc+0x6c>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	617b      	str	r3, [r7, #20]
}
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d06e      	beq.n	8005210 <pvPortMalloc+0x150>
 8005132:	4b45      	ldr	r3, [pc, #276]	; (8005248 <pvPortMalloc+0x188>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	429a      	cmp	r2, r3
 800513a:	d869      	bhi.n	8005210 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800513c:	4b43      	ldr	r3, [pc, #268]	; (800524c <pvPortMalloc+0x18c>)
 800513e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005140:	4b42      	ldr	r3, [pc, #264]	; (800524c <pvPortMalloc+0x18c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005146:	e004      	b.n	8005152 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d903      	bls.n	8005164 <pvPortMalloc+0xa4>
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f1      	bne.n	8005148 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005164:	4b36      	ldr	r3, [pc, #216]	; (8005240 <pvPortMalloc+0x180>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516a:	429a      	cmp	r2, r3
 800516c:	d050      	beq.n	8005210 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2208      	movs	r2, #8
 8005174:	4413      	add	r3, r2
 8005176:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	1ad2      	subs	r2, r2, r3
 8005188:	2308      	movs	r3, #8
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	429a      	cmp	r2, r3
 800518e:	d91f      	bls.n	80051d0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4413      	add	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <pvPortMalloc+0xf8>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	613b      	str	r3, [r7, #16]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051ca:	69b8      	ldr	r0, [r7, #24]
 80051cc:	f000 f908 	bl	80053e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051d0:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <pvPortMalloc+0x188>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	4a1b      	ldr	r2, [pc, #108]	; (8005248 <pvPortMalloc+0x188>)
 80051dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051de:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <pvPortMalloc+0x188>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <pvPortMalloc+0x190>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d203      	bcs.n	80051f2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051ea:	4b17      	ldr	r3, [pc, #92]	; (8005248 <pvPortMalloc+0x188>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a18      	ldr	r2, [pc, #96]	; (8005250 <pvPortMalloc+0x190>)
 80051f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4b13      	ldr	r3, [pc, #76]	; (8005244 <pvPortMalloc+0x184>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005206:	4b13      	ldr	r3, [pc, #76]	; (8005254 <pvPortMalloc+0x194>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3301      	adds	r3, #1
 800520c:	4a11      	ldr	r2, [pc, #68]	; (8005254 <pvPortMalloc+0x194>)
 800520e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005210:	f7ff fab0 	bl	8004774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <pvPortMalloc+0x174>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60fb      	str	r3, [r7, #12]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <pvPortMalloc+0x172>
	return pvReturn;
 8005234:	69fb      	ldr	r3, [r7, #28]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3728      	adds	r7, #40	; 0x28
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	200011c8 	.word	0x200011c8
 8005244:	200011dc 	.word	0x200011dc
 8005248:	200011cc 	.word	0x200011cc
 800524c:	200011c0 	.word	0x200011c0
 8005250:	200011d0 	.word	0x200011d0
 8005254:	200011d4 	.word	0x200011d4

08005258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d04d      	beq.n	8005306 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800526a:	2308      	movs	r3, #8
 800526c:	425b      	negs	r3, r3
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4413      	add	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	4b24      	ldr	r3, [pc, #144]	; (8005310 <vPortFree+0xb8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4013      	ands	r3, r2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <vPortFree+0x44>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	60fb      	str	r3, [r7, #12]
}
 8005298:	bf00      	nop
 800529a:	e7fe      	b.n	800529a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <vPortFree+0x62>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	60bb      	str	r3, [r7, #8]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4b14      	ldr	r3, [pc, #80]	; (8005310 <vPortFree+0xb8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01e      	beq.n	8005306 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d11a      	bne.n	8005306 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <vPortFree+0xb8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	43db      	mvns	r3, r3
 80052da:	401a      	ands	r2, r3
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052e0:	f7ff fa3a 	bl	8004758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <vPortFree+0xbc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4413      	add	r3, r2
 80052ee:	4a09      	ldr	r2, [pc, #36]	; (8005314 <vPortFree+0xbc>)
 80052f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052f2:	6938      	ldr	r0, [r7, #16]
 80052f4:	f000 f874 	bl	80053e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052f8:	4b07      	ldr	r3, [pc, #28]	; (8005318 <vPortFree+0xc0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3301      	adds	r3, #1
 80052fe:	4a06      	ldr	r2, [pc, #24]	; (8005318 <vPortFree+0xc0>)
 8005300:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005302:	f7ff fa37 	bl	8004774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005306:	bf00      	nop
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200011dc 	.word	0x200011dc
 8005314:	200011cc 	.word	0x200011cc
 8005318:	200011d8 	.word	0x200011d8

0800531c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005322:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005326:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005328:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <prvHeapInit+0xac>)
 800532a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00c      	beq.n	8005350 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3307      	adds	r3, #7
 800533a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0307 	bic.w	r3, r3, #7
 8005342:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <prvHeapInit+0xac>)
 800534c:	4413      	add	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005354:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <prvHeapInit+0xb0>)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800535a:	4b1c      	ldr	r3, [pc, #112]	; (80053cc <prvHeapInit+0xb0>)
 800535c:	2200      	movs	r2, #0
 800535e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	4413      	add	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005368:	2208      	movs	r2, #8
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0307 	bic.w	r3, r3, #7
 8005376:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <prvHeapInit+0xb4>)
 800537c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <prvHeapInit+0xb4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005386:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <prvHeapInit+0xb4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800539c:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <prvHeapInit+0xb4>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4a0a      	ldr	r2, [pc, #40]	; (80053d4 <prvHeapInit+0xb8>)
 80053aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <prvHeapInit+0xbc>)
 80053b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053b4:	4b09      	ldr	r3, [pc, #36]	; (80053dc <prvHeapInit+0xc0>)
 80053b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053ba:	601a      	str	r2, [r3, #0]
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	200005c0 	.word	0x200005c0
 80053cc:	200011c0 	.word	0x200011c0
 80053d0:	200011c8 	.word	0x200011c8
 80053d4:	200011d0 	.word	0x200011d0
 80053d8:	200011cc 	.word	0x200011cc
 80053dc:	200011dc 	.word	0x200011dc

080053e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053e8:	4b27      	ldr	r3, [pc, #156]	; (8005488 <prvInsertBlockIntoFreeList+0xa8>)
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e002      	b.n	80053f4 <prvInsertBlockIntoFreeList+0x14>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d8f7      	bhi.n	80053ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4413      	add	r3, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	d108      	bne.n	8005422 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	441a      	add	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	441a      	add	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d118      	bne.n	8005468 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b14      	ldr	r3, [pc, #80]	; (800548c <prvInsertBlockIntoFreeList+0xac>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d00d      	beq.n	800545e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	441a      	add	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	e008      	b.n	8005470 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <prvInsertBlockIntoFreeList+0xac>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e003      	b.n	8005470 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	429a      	cmp	r2, r3
 8005476:	d002      	beq.n	800547e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr
 8005488:	200011c0 	.word	0x200011c0
 800548c:	200011c8 	.word	0x200011c8

08005490 <memset>:
 8005490:	4603      	mov	r3, r0
 8005492:	4402      	add	r2, r0
 8005494:	4293      	cmp	r3, r2
 8005496:	d100      	bne.n	800549a <memset+0xa>
 8005498:	4770      	bx	lr
 800549a:	f803 1b01 	strb.w	r1, [r3], #1
 800549e:	e7f9      	b.n	8005494 <memset+0x4>

080054a0 <_reclaim_reent>:
 80054a0:	4b29      	ldr	r3, [pc, #164]	; (8005548 <_reclaim_reent+0xa8>)
 80054a2:	b570      	push	{r4, r5, r6, lr}
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4604      	mov	r4, r0
 80054a8:	4283      	cmp	r3, r0
 80054aa:	d04b      	beq.n	8005544 <_reclaim_reent+0xa4>
 80054ac:	69c3      	ldr	r3, [r0, #28]
 80054ae:	b143      	cbz	r3, 80054c2 <_reclaim_reent+0x22>
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d144      	bne.n	8005540 <_reclaim_reent+0xa0>
 80054b6:	69e3      	ldr	r3, [r4, #28]
 80054b8:	6819      	ldr	r1, [r3, #0]
 80054ba:	b111      	cbz	r1, 80054c2 <_reclaim_reent+0x22>
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 f86b 	bl	8005598 <_free_r>
 80054c2:	6961      	ldr	r1, [r4, #20]
 80054c4:	b111      	cbz	r1, 80054cc <_reclaim_reent+0x2c>
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 f866 	bl	8005598 <_free_r>
 80054cc:	69e1      	ldr	r1, [r4, #28]
 80054ce:	b111      	cbz	r1, 80054d6 <_reclaim_reent+0x36>
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 f861 	bl	8005598 <_free_r>
 80054d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80054d8:	b111      	cbz	r1, 80054e0 <_reclaim_reent+0x40>
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 f85c 	bl	8005598 <_free_r>
 80054e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054e2:	b111      	cbz	r1, 80054ea <_reclaim_reent+0x4a>
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 f857 	bl	8005598 <_free_r>
 80054ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054ec:	b111      	cbz	r1, 80054f4 <_reclaim_reent+0x54>
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 f852 	bl	8005598 <_free_r>
 80054f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80054f6:	b111      	cbz	r1, 80054fe <_reclaim_reent+0x5e>
 80054f8:	4620      	mov	r0, r4
 80054fa:	f000 f84d 	bl	8005598 <_free_r>
 80054fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005500:	b111      	cbz	r1, 8005508 <_reclaim_reent+0x68>
 8005502:	4620      	mov	r0, r4
 8005504:	f000 f848 	bl	8005598 <_free_r>
 8005508:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800550a:	b111      	cbz	r1, 8005512 <_reclaim_reent+0x72>
 800550c:	4620      	mov	r0, r4
 800550e:	f000 f843 	bl	8005598 <_free_r>
 8005512:	6a23      	ldr	r3, [r4, #32]
 8005514:	b1b3      	cbz	r3, 8005544 <_reclaim_reent+0xa4>
 8005516:	4620      	mov	r0, r4
 8005518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800551c:	4718      	bx	r3
 800551e:	5949      	ldr	r1, [r1, r5]
 8005520:	b941      	cbnz	r1, 8005534 <_reclaim_reent+0x94>
 8005522:	3504      	adds	r5, #4
 8005524:	69e3      	ldr	r3, [r4, #28]
 8005526:	2d80      	cmp	r5, #128	; 0x80
 8005528:	68d9      	ldr	r1, [r3, #12]
 800552a:	d1f8      	bne.n	800551e <_reclaim_reent+0x7e>
 800552c:	4620      	mov	r0, r4
 800552e:	f000 f833 	bl	8005598 <_free_r>
 8005532:	e7c0      	b.n	80054b6 <_reclaim_reent+0x16>
 8005534:	680e      	ldr	r6, [r1, #0]
 8005536:	4620      	mov	r0, r4
 8005538:	f000 f82e 	bl	8005598 <_free_r>
 800553c:	4631      	mov	r1, r6
 800553e:	e7ef      	b.n	8005520 <_reclaim_reent+0x80>
 8005540:	2500      	movs	r5, #0
 8005542:	e7ef      	b.n	8005524 <_reclaim_reent+0x84>
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	bf00      	nop
 8005548:	20000084 	.word	0x20000084

0800554c <__libc_init_array>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	2600      	movs	r6, #0
 8005550:	4d0c      	ldr	r5, [pc, #48]	; (8005584 <__libc_init_array+0x38>)
 8005552:	4c0d      	ldr	r4, [pc, #52]	; (8005588 <__libc_init_array+0x3c>)
 8005554:	1b64      	subs	r4, r4, r5
 8005556:	10a4      	asrs	r4, r4, #2
 8005558:	42a6      	cmp	r6, r4
 800555a:	d109      	bne.n	8005570 <__libc_init_array+0x24>
 800555c:	f000 f870 	bl	8005640 <_init>
 8005560:	2600      	movs	r6, #0
 8005562:	4d0a      	ldr	r5, [pc, #40]	; (800558c <__libc_init_array+0x40>)
 8005564:	4c0a      	ldr	r4, [pc, #40]	; (8005590 <__libc_init_array+0x44>)
 8005566:	1b64      	subs	r4, r4, r5
 8005568:	10a4      	asrs	r4, r4, #2
 800556a:	42a6      	cmp	r6, r4
 800556c:	d105      	bne.n	800557a <__libc_init_array+0x2e>
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	f855 3b04 	ldr.w	r3, [r5], #4
 8005574:	4798      	blx	r3
 8005576:	3601      	adds	r6, #1
 8005578:	e7ee      	b.n	8005558 <__libc_init_array+0xc>
 800557a:	f855 3b04 	ldr.w	r3, [r5], #4
 800557e:	4798      	blx	r3
 8005580:	3601      	adds	r6, #1
 8005582:	e7f2      	b.n	800556a <__libc_init_array+0x1e>
 8005584:	080056fc 	.word	0x080056fc
 8005588:	080056fc 	.word	0x080056fc
 800558c:	080056fc 	.word	0x080056fc
 8005590:	08005700 	.word	0x08005700

08005594 <__retarget_lock_acquire_recursive>:
 8005594:	4770      	bx	lr

08005596 <__retarget_lock_release_recursive>:
 8005596:	4770      	bx	lr

08005598 <_free_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4605      	mov	r5, r0
 800559c:	2900      	cmp	r1, #0
 800559e:	d040      	beq.n	8005622 <_free_r+0x8a>
 80055a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055a4:	1f0c      	subs	r4, r1, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bfb8      	it	lt
 80055aa:	18e4      	addlt	r4, r4, r3
 80055ac:	f000 f83c 	bl	8005628 <__malloc_lock>
 80055b0:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <_free_r+0x8c>)
 80055b2:	6813      	ldr	r3, [r2, #0]
 80055b4:	b933      	cbnz	r3, 80055c4 <_free_r+0x2c>
 80055b6:	6063      	str	r3, [r4, #4]
 80055b8:	6014      	str	r4, [r2, #0]
 80055ba:	4628      	mov	r0, r5
 80055bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055c0:	f000 b838 	b.w	8005634 <__malloc_unlock>
 80055c4:	42a3      	cmp	r3, r4
 80055c6:	d908      	bls.n	80055da <_free_r+0x42>
 80055c8:	6820      	ldr	r0, [r4, #0]
 80055ca:	1821      	adds	r1, r4, r0
 80055cc:	428b      	cmp	r3, r1
 80055ce:	bf01      	itttt	eq
 80055d0:	6819      	ldreq	r1, [r3, #0]
 80055d2:	685b      	ldreq	r3, [r3, #4]
 80055d4:	1809      	addeq	r1, r1, r0
 80055d6:	6021      	streq	r1, [r4, #0]
 80055d8:	e7ed      	b.n	80055b6 <_free_r+0x1e>
 80055da:	461a      	mov	r2, r3
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	b10b      	cbz	r3, 80055e4 <_free_r+0x4c>
 80055e0:	42a3      	cmp	r3, r4
 80055e2:	d9fa      	bls.n	80055da <_free_r+0x42>
 80055e4:	6811      	ldr	r1, [r2, #0]
 80055e6:	1850      	adds	r0, r2, r1
 80055e8:	42a0      	cmp	r0, r4
 80055ea:	d10b      	bne.n	8005604 <_free_r+0x6c>
 80055ec:	6820      	ldr	r0, [r4, #0]
 80055ee:	4401      	add	r1, r0
 80055f0:	1850      	adds	r0, r2, r1
 80055f2:	4283      	cmp	r3, r0
 80055f4:	6011      	str	r1, [r2, #0]
 80055f6:	d1e0      	bne.n	80055ba <_free_r+0x22>
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4408      	add	r0, r1
 80055fe:	6010      	str	r0, [r2, #0]
 8005600:	6053      	str	r3, [r2, #4]
 8005602:	e7da      	b.n	80055ba <_free_r+0x22>
 8005604:	d902      	bls.n	800560c <_free_r+0x74>
 8005606:	230c      	movs	r3, #12
 8005608:	602b      	str	r3, [r5, #0]
 800560a:	e7d6      	b.n	80055ba <_free_r+0x22>
 800560c:	6820      	ldr	r0, [r4, #0]
 800560e:	1821      	adds	r1, r4, r0
 8005610:	428b      	cmp	r3, r1
 8005612:	bf01      	itttt	eq
 8005614:	6819      	ldreq	r1, [r3, #0]
 8005616:	685b      	ldreq	r3, [r3, #4]
 8005618:	1809      	addeq	r1, r1, r0
 800561a:	6021      	streq	r1, [r4, #0]
 800561c:	6063      	str	r3, [r4, #4]
 800561e:	6054      	str	r4, [r2, #4]
 8005620:	e7cb      	b.n	80055ba <_free_r+0x22>
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	2000131c 	.word	0x2000131c

08005628 <__malloc_lock>:
 8005628:	4801      	ldr	r0, [pc, #4]	; (8005630 <__malloc_lock+0x8>)
 800562a:	f7ff bfb3 	b.w	8005594 <__retarget_lock_acquire_recursive>
 800562e:	bf00      	nop
 8005630:	20001318 	.word	0x20001318

08005634 <__malloc_unlock>:
 8005634:	4801      	ldr	r0, [pc, #4]	; (800563c <__malloc_unlock+0x8>)
 8005636:	f7ff bfae 	b.w	8005596 <__retarget_lock_release_recursive>
 800563a:	bf00      	nop
 800563c:	20001318 	.word	0x20001318

08005640 <_init>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr

0800564c <_fini>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr
