
Ver2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ec  080060ec  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  080060ec  080060ec  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060ec  080060ec  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080060f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000038  08006128  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08006128  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5b0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f5  00000000  00000000  0002f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00031d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bde  00000000  00000000  00032c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001866d  00000000  00000000  0003384e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119fa  00000000  00000000  0004bebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f7ec  00000000  00000000  0005d8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004054  00000000  00000000  000ed0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f10f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	080060a8 	.word	0x080060a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	080060a8 	.word	0x080060a8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <robot_setDirection>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void robot_setDirection(uint8_t Dir_L, uint8_t Dir_R, uint8_t Dir_PID)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	460b      	mov	r3, r1
 800074c:	71bb      	strb	r3, [r7, #6]
 800074e:	4613      	mov	r3, r2
 8000750:	717b      	strb	r3, [r7, #5]
	Dir_Left = Dir_L;
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <robot_setDirection+0x28>)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	7013      	strb	r3, [r2, #0]
	Dir_Right = Dir_R;
 8000758:	4a04      	ldr	r2, [pc, #16]	; (800076c <robot_setDirection+0x2c>)
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	7013      	strb	r3, [r2, #0]
	Dir_PID = Dir_PID;
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	2000009c 	.word	0x2000009c
 800076c:	2000009d 	.word	0x2000009d

08000770 <robot_setParam>:

void robot_setParam(uint16_t speed_input, float kP_input, float kD_input)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	81fb      	strh	r3, [r7, #14]
	targetSpeed = speed_input;
 800077e:	4a07      	ldr	r2, [pc, #28]	; (800079c <robot_setParam+0x2c>)
 8000780:	89fb      	ldrh	r3, [r7, #14]
 8000782:	8013      	strh	r3, [r2, #0]
	kP = kP_input;
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <robot_setParam+0x30>)
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	6013      	str	r3, [r2, #0]
	kD = kD_input;
 800078a:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <robot_setParam+0x34>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	2000005c 	.word	0x2000005c
 80007a0:	20000054 	.word	0x20000054
 80007a4:	20000058 	.word	0x20000058

080007a8 <robot_setSpeed>:

void robot_setSpeed(int16_t left_speed, int16_t right_speed)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	460a      	mov	r2, r1
 80007b2:	80fb      	strh	r3, [r7, #6]
 80007b4:	4613      	mov	r3, r2
 80007b6:	80bb      	strh	r3, [r7, #4]
	if(Dir_Left)
 80007b8:	4b51      	ldr	r3, [pc, #324]	; (8000900 <robot_setSpeed+0x158>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d025      	beq.n	800080c <robot_setSpeed+0x64>
	{
		// nếu tốc độ bên trái lớn hơn 0
			if(left_speed > 0)
 80007c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dd09      	ble.n	80007dc <robot_setSpeed+0x34>
			{
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80007c8:	4b4e      	ldr	r3, [pc, #312]	; (8000904 <robot_setSpeed+0x15c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2200      	movs	r2, #0
 80007ce:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, left_speed);
 80007d0:	4b4c      	ldr	r3, [pc, #304]	; (8000904 <robot_setSpeed+0x15c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007d8:	639a      	str	r2, [r3, #56]	; 0x38
 80007da:	e03c      	b.n	8000856 <robot_setSpeed+0xae>
			}

			// nếu tốc độ bên trái nh�? hơn 0 -> quay chi�?u ngược lại
			else if(left_speed < 0)
 80007dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	da0a      	bge.n	80007fa <robot_setSpeed+0x52>
			{
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (-1*left_speed));		// sử dụng
 80007e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e8:	425a      	negs	r2, r3
 80007ea:	4b46      	ldr	r3, [pc, #280]	; (8000904 <robot_setSpeed+0x15c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80007f0:	4b44      	ldr	r3, [pc, #272]	; (8000904 <robot_setSpeed+0x15c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2200      	movs	r2, #0
 80007f6:	639a      	str	r2, [r3, #56]	; 0x38
 80007f8:	e02d      	b.n	8000856 <robot_setSpeed+0xae>
			}

			// nếu tốc độ bên trái bằng 0 -> đứng yên
			else
			{
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80007fa:	4b42      	ldr	r3, [pc, #264]	; (8000904 <robot_setSpeed+0x15c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000802:	4b40      	ldr	r3, [pc, #256]	; (8000904 <robot_setSpeed+0x15c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2200      	movs	r2, #0
 8000808:	639a      	str	r2, [r3, #56]	; 0x38
 800080a:	e024      	b.n	8000856 <robot_setSpeed+0xae>
			}
	}
	else
	{
		// nếu tốc độ bên trái lớn hơn 0
		if(left_speed > 0)
 800080c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000810:	2b00      	cmp	r3, #0
 8000812:	dd09      	ble.n	8000828 <robot_setSpeed+0x80>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, left_speed);
 8000814:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <robot_setSpeed+0x15c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800081e:	4b39      	ldr	r3, [pc, #228]	; (8000904 <robot_setSpeed+0x15c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2200      	movs	r2, #0
 8000824:	639a      	str	r2, [r3, #56]	; 0x38
 8000826:	e016      	b.n	8000856 <robot_setSpeed+0xae>
		}

		// nếu tốc độ bên trái nh�? hơn 0 -> quay chi�?u ngược lại
		else if(left_speed < 0)
 8000828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800082c:	2b00      	cmp	r3, #0
 800082e:	da0a      	bge.n	8000846 <robot_setSpeed+0x9e>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000830:	4b34      	ldr	r3, [pc, #208]	; (8000904 <robot_setSpeed+0x15c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2200      	movs	r2, #0
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (-1*left_speed));		// sử dụng
 8000838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800083c:	425a      	negs	r2, r3
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <robot_setSpeed+0x15c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	639a      	str	r2, [r3, #56]	; 0x38
 8000844:	e007      	b.n	8000856 <robot_setSpeed+0xae>
		}

		// nếu tốc độ bên trái bằng 0 -> đứng yên
		else
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <robot_setSpeed+0x15c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <robot_setSpeed+0x15c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2200      	movs	r2, #0
 8000854:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if(Dir_Right)
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <robot_setSpeed+0x160>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d025      	beq.n	80008aa <robot_setSpeed+0x102>
	{
		// nếu tốc độ bên phải lớn hơn 0
		if(right_speed > 0)
 800085e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	dd09      	ble.n	800087a <robot_setSpeed+0xd2>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <robot_setSpeed+0x15c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2200      	movs	r2, #0
 800086c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, right_speed);
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <robot_setSpeed+0x15c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000876:	641a      	str	r2, [r3, #64]	; 0x40
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
		}
	}
}
 8000878:	e03c      	b.n	80008f4 <robot_setSpeed+0x14c>
		else if(right_speed < 0)
 800087a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	da0a      	bge.n	8000898 <robot_setSpeed+0xf0>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, (-1*right_speed));
 8000882:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000886:	425a      	negs	r2, r3
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <robot_setSpeed+0x15c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <robot_setSpeed+0x15c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2200      	movs	r2, #0
 8000894:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000896:	e02d      	b.n	80008f4 <robot_setSpeed+0x14c>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <robot_setSpeed+0x15c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2200      	movs	r2, #0
 800089e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <robot_setSpeed+0x15c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2200      	movs	r2, #0
 80008a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008a8:	e024      	b.n	80008f4 <robot_setSpeed+0x14c>
		if(right_speed > 0)
 80008aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	dd09      	ble.n	80008c6 <robot_setSpeed+0x11e>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, right_speed);
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <robot_setSpeed+0x15c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008ba:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <robot_setSpeed+0x15c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2200      	movs	r2, #0
 80008c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008c4:	e016      	b.n	80008f4 <robot_setSpeed+0x14c>
		else if(right_speed < 0)
 80008c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	da0a      	bge.n	80008e4 <robot_setSpeed+0x13c>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <robot_setSpeed+0x15c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2200      	movs	r2, #0
 80008d4:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, (-1*right_speed));
 80008d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008da:	425a      	negs	r2, r3
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <robot_setSpeed+0x15c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008e2:	e007      	b.n	80008f4 <robot_setSpeed+0x14c>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <robot_setSpeed+0x15c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2200      	movs	r2, #0
 80008ea:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <robot_setSpeed+0x15c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	2000009c 	.word	0x2000009c
 8000904:	20000188 	.word	0x20000188
 8000908:	2000009d 	.word	0x2000009d

0800090c <robot_PIDCalib>:

void robot_PIDCalib(void)
{
 800090c:	b598      	push	{r3, r4, r7, lr}
 800090e:	af00      	add	r7, sp, #0
	if(!Dir_PID)
 8000910:	4b51      	ldr	r3, [pc, #324]	; (8000a58 <robot_PIDCalib+0x14c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d110      	bne.n	800093a <robot_PIDCalib+0x2e>
	{
		err = sensor_value[0] - sensor_value[2] + center_val;
 8000918:	4b50      	ldr	r3, [pc, #320]	; (8000a5c <robot_PIDCalib+0x150>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b4f      	ldr	r3, [pc, #316]	; (8000a5c <robot_PIDCalib+0x150>)
 8000920:	889b      	ldrh	r3, [r3, #4]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	4a4e      	ldr	r2, [pc, #312]	; (8000a60 <robot_PIDCalib+0x154>)
 8000926:	f9b2 2000 	ldrsh.w	r2, [r2]
 800092a:	4413      	add	r3, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fcc7 	bl	80002c0 <__aeabi_i2f>
 8000932:	4603      	mov	r3, r0
 8000934:	4a4b      	ldr	r2, [pc, #300]	; (8000a64 <robot_PIDCalib+0x158>)
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	e00f      	b.n	800095a <robot_PIDCalib+0x4e>
	}
	else
	{
		err = sensor_value[2] - sensor_value[0] + center_val;
 800093a:	4b48      	ldr	r3, [pc, #288]	; (8000a5c <robot_PIDCalib+0x150>)
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	461a      	mov	r2, r3
 8000940:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <robot_PIDCalib+0x150>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	4a46      	ldr	r2, [pc, #280]	; (8000a60 <robot_PIDCalib+0x154>)
 8000948:	f9b2 2000 	ldrsh.w	r2, [r2]
 800094c:	4413      	add	r3, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fcb6 	bl	80002c0 <__aeabi_i2f>
 8000954:	4603      	mov	r3, r0
 8000956:	4a43      	ldr	r2, [pc, #268]	; (8000a64 <robot_PIDCalib+0x158>)
 8000958:	6013      	str	r3, [r2, #0]
	}

	uP = kP * err;
 800095a:	4b43      	ldr	r3, [pc, #268]	; (8000a68 <robot_PIDCalib+0x15c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a41      	ldr	r2, [pc, #260]	; (8000a64 <robot_PIDCalib+0x158>)
 8000960:	6812      	ldr	r2, [r2, #0]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fcff 	bl	8000368 <__aeabi_fmul>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <robot_PIDCalib+0x160>)
 8000970:	601a      	str	r2, [r3, #0]
	uD = kD * ((err - pre_err) / deltaT);
 8000972:	4b3c      	ldr	r3, [pc, #240]	; (8000a64 <robot_PIDCalib+0x158>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a3e      	ldr	r2, [pc, #248]	; (8000a70 <robot_PIDCalib+0x164>)
 8000978:	6812      	ldr	r2, [r2, #0]
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fbe9 	bl	8000154 <__aeabi_fsub>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <robot_PIDCalib+0x168>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	4610      	mov	r0, r2
 800098e:	f7ff fd9f 	bl	80004d0 <__aeabi_fdiv>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <robot_PIDCalib+0x16c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4619      	mov	r1, r3
 800099c:	4610      	mov	r0, r2
 800099e:	f7ff fce3 	bl	8000368 <__aeabi_fmul>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b35      	ldr	r3, [pc, #212]	; (8000a7c <robot_PIDCalib+0x170>)
 80009a8:	601a      	str	r2, [r3, #0]
	pre_err = err;
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <robot_PIDCalib+0x158>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a30      	ldr	r2, [pc, #192]	; (8000a70 <robot_PIDCalib+0x164>)
 80009b0:	6013      	str	r3, [r2, #0]

	u = uP + uD;
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <robot_PIDCalib+0x160>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a31      	ldr	r2, [pc, #196]	; (8000a7c <robot_PIDCalib+0x170>)
 80009b8:	6812      	ldr	r2, [r2, #0]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fbcb 	bl	8000158 <__addsf3>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <robot_PIDCalib+0x174>)
 80009c8:	601a      	str	r2, [r3, #0]

	if(u > PID_LIMIT_TOP) u = PID_LIMIT_TOP;
 80009ca:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <robot_PIDCalib+0x174>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	492d      	ldr	r1, [pc, #180]	; (8000a84 <robot_PIDCalib+0x178>)
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fe85 	bl	80006e0 <__aeabi_fcmpgt>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <robot_PIDCalib+0xd8>
 80009dc:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <robot_PIDCalib+0x174>)
 80009de:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <robot_PIDCalib+0x178>)
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e00b      	b.n	80009fc <robot_PIDCalib+0xf0>
	else if(u < PID_LIMIT_BOT) u = PID_LIMIT_BOT;
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <robot_PIDCalib+0x174>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4927      	ldr	r1, [pc, #156]	; (8000a88 <robot_PIDCalib+0x17c>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fe5a 	bl	80006a4 <__aeabi_fcmplt>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <robot_PIDCalib+0xf0>
 80009f6:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <robot_PIDCalib+0x174>)
 80009f8:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <robot_PIDCalib+0x17c>)
 80009fa:	601a      	str	r2, [r3, #0]

	left_speed = speed - ((int16_t) u);
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <robot_PIDCalib+0x180>)
 80009fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a02:	b29c      	uxth	r4, r3
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <robot_PIDCalib+0x174>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fe73 	bl	80006f4 <__aeabi_f2iz>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	1ae3      	subs	r3, r4, r3
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	b21a      	sxth	r2, r3
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <robot_PIDCalib+0x184>)
 8000a1c:	801a      	strh	r2, [r3, #0]
	right_speed = speed + ((int16_t) u);
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <robot_PIDCalib+0x174>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe66 	bl	80006f4 <__aeabi_f2iz>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <robot_PIDCalib+0x180>)
 8000a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	4413      	add	r3, r2
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b21a      	sxth	r2, r3
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <robot_PIDCalib+0x188>)
 8000a3e:	801a      	strh	r2, [r3, #0]
	robot_setSpeed(left_speed, right_speed);
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <robot_PIDCalib+0x184>)
 8000a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <robot_PIDCalib+0x188>)
 8000a48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff feaa 	bl	80007a8 <robot_setSpeed>
}
 8000a54:	bf00      	nop
 8000a56:	bd98      	pop	{r3, r4, r7, pc}
 8000a58:	2000009e 	.word	0x2000009e
 8000a5c:	200000a0 	.word	0x200000a0
 8000a60:	20000080 	.word	0x20000080
 8000a64:	200000b4 	.word	0x200000b4
 8000a68:	20000054 	.word	0x20000054
 8000a6c:	20000088 	.word	0x20000088
 8000a70:	200000b8 	.word	0x200000b8
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000058 	.word	0x20000058
 8000a7c:	2000008c 	.word	0x2000008c
 8000a80:	20000090 	.word	0x20000090
 8000a84:	447a0000 	.word	0x447a0000
 8000a88:	c47a0000 	.word	0xc47a0000
 8000a8c:	2000009a 	.word	0x2000009a
 8000a90:	20000096 	.word	0x20000096
 8000a94:	20000098 	.word	0x20000098

08000a98 <sensor_writeLED>:

uint8_t sensor_writeLED(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	uint8_t temp;
	for(uint8_t i = 0 ; i < NUM_OF_LINE_SENSOR; i++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71bb      	strb	r3, [r7, #6]
 8000aa2:	e030      	b.n	8000b06 <sensor_writeLED+0x6e>
	{
		temp <<= MASK_001;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
		if(sensor_value[i] > v_compare[i])
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	4a1a      	ldr	r2, [pc, #104]	; (8000b18 <sensor_writeLED+0x80>)
 8000aae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
 8000ab4:	4919      	ldr	r1, [pc, #100]	; (8000b1c <sensor_writeLED+0x84>)
 8000ab6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d910      	bls.n	8000ae0 <sensor_writeLED+0x48>
		{
			HAL_GPIO_WritePin(sensor_led_port[i], sensor_led_pin[i], 1);
 8000abe:	79bb      	ldrb	r3, [r7, #6]
 8000ac0:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <sensor_writeLED+0x88>)
 8000ac2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <sensor_writeLED+0x8c>)
 8000aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f002 ff1e 	bl	8003912 <HAL_GPIO_WritePin>
			temp |= MASK_001;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	e00f      	b.n	8000b00 <sensor_writeLED+0x68>
		}
		else
		{
			HAL_GPIO_WritePin(sensor_led_port[i], sensor_led_pin[i], 0);
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <sensor_writeLED+0x88>)
 8000ae4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <sensor_writeLED+0x8c>)
 8000aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000af0:	2200      	movs	r2, #0
 8000af2:	4619      	mov	r1, r3
 8000af4:	f002 ff0d 	bl	8003912 <HAL_GPIO_WritePin>
			temp &= MASK_110;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f003 0306 	and.w	r3, r3, #6
 8000afe:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0 ; i < NUM_OF_LINE_SENSOR; i++)
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	3301      	adds	r3, #1
 8000b04:	71bb      	strb	r3, [r7, #6]
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d9cb      	bls.n	8000aa4 <sensor_writeLED+0xc>
		}
	}
	return temp;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000a0 	.word	0x200000a0
 8000b1c:	200000a8 	.word	0x200000a8
 8000b20:	20000014 	.word	0x20000014
 8000b24:	20000020 	.word	0x20000020

08000b28 <robot_setRGB>:

void robot_setRGB(uint8_t R, uint8_t G, uint8_t B)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	460b      	mov	r3, r1
 8000b34:	71bb      	strb	r3, [r7, #6]
 8000b36:	4613      	mov	r3, r2
 8000b38:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, R);
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b42:	480a      	ldr	r0, [pc, #40]	; (8000b6c <robot_setRGB+0x44>)
 8000b44:	f002 fee5 	bl	8003912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, G);
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <robot_setRGB+0x44>)
 8000b52:	f002 fede 	bl	8003912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, B);
 8000b56:	797b      	ldrb	r3, [r7, #5]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5e:	4803      	ldr	r0, [pc, #12]	; (8000b6c <robot_setRGB+0x44>)
 8000b60:	f002 fed7 	bl	8003912 <HAL_GPIO_WritePin>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <robot_beepLong>:

void robot_beepLong(uint16_t millisec)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <robot_beepLong+0x30>)
 8000b80:	f002 fec7 	bl	8003912 <HAL_GPIO_WritePin>
	HAL_Delay(millisec);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fbb6 	bl	80022f8 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2110      	movs	r1, #16
 8000b90:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <robot_beepLong+0x30>)
 8000b92:	f002 febe 	bl	8003912 <HAL_GPIO_WritePin>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <robot_setBuzzer>:

void robot_setBuzzer(uint16_t millisec, uint8_t numOfBeep)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	460a      	mov	r2, r1
 8000bae:	80fb      	strh	r3, [r7, #6]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i < numOfBeep; i++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e00a      	b.n	8000bd0 <robot_setBuzzer+0x2c>
	{
		robot_beepLong(millisec);
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ffd7 	bl	8000b70 <robot_beepLong>
		HAL_Delay(millisec);
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fb97 	bl	80022f8 <HAL_Delay>
	for(uint8_t i = 0; i < numOfBeep; i++)
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	7bfa      	ldrb	r2, [r7, #15]
 8000bd2:	797b      	ldrb	r3, [r7, #5]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d3f0      	bcc.n	8000bba <robot_setBuzzer+0x16>
	}
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <resetBuffer>:

void resetBuffer(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < SIZE_TX_DATA; i++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	e007      	b.n	8000c00 <resetBuffer+0x1c>
	{
		*(tx_data + i) = 0;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <resetBuffer+0x4c>)
 8000bf4:	4413      	add	r3, r2
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < SIZE_TX_DATA; i++)
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b26      	cmp	r3, #38	; 0x26
 8000c04:	d9f4      	bls.n	8000bf0 <resetBuffer+0xc>
	}
	for(uint8_t i = 0; i < SIZE_COMMAND; i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	71bb      	strb	r3, [r7, #6]
 8000c0a:	e007      	b.n	8000c1c <resetBuffer+0x38>
	{
		*(cmd + i) = 0;
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <resetBuffer+0x50>)
 8000c10:	4413      	add	r3, r2
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < SIZE_COMMAND; i++)
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	71bb      	strb	r3, [r7, #6]
 8000c1c:	79bb      	ldrb	r3, [r7, #6]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d9f4      	bls.n	8000c0c <resetBuffer+0x28>
	}
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	200000c0 	.word	0x200000c0
 8000c34:	200000e8 	.word	0x200000e8

08000c38 <prepareToSend>:

void prepareToSend(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
	uint8_t *pByte = NULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]

	pByte = &kP_1;
 8000c42:	4b74      	ldr	r3, [pc, #464]	; (8000e14 <prepareToSend+0x1dc>)
 8000c44:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e00a      	b.n	8000c62 <prepareToSend+0x2a>
	{
		*(tx_data + i) = pByte[i];
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	441a      	add	r2, r3
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	4970      	ldr	r1, [pc, #448]	; (8000e18 <prepareToSend+0x1e0>)
 8000c56:	440b      	add	r3, r1
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d9f1      	bls.n	8000c4c <prepareToSend+0x14>
	}

	pByte = &kD_1;
 8000c68:	4b6c      	ldr	r3, [pc, #432]	; (8000e1c <prepareToSend+0x1e4>)
 8000c6a:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 4; i < 8; i++)
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	73bb      	strb	r3, [r7, #14]
 8000c70:	e00b      	b.n	8000c8a <prepareToSend+0x52>
	{
		*(tx_data + i) = pByte[i - 4];
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	3b04      	subs	r3, #4
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	441a      	add	r2, r3
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	4966      	ldr	r1, [pc, #408]	; (8000e18 <prepareToSend+0x1e0>)
 8000c7e:	440b      	add	r3, r1
 8000c80:	7812      	ldrb	r2, [r2, #0]
 8000c82:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 4; i < 8; i++)
 8000c84:	7bbb      	ldrb	r3, [r7, #14]
 8000c86:	3301      	adds	r3, #1
 8000c88:	73bb      	strb	r3, [r7, #14]
 8000c8a:	7bbb      	ldrb	r3, [r7, #14]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	d9f0      	bls.n	8000c72 <prepareToSend+0x3a>
	}

	pByte = &targetSpeed_1;
 8000c90:	4b63      	ldr	r3, [pc, #396]	; (8000e20 <prepareToSend+0x1e8>)
 8000c92:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 8; i < 10; i++)
 8000c94:	2308      	movs	r3, #8
 8000c96:	737b      	strb	r3, [r7, #13]
 8000c98:	e00b      	b.n	8000cb2 <prepareToSend+0x7a>
	{
		*(tx_data + i) = pByte[i - 8];
 8000c9a:	7b7b      	ldrb	r3, [r7, #13]
 8000c9c:	3b08      	subs	r3, #8
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	441a      	add	r2, r3
 8000ca2:	7b7b      	ldrb	r3, [r7, #13]
 8000ca4:	495c      	ldr	r1, [pc, #368]	; (8000e18 <prepareToSend+0x1e0>)
 8000ca6:	440b      	add	r3, r1
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 8; i < 10; i++)
 8000cac:	7b7b      	ldrb	r3, [r7, #13]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	737b      	strb	r3, [r7, #13]
 8000cb2:	7b7b      	ldrb	r3, [r7, #13]
 8000cb4:	2b09      	cmp	r3, #9
 8000cb6:	d9f0      	bls.n	8000c9a <prepareToSend+0x62>
	}

	*(tx_data + 10) = accel_1;
 8000cb8:	4b5a      	ldr	r3, [pc, #360]	; (8000e24 <prepareToSend+0x1ec>)
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	4b56      	ldr	r3, [pc, #344]	; (8000e18 <prepareToSend+0x1e0>)
 8000cbe:	729a      	strb	r2, [r3, #10]

	pByte = &kP_2;
 8000cc0:	4b59      	ldr	r3, [pc, #356]	; (8000e28 <prepareToSend+0x1f0>)
 8000cc2:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 11; i < 15; i++)
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	733b      	strb	r3, [r7, #12]
 8000cc8:	e00b      	b.n	8000ce2 <prepareToSend+0xaa>
	{
		*(tx_data + i) = pByte[i-11];
 8000cca:	7b3b      	ldrb	r3, [r7, #12]
 8000ccc:	3b0b      	subs	r3, #11
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	441a      	add	r2, r3
 8000cd2:	7b3b      	ldrb	r3, [r7, #12]
 8000cd4:	4950      	ldr	r1, [pc, #320]	; (8000e18 <prepareToSend+0x1e0>)
 8000cd6:	440b      	add	r3, r1
 8000cd8:	7812      	ldrb	r2, [r2, #0]
 8000cda:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 11; i < 15; i++)
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	733b      	strb	r3, [r7, #12]
 8000ce2:	7b3b      	ldrb	r3, [r7, #12]
 8000ce4:	2b0e      	cmp	r3, #14
 8000ce6:	d9f0      	bls.n	8000cca <prepareToSend+0x92>
	}

	pByte = &kD_2;
 8000ce8:	4b50      	ldr	r3, [pc, #320]	; (8000e2c <prepareToSend+0x1f4>)
 8000cea:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 15; i < 19; i++)
 8000cec:	230f      	movs	r3, #15
 8000cee:	72fb      	strb	r3, [r7, #11]
 8000cf0:	e00b      	b.n	8000d0a <prepareToSend+0xd2>
	{
		*(tx_data + i) = pByte[i - 15];
 8000cf2:	7afb      	ldrb	r3, [r7, #11]
 8000cf4:	3b0f      	subs	r3, #15
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	441a      	add	r2, r3
 8000cfa:	7afb      	ldrb	r3, [r7, #11]
 8000cfc:	4946      	ldr	r1, [pc, #280]	; (8000e18 <prepareToSend+0x1e0>)
 8000cfe:	440b      	add	r3, r1
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 15; i < 19; i++)
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	3301      	adds	r3, #1
 8000d08:	72fb      	strb	r3, [r7, #11]
 8000d0a:	7afb      	ldrb	r3, [r7, #11]
 8000d0c:	2b12      	cmp	r3, #18
 8000d0e:	d9f0      	bls.n	8000cf2 <prepareToSend+0xba>
	}

	pByte = &targetSpeed_2;
 8000d10:	4b47      	ldr	r3, [pc, #284]	; (8000e30 <prepareToSend+0x1f8>)
 8000d12:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 19; i < 21; i++)
 8000d14:	2313      	movs	r3, #19
 8000d16:	72bb      	strb	r3, [r7, #10]
 8000d18:	e00b      	b.n	8000d32 <prepareToSend+0xfa>
	{
		*(tx_data + i) = pByte[i - 19];
 8000d1a:	7abb      	ldrb	r3, [r7, #10]
 8000d1c:	3b13      	subs	r3, #19
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	441a      	add	r2, r3
 8000d22:	7abb      	ldrb	r3, [r7, #10]
 8000d24:	493c      	ldr	r1, [pc, #240]	; (8000e18 <prepareToSend+0x1e0>)
 8000d26:	440b      	add	r3, r1
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 19; i < 21; i++)
 8000d2c:	7abb      	ldrb	r3, [r7, #10]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	72bb      	strb	r3, [r7, #10]
 8000d32:	7abb      	ldrb	r3, [r7, #10]
 8000d34:	2b14      	cmp	r3, #20
 8000d36:	d9f0      	bls.n	8000d1a <prepareToSend+0xe2>
	}

	*(tx_data + 21) = accel_2;
 8000d38:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <prepareToSend+0x1fc>)
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	4b36      	ldr	r3, [pc, #216]	; (8000e18 <prepareToSend+0x1e0>)
 8000d3e:	755a      	strb	r2, [r3, #21]

	pByte = &calib_weight;
 8000d40:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <prepareToSend+0x200>)
 8000d42:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 22; i < 30; i++)
 8000d44:	2316      	movs	r3, #22
 8000d46:	727b      	strb	r3, [r7, #9]
 8000d48:	e00b      	b.n	8000d62 <prepareToSend+0x12a>
	{
		*(tx_data + i) = pByte[i - 22];
 8000d4a:	7a7b      	ldrb	r3, [r7, #9]
 8000d4c:	3b16      	subs	r3, #22
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	441a      	add	r2, r3
 8000d52:	7a7b      	ldrb	r3, [r7, #9]
 8000d54:	4930      	ldr	r1, [pc, #192]	; (8000e18 <prepareToSend+0x1e0>)
 8000d56:	440b      	add	r3, r1
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 22; i < 30; i++)
 8000d5c:	7a7b      	ldrb	r3, [r7, #9]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	727b      	strb	r3, [r7, #9]
 8000d62:	7a7b      	ldrb	r3, [r7, #9]
 8000d64:	2b1d      	cmp	r3, #29
 8000d66:	d9f0      	bls.n	8000d4a <prepareToSend+0x112>
	}

	*(tx_data + 30) = Dir_Left;
 8000d68:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <prepareToSend+0x204>)
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <prepareToSend+0x1e0>)
 8000d6e:	779a      	strb	r2, [r3, #30]
	*(tx_data + 31) = Dir_Right;
 8000d70:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <prepareToSend+0x208>)
 8000d72:	781a      	ldrb	r2, [r3, #0]
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <prepareToSend+0x1e0>)
 8000d76:	77da      	strb	r2, [r3, #31]
	*(tx_data + 32) = Dir_PID;
 8000d78:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <prepareToSend+0x20c>)
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <prepareToSend+0x1e0>)
 8000d7e:	f883 2020 	strb.w	r2, [r3, #32]

	pByte = &center_val;
 8000d82:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <prepareToSend+0x210>)
 8000d84:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 33; i < 35; i++)
 8000d86:	2321      	movs	r3, #33	; 0x21
 8000d88:	723b      	strb	r3, [r7, #8]
 8000d8a:	e00b      	b.n	8000da4 <prepareToSend+0x16c>
	{
		*(tx_data + i) = pByte[i - 33];
 8000d8c:	7a3b      	ldrb	r3, [r7, #8]
 8000d8e:	3b21      	subs	r3, #33	; 0x21
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	441a      	add	r2, r3
 8000d94:	7a3b      	ldrb	r3, [r7, #8]
 8000d96:	4920      	ldr	r1, [pc, #128]	; (8000e18 <prepareToSend+0x1e0>)
 8000d98:	440b      	add	r3, r1
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 33; i < 35; i++)
 8000d9e:	7a3b      	ldrb	r3, [r7, #8]
 8000da0:	3301      	adds	r3, #1
 8000da2:	723b      	strb	r3, [r7, #8]
 8000da4:	7a3b      	ldrb	r3, [r7, #8]
 8000da6:	2b22      	cmp	r3, #34	; 0x22
 8000da8:	d9f0      	bls.n	8000d8c <prepareToSend+0x154>
	}

	pByte = &pid_limit_top;
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <prepareToSend+0x214>)
 8000dac:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 35; i < 37; i++)
 8000dae:	2323      	movs	r3, #35	; 0x23
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	e00b      	b.n	8000dcc <prepareToSend+0x194>
	{
		*(tx_data + i) = pByte[i - 35];
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	3b23      	subs	r3, #35	; 0x23
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	441a      	add	r2, r3
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4916      	ldr	r1, [pc, #88]	; (8000e18 <prepareToSend+0x1e0>)
 8000dc0:	440b      	add	r3, r1
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 35; i < 37; i++)
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2b24      	cmp	r3, #36	; 0x24
 8000dd0:	d9f0      	bls.n	8000db4 <prepareToSend+0x17c>
	}

	pByte = &pid_limit_bot;
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <prepareToSend+0x218>)
 8000dd4:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 37; i < 39; i++)
 8000dd6:	2325      	movs	r3, #37	; 0x25
 8000dd8:	71bb      	strb	r3, [r7, #6]
 8000dda:	e00b      	b.n	8000df4 <prepareToSend+0x1bc>
	{
		*(tx_data + i) = pByte[i - 37];
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	3b25      	subs	r3, #37	; 0x25
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	441a      	add	r2, r3
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	490c      	ldr	r1, [pc, #48]	; (8000e18 <prepareToSend+0x1e0>)
 8000de8:	440b      	add	r3, r1
 8000dea:	7812      	ldrb	r2, [r2, #0]
 8000dec:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 37; i < 39; i++)
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	3301      	adds	r3, #1
 8000df2:	71bb      	strb	r3, [r7, #6]
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	2b26      	cmp	r3, #38	; 0x26
 8000df8:	d9f0      	bls.n	8000ddc <prepareToSend+0x1a4>
	}

	HAL_UART_Transmit(&huart1, tx_data, 39, HAL_MAX_DELAY);
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	2227      	movs	r2, #39	; 0x27
 8000e00:	4905      	ldr	r1, [pc, #20]	; (8000e18 <prepareToSend+0x1e0>)
 8000e02:	4814      	ldr	r0, [pc, #80]	; (8000e54 <prepareToSend+0x21c>)
 8000e04:	f004 fa36 	bl	8005274 <HAL_UART_Transmit>
	resetBuffer();
 8000e08:	f7ff feec 	bl	8000be4 <resetBuffer>
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000060 	.word	0x20000060
 8000e18:	200000c0 	.word	0x200000c0
 8000e1c:	20000064 	.word	0x20000064
 8000e20:	20000068 	.word	0x20000068
 8000e24:	2000006a 	.word	0x2000006a
 8000e28:	2000006c 	.word	0x2000006c
 8000e2c:	20000070 	.word	0x20000070
 8000e30:	20000074 	.word	0x20000074
 8000e34:	20000076 	.word	0x20000076
 8000e38:	20000078 	.word	0x20000078
 8000e3c:	2000009c 	.word	0x2000009c
 8000e40:	2000009d 	.word	0x2000009d
 8000e44:	2000009e 	.word	0x2000009e
 8000e48:	20000080 	.word	0x20000080
 8000e4c:	20000082 	.word	0x20000082
 8000e50:	20000084 	.word	0x20000084
 8000e54:	20000260 	.word	0x20000260

08000e58 <assignData>:

void assignData(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
	uint8_t *pByte = NULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	603b      	str	r3, [r7, #0]
	pByte = &kP_1;
 8000e62:	4b75      	ldr	r3, [pc, #468]	; (8001038 <assignData+0x1e0>)
 8000e64:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	e009      	b.n	8000e80 <assignData+0x28>
	{
		pByte[i] = data[i];
 8000e6c:	7bfa      	ldrb	r2, [r7, #15]
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	6839      	ldr	r1, [r7, #0]
 8000e72:	440b      	add	r3, r1
 8000e74:	4971      	ldr	r1, [pc, #452]	; (800103c <assignData+0x1e4>)
 8000e76:	5c8a      	ldrb	r2, [r1, r2]
 8000e78:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d9f2      	bls.n	8000e6c <assignData+0x14>
	}
	pByte = &kD_1;
 8000e86:	4b6e      	ldr	r3, [pc, #440]	; (8001040 <assignData+0x1e8>)
 8000e88:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 4; i < 8; i++)
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	73bb      	strb	r3, [r7, #14]
 8000e8e:	e00a      	b.n	8000ea6 <assignData+0x4e>
	{
		pByte[i-4] = data[i];
 8000e90:	7bba      	ldrb	r2, [r7, #14]
 8000e92:	7bbb      	ldrb	r3, [r7, #14]
 8000e94:	3b04      	subs	r3, #4
 8000e96:	6839      	ldr	r1, [r7, #0]
 8000e98:	440b      	add	r3, r1
 8000e9a:	4968      	ldr	r1, [pc, #416]	; (800103c <assignData+0x1e4>)
 8000e9c:	5c8a      	ldrb	r2, [r1, r2]
 8000e9e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 4; i < 8; i++)
 8000ea0:	7bbb      	ldrb	r3, [r7, #14]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	73bb      	strb	r3, [r7, #14]
 8000ea6:	7bbb      	ldrb	r3, [r7, #14]
 8000ea8:	2b07      	cmp	r3, #7
 8000eaa:	d9f1      	bls.n	8000e90 <assignData+0x38>
	}
	pByte = &targetSpeed_1;
 8000eac:	4b65      	ldr	r3, [pc, #404]	; (8001044 <assignData+0x1ec>)
 8000eae:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 8; i < 10; i++)
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	737b      	strb	r3, [r7, #13]
 8000eb4:	e00a      	b.n	8000ecc <assignData+0x74>
	{
		pByte[i-8] = data[i];
 8000eb6:	7b7a      	ldrb	r2, [r7, #13]
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	3b08      	subs	r3, #8
 8000ebc:	6839      	ldr	r1, [r7, #0]
 8000ebe:	440b      	add	r3, r1
 8000ec0:	495e      	ldr	r1, [pc, #376]	; (800103c <assignData+0x1e4>)
 8000ec2:	5c8a      	ldrb	r2, [r1, r2]
 8000ec4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 8; i < 10; i++)
 8000ec6:	7b7b      	ldrb	r3, [r7, #13]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	737b      	strb	r3, [r7, #13]
 8000ecc:	7b7b      	ldrb	r3, [r7, #13]
 8000ece:	2b09      	cmp	r3, #9
 8000ed0:	d9f1      	bls.n	8000eb6 <assignData+0x5e>
	}
	accel_1 = data[10];
 8000ed2:	4b5a      	ldr	r3, [pc, #360]	; (800103c <assignData+0x1e4>)
 8000ed4:	7a9a      	ldrb	r2, [r3, #10]
 8000ed6:	4b5c      	ldr	r3, [pc, #368]	; (8001048 <assignData+0x1f0>)
 8000ed8:	701a      	strb	r2, [r3, #0]

	pByte = &kP_2;
 8000eda:	4b5c      	ldr	r3, [pc, #368]	; (800104c <assignData+0x1f4>)
 8000edc:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 11; i < 15; i++)
 8000ede:	230b      	movs	r3, #11
 8000ee0:	733b      	strb	r3, [r7, #12]
 8000ee2:	e00a      	b.n	8000efa <assignData+0xa2>
	{
		pByte[i-11] = data[i];
 8000ee4:	7b3a      	ldrb	r2, [r7, #12]
 8000ee6:	7b3b      	ldrb	r3, [r7, #12]
 8000ee8:	3b0b      	subs	r3, #11
 8000eea:	6839      	ldr	r1, [r7, #0]
 8000eec:	440b      	add	r3, r1
 8000eee:	4953      	ldr	r1, [pc, #332]	; (800103c <assignData+0x1e4>)
 8000ef0:	5c8a      	ldrb	r2, [r1, r2]
 8000ef2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 11; i < 15; i++)
 8000ef4:	7b3b      	ldrb	r3, [r7, #12]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	733b      	strb	r3, [r7, #12]
 8000efa:	7b3b      	ldrb	r3, [r7, #12]
 8000efc:	2b0e      	cmp	r3, #14
 8000efe:	d9f1      	bls.n	8000ee4 <assignData+0x8c>
	}
	pByte = &kD_2;
 8000f00:	4b53      	ldr	r3, [pc, #332]	; (8001050 <assignData+0x1f8>)
 8000f02:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 15; i < 19; i++)
 8000f04:	230f      	movs	r3, #15
 8000f06:	72fb      	strb	r3, [r7, #11]
 8000f08:	e00a      	b.n	8000f20 <assignData+0xc8>
	{
		pByte[i-15] = data[i];
 8000f0a:	7afa      	ldrb	r2, [r7, #11]
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	3b0f      	subs	r3, #15
 8000f10:	6839      	ldr	r1, [r7, #0]
 8000f12:	440b      	add	r3, r1
 8000f14:	4949      	ldr	r1, [pc, #292]	; (800103c <assignData+0x1e4>)
 8000f16:	5c8a      	ldrb	r2, [r1, r2]
 8000f18:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 15; i < 19; i++)
 8000f1a:	7afb      	ldrb	r3, [r7, #11]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	72fb      	strb	r3, [r7, #11]
 8000f20:	7afb      	ldrb	r3, [r7, #11]
 8000f22:	2b12      	cmp	r3, #18
 8000f24:	d9f1      	bls.n	8000f0a <assignData+0xb2>
	}
	pByte = &targetSpeed_2;
 8000f26:	4b4b      	ldr	r3, [pc, #300]	; (8001054 <assignData+0x1fc>)
 8000f28:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 19; i < 21; i++)
 8000f2a:	2313      	movs	r3, #19
 8000f2c:	72bb      	strb	r3, [r7, #10]
 8000f2e:	e00a      	b.n	8000f46 <assignData+0xee>
	{
		pByte[i-19] = data[i];
 8000f30:	7aba      	ldrb	r2, [r7, #10]
 8000f32:	7abb      	ldrb	r3, [r7, #10]
 8000f34:	3b13      	subs	r3, #19
 8000f36:	6839      	ldr	r1, [r7, #0]
 8000f38:	440b      	add	r3, r1
 8000f3a:	4940      	ldr	r1, [pc, #256]	; (800103c <assignData+0x1e4>)
 8000f3c:	5c8a      	ldrb	r2, [r1, r2]
 8000f3e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 19; i < 21; i++)
 8000f40:	7abb      	ldrb	r3, [r7, #10]
 8000f42:	3301      	adds	r3, #1
 8000f44:	72bb      	strb	r3, [r7, #10]
 8000f46:	7abb      	ldrb	r3, [r7, #10]
 8000f48:	2b14      	cmp	r3, #20
 8000f4a:	d9f1      	bls.n	8000f30 <assignData+0xd8>
	}
	accel_2 = data[21];
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	; (800103c <assignData+0x1e4>)
 8000f4e:	7d5a      	ldrb	r2, [r3, #21]
 8000f50:	4b41      	ldr	r3, [pc, #260]	; (8001058 <assignData+0x200>)
 8000f52:	701a      	strb	r2, [r3, #0]

	pByte = &calib_weight;
 8000f54:	4b41      	ldr	r3, [pc, #260]	; (800105c <assignData+0x204>)
 8000f56:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 22; i < 28; i++)
 8000f58:	2316      	movs	r3, #22
 8000f5a:	727b      	strb	r3, [r7, #9]
 8000f5c:	e00a      	b.n	8000f74 <assignData+0x11c>
	{
		pByte[i-22] = data[i];
 8000f5e:	7a7a      	ldrb	r2, [r7, #9]
 8000f60:	7a7b      	ldrb	r3, [r7, #9]
 8000f62:	3b16      	subs	r3, #22
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	440b      	add	r3, r1
 8000f68:	4934      	ldr	r1, [pc, #208]	; (800103c <assignData+0x1e4>)
 8000f6a:	5c8a      	ldrb	r2, [r1, r2]
 8000f6c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 22; i < 28; i++)
 8000f6e:	7a7b      	ldrb	r3, [r7, #9]
 8000f70:	3301      	adds	r3, #1
 8000f72:	727b      	strb	r3, [r7, #9]
 8000f74:	7a7b      	ldrb	r3, [r7, #9]
 8000f76:	2b1b      	cmp	r3, #27
 8000f78:	d9f1      	bls.n	8000f5e <assignData+0x106>
	}

	pByte = &gate_sensor_value;
 8000f7a:	4b39      	ldr	r3, [pc, #228]	; (8001060 <assignData+0x208>)
 8000f7c:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 28; i < 30; i++)
 8000f7e:	231c      	movs	r3, #28
 8000f80:	723b      	strb	r3, [r7, #8]
 8000f82:	e00a      	b.n	8000f9a <assignData+0x142>
	{
		pByte[i-28] = data[i];
 8000f84:	7a3a      	ldrb	r2, [r7, #8]
 8000f86:	7a3b      	ldrb	r3, [r7, #8]
 8000f88:	3b1c      	subs	r3, #28
 8000f8a:	6839      	ldr	r1, [r7, #0]
 8000f8c:	440b      	add	r3, r1
 8000f8e:	492b      	ldr	r1, [pc, #172]	; (800103c <assignData+0x1e4>)
 8000f90:	5c8a      	ldrb	r2, [r1, r2]
 8000f92:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 28; i < 30; i++)
 8000f94:	7a3b      	ldrb	r3, [r7, #8]
 8000f96:	3301      	adds	r3, #1
 8000f98:	723b      	strb	r3, [r7, #8]
 8000f9a:	7a3b      	ldrb	r3, [r7, #8]
 8000f9c:	2b1d      	cmp	r3, #29
 8000f9e:	d9f1      	bls.n	8000f84 <assignData+0x12c>
	}

	Dir_Left = data[30];
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <assignData+0x1e4>)
 8000fa2:	7f9a      	ldrb	r2, [r3, #30]
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <assignData+0x20c>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	Dir_Right = data[31];
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <assignData+0x1e4>)
 8000faa:	7fda      	ldrb	r2, [r3, #31]
 8000fac:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <assignData+0x210>)
 8000fae:	701a      	strb	r2, [r3, #0]
	Dir_PID = data[32];
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <assignData+0x1e4>)
 8000fb2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <assignData+0x214>)
 8000fb8:	701a      	strb	r2, [r3, #0]

	pByte = &center_val;
 8000fba:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <assignData+0x218>)
 8000fbc:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 33; i < 35; i++)
 8000fbe:	2321      	movs	r3, #33	; 0x21
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	e00a      	b.n	8000fda <assignData+0x182>
	{
		pByte[i-33] = data[i];
 8000fc4:	79fa      	ldrb	r2, [r7, #7]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	3b21      	subs	r3, #33	; 0x21
 8000fca:	6839      	ldr	r1, [r7, #0]
 8000fcc:	440b      	add	r3, r1
 8000fce:	491b      	ldr	r1, [pc, #108]	; (800103c <assignData+0x1e4>)
 8000fd0:	5c8a      	ldrb	r2, [r1, r2]
 8000fd2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 33; i < 35; i++)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b22      	cmp	r3, #34	; 0x22
 8000fde:	d9f1      	bls.n	8000fc4 <assignData+0x16c>
	}

	pByte = &pid_limit_top;
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <assignData+0x21c>)
 8000fe2:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 35; i < 37; i++)
 8000fe4:	2323      	movs	r3, #35	; 0x23
 8000fe6:	71bb      	strb	r3, [r7, #6]
 8000fe8:	e00a      	b.n	8001000 <assignData+0x1a8>
	{
		pByte[i-35] = data[i];
 8000fea:	79ba      	ldrb	r2, [r7, #6]
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	3b23      	subs	r3, #35	; 0x23
 8000ff0:	6839      	ldr	r1, [r7, #0]
 8000ff2:	440b      	add	r3, r1
 8000ff4:	4911      	ldr	r1, [pc, #68]	; (800103c <assignData+0x1e4>)
 8000ff6:	5c8a      	ldrb	r2, [r1, r2]
 8000ff8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 35; i < 37; i++)
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	71bb      	strb	r3, [r7, #6]
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	2b24      	cmp	r3, #36	; 0x24
 8001004:	d9f1      	bls.n	8000fea <assignData+0x192>
	}

	pByte = &pid_limit_bot;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <assignData+0x220>)
 8001008:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 37; i < 39; i++)
 800100a:	2325      	movs	r3, #37	; 0x25
 800100c:	717b      	strb	r3, [r7, #5]
 800100e:	e00a      	b.n	8001026 <assignData+0x1ce>
	{
		pByte[i-37] = data[i];
 8001010:	797a      	ldrb	r2, [r7, #5]
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	3b25      	subs	r3, #37	; 0x25
 8001016:	6839      	ldr	r1, [r7, #0]
 8001018:	440b      	add	r3, r1
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <assignData+0x1e4>)
 800101c:	5c8a      	ldrb	r2, [r1, r2]
 800101e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 37; i < 39; i++)
 8001020:	797b      	ldrb	r3, [r7, #5]
 8001022:	3301      	adds	r3, #1
 8001024:	717b      	strb	r3, [r7, #5]
 8001026:	797b      	ldrb	r3, [r7, #5]
 8001028:	2b26      	cmp	r3, #38	; 0x26
 800102a:	d9f1      	bls.n	8001010 <assignData+0x1b8>
	}

	resetBuffer();
 800102c:	f7ff fdda 	bl	8000be4 <resetBuffer>
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000060 	.word	0x20000060
 800103c:	200000ec 	.word	0x200000ec
 8001040:	20000064 	.word	0x20000064
 8001044:	20000068 	.word	0x20000068
 8001048:	2000006a 	.word	0x2000006a
 800104c:	2000006c 	.word	0x2000006c
 8001050:	20000070 	.word	0x20000070
 8001054:	20000074 	.word	0x20000074
 8001058:	20000076 	.word	0x20000076
 800105c:	20000078 	.word	0x20000078
 8001060:	2000007e 	.word	0x2000007e
 8001064:	2000009c 	.word	0x2000009c
 8001068:	2000009d 	.word	0x2000009d
 800106c:	2000009e 	.word	0x2000009e
 8001070:	20000080 	.word	0x20000080
 8001074:	20000082 	.word	0x20000082
 8001078:	20000084 	.word	0x20000084

0800107c <robot_readFlash>:

void robot_readFlash(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < SIZE_DATA; i++) {
 8001082:	2300      	movs	r3, #0
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	e00c      	b.n	80010a2 <robot_readFlash+0x26>
		data[i] = *(uint8_t *)(FLASH_ADDR_TARGET + i);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800108e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001092:	461a      	mov	r2, r3
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	7811      	ldrb	r1, [r2, #0]
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <robot_readFlash+0x38>)
 800109a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < SIZE_DATA; i++) {
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3301      	adds	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b26      	cmp	r3, #38	; 0x26
 80010a6:	d9ef      	bls.n	8001088 <robot_readFlash+0xc>
	}
	assignData();
 80010a8:	f7ff fed6 	bl	8000e58 <assignData>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200000ec 	.word	0x200000ec

080010b8 <robot_writeFlash>:

void robot_writeFlash(void)
{
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80010be:	f002 f8fd 	bl	80032bc <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef eraseInitStruct;
	uint32_t pageError;
	eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
	eraseInitStruct.PageAddress = FLASH_ADDR_TARGET;
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <robot_writeFlash+0x90>)
 80010c8:	613b      	str	r3, [r7, #16]
	eraseInitStruct.NbPages = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
	HAL_FLASHEx_Erase(&eraseInitStruct, &pageError);
 80010ce:	1d3a      	adds	r2, r7, #4
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 f9d8 	bl	800348c <HAL_FLASHEx_Erase>

	for(uint8_t i = 0; i < SIZE_DATA; i+=WORD_DISTANCE_BETWEEN)
 80010dc:	2300      	movs	r3, #0
 80010de:	77fb      	strb	r3, [r7, #31]
 80010e0:	e029      	b.n	8001136 <robot_writeFlash+0x7e>
	{
		uint32_t data_write = data[i] | (data[i + 1] << 8) | (data[i + 2] << 16) | (data[i + 3] << 24);
 80010e2:	7ffb      	ldrb	r3, [r7, #31]
 80010e4:	4a19      	ldr	r2, [pc, #100]	; (800114c <robot_writeFlash+0x94>)
 80010e6:	5cd3      	ldrb	r3, [r2, r3]
 80010e8:	4619      	mov	r1, r3
 80010ea:	7ffb      	ldrb	r3, [r7, #31]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <robot_writeFlash+0x94>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	ea41 0203 	orr.w	r2, r1, r3
 80010f8:	7ffb      	ldrb	r3, [r7, #31]
 80010fa:	3302      	adds	r3, #2
 80010fc:	4913      	ldr	r1, [pc, #76]	; (800114c <robot_writeFlash+0x94>)
 80010fe:	5ccb      	ldrb	r3, [r1, r3]
 8001100:	041b      	lsls	r3, r3, #16
 8001102:	431a      	orrs	r2, r3
 8001104:	7ffb      	ldrb	r3, [r7, #31]
 8001106:	3303      	adds	r3, #3
 8001108:	4910      	ldr	r1, [pc, #64]	; (800114c <robot_writeFlash+0x94>)
 800110a:	5ccb      	ldrb	r3, [r1, r3]
 800110c:	061b      	lsls	r3, r3, #24
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_TARGET + i, data_write);
 8001112:	7ffb      	ldrb	r3, [r7, #31]
 8001114:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001118:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800111c:	4619      	mov	r1, r3
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	2200      	movs	r2, #0
 8001122:	461c      	mov	r4, r3
 8001124:	4615      	mov	r5, r2
 8001126:	4622      	mov	r2, r4
 8001128:	462b      	mov	r3, r5
 800112a:	2002      	movs	r0, #2
 800112c:	f002 f856 	bl	80031dc <HAL_FLASH_Program>
	for(uint8_t i = 0; i < SIZE_DATA; i+=WORD_DISTANCE_BETWEEN)
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	3304      	adds	r3, #4
 8001134:	77fb      	strb	r3, [r7, #31]
 8001136:	7ffb      	ldrb	r3, [r7, #31]
 8001138:	2b26      	cmp	r3, #38	; 0x26
 800113a:	d9d2      	bls.n	80010e2 <robot_writeFlash+0x2a>
	}
	HAL_FLASH_Lock();
 800113c:	f002 f8e4 	bl	8003308 <HAL_FLASH_Lock>
}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bdb0      	pop	{r4, r5, r7, pc}
 8001148:	0801fc00 	.word	0x0801fc00
 800114c:	200000ec 	.word	0x200000ec

08001150 <robot_init>:

void robot_init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001154:	4835      	ldr	r0, [pc, #212]	; (800122c <robot_init+0xdc>)
 8001156:	f003 f93b 	bl	80043d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 800115a:	4835      	ldr	r0, [pc, #212]	; (8001230 <robot_init+0xe0>)
 800115c:	f003 f938 	bl	80043d0 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001160:	2100      	movs	r1, #0
 8001162:	4834      	ldr	r0, [pc, #208]	; (8001234 <robot_init+0xe4>)
 8001164:	f003 f9d6 	bl	8004514 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001168:	2104      	movs	r1, #4
 800116a:	4832      	ldr	r0, [pc, #200]	; (8001234 <robot_init+0xe4>)
 800116c:	f003 f9d2 	bl	8004514 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001170:	2108      	movs	r1, #8
 8001172:	4830      	ldr	r0, [pc, #192]	; (8001234 <robot_init+0xe4>)
 8001174:	f003 f9ce 	bl	8004514 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001178:	210c      	movs	r1, #12
 800117a:	482e      	ldr	r0, [pc, #184]	; (8001234 <robot_init+0xe4>)
 800117c:	f003 f9ca 	bl	8004514 <HAL_TIM_PWM_Start>

	robot_setDirection(0, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff fadb 	bl	8000740 <robot_setDirection>
	robot_readFlash();
 800118a:	f7ff ff77 	bl	800107c <robot_readFlash>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) sensor_value, NUM_OF_ALL_SENSORS);
 800118e:	2204      	movs	r2, #4
 8001190:	4929      	ldr	r1, [pc, #164]	; (8001238 <robot_init+0xe8>)
 8001192:	482a      	ldr	r0, [pc, #168]	; (800123c <robot_init+0xec>)
 8001194:	f001 f9ac 	bl	80024f0 <HAL_ADC_Start_DMA>

	robot_setRGB(1, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff fcc3 	bl	8000b28 <robot_setRGB>
	HAL_Delay(TIMEBLINK_RGB);
 80011a2:	2064      	movs	r0, #100	; 0x64
 80011a4:	f001 f8a8 	bl	80022f8 <HAL_Delay>
	robot_setRGB(0, 1, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2101      	movs	r1, #1
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fcbb 	bl	8000b28 <robot_setRGB>
	HAL_Delay(TIMEBLINK_RGB);
 80011b2:	2064      	movs	r0, #100	; 0x64
 80011b4:	f001 f8a0 	bl	80022f8 <HAL_Delay>
	robot_setRGB(0, 0, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2100      	movs	r1, #0
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fcb3 	bl	8000b28 <robot_setRGB>
	HAL_Delay(TIMEBLINK_RGB);
 80011c2:	2064      	movs	r0, #100	; 0x64
 80011c4:	f001 f898 	bl	80022f8 <HAL_Delay>
	robot_setRGB(1, 1, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2101      	movs	r1, #1
 80011cc:	2001      	movs	r0, #1
 80011ce:	f7ff fcab 	bl	8000b28 <robot_setRGB>
	HAL_Delay(TIMEBLINK_RGB);
 80011d2:	2064      	movs	r0, #100	; 0x64
 80011d4:	f001 f890 	bl	80022f8 <HAL_Delay>
	robot_setRGB(0, 1, 1);
 80011d8:	2201      	movs	r2, #1
 80011da:	2101      	movs	r1, #1
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fca3 	bl	8000b28 <robot_setRGB>
	HAL_Delay(TIMEBLINK_RGB);
 80011e2:	2064      	movs	r0, #100	; 0x64
 80011e4:	f001 f888 	bl	80022f8 <HAL_Delay>
	robot_setRGB(1, 0, 1);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2100      	movs	r1, #0
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff fc9b 	bl	8000b28 <robot_setRGB>
	HAL_Delay(TIMEBLINK_RGB);
 80011f2:	2064      	movs	r0, #100	; 0x64
 80011f4:	f001 f880 	bl	80022f8 <HAL_Delay>
	robot_setRGB(1, 1, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2101      	movs	r1, #1
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff fc93 	bl	8000b28 <robot_setRGB>
	HAL_Delay(TIMEBLINK_RGB_END);
 8001202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001206:	f001 f877 	bl	80022f8 <HAL_Delay>
  	robot_setRGB(0, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff fc8a 	bl	8000b28 <robot_setRGB>

  	robot_setBuzzer(DEFAULT_TIME_BEEP, DEFAULT_BEEP_NUMS);
 8001214:	2103      	movs	r1, #3
 8001216:	2064      	movs	r0, #100	; 0x64
 8001218:	f7ff fcc4 	bl	8000ba4 <robot_setBuzzer>

  	HAL_UART_Receive_IT(&huart1, cmd, SIZE_COMMAND);
 800121c:	2202      	movs	r2, #2
 800121e:	4908      	ldr	r1, [pc, #32]	; (8001240 <robot_init+0xf0>)
 8001220:	4808      	ldr	r0, [pc, #32]	; (8001244 <robot_init+0xf4>)
 8001222:	f004 f8b2 	bl	800538a <HAL_UART_Receive_IT>
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001d0 	.word	0x200001d0
 8001230:	20000218 	.word	0x20000218
 8001234:	20000188 	.word	0x20000188
 8001238:	200000a0 	.word	0x200000a0
 800123c:	20000114 	.word	0x20000114
 8001240:	200000e8 	.word	0x200000e8
 8001244:	20000260 	.word	0x20000260

08001248 <button_handle>:

void button_handle(void)
{
 8001248:	b598      	push	{r3, r4, r7, lr}
 800124a:	af00      	add	r7, sp, #0
	button_event = (HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin) << 3) |
 800124c:	2101      	movs	r1, #1
 800124e:	482a      	ldr	r0, [pc, #168]	; (80012f8 <button_handle+0xb0>)
 8001250:	f002 fb48 	bl	80038e4 <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	b25c      	sxtb	r4, r3
				   (HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin) << 2) |
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	4827      	ldr	r0, [pc, #156]	; (80012fc <button_handle+0xb4>)
 800125e:	f002 fb41 	bl	80038e4 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	009b      	lsls	r3, r3, #2
	button_event = (HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin) << 3) |
 8001266:	b25b      	sxtb	r3, r3
 8001268:	4323      	orrs	r3, r4
 800126a:	b25c      	sxtb	r4, r3
				   (HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin) << 1) |
 800126c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001270:	4823      	ldr	r0, [pc, #140]	; (8001300 <button_handle+0xb8>)
 8001272:	f002 fb37 	bl	80038e4 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	005b      	lsls	r3, r3, #1
				   (HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin) << 2) |
 800127a:	b25b      	sxtb	r3, r3
 800127c:	4323      	orrs	r3, r4
 800127e:	b25c      	sxtb	r4, r3
				   (HAL_GPIO_ReadPin(BT4_GPIO_Port, BT4_Pin) << 0);
 8001280:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001284:	481d      	ldr	r0, [pc, #116]	; (80012fc <button_handle+0xb4>)
 8001286:	f002 fb2d 	bl	80038e4 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	b25b      	sxtb	r3, r3
				   (HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin) << 1) |
 800128e:	4323      	orrs	r3, r4
 8001290:	b25b      	sxtb	r3, r3
 8001292:	b2da      	uxtb	r2, r3
	button_event = (HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin) << 3) |
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <button_handle+0xbc>)
 8001296:	701a      	strb	r2, [r3, #0]

	switch(button_event)
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <button_handle+0xbc>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	3b07      	subs	r3, #7
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d828      	bhi.n	80012f4 <button_handle+0xac>
 80012a2:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <button_handle+0x60>)
 80012a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a8:	080012cd 	.word	0x080012cd
 80012ac:	080012f5 	.word	0x080012f5
 80012b0:	080012f5 	.word	0x080012f5
 80012b4:	080012f5 	.word	0x080012f5
 80012b8:	080012d5 	.word	0x080012d5
 80012bc:	080012f5 	.word	0x080012f5
 80012c0:	080012dd 	.word	0x080012dd
 80012c4:	080012e5 	.word	0x080012e5
 80012c8:	080012ed 	.word	0x080012ed
	{
		case BT1_PRESSED:
			run_case = LEARN_AUTO;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <button_handle+0xc0>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
			break;
 80012d2:	e00f      	b.n	80012f4 <button_handle+0xac>

		case BT2_PRESSED:
			run_case = LEARN_MANUAL;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <button_handle+0xc0>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	701a      	strb	r2, [r3, #0]
			break;
 80012da:	e00b      	b.n	80012f4 <button_handle+0xac>

		case BT3_PRESSED:
			run_case = RUN_NO_TC;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <button_handle+0xc0>)
 80012de:	2203      	movs	r2, #3
 80012e0:	701a      	strb	r2, [r3, #0]
			break;
 80012e2:	e007      	b.n	80012f4 <button_handle+0xac>

		case BT4_PRESSED:
			run_case = RUN_WITH_TC;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <button_handle+0xc0>)
 80012e6:	2204      	movs	r2, #4
 80012e8:	701a      	strb	r2, [r3, #0]
			break;
 80012ea:	e003      	b.n	80012f4 <button_handle+0xac>

		case ALL_BT_UP:
			run_case = STOP;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <button_handle+0xc0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
			break;
 80012f2:	bf00      	nop
	}
}
 80012f4:	bf00      	nop
 80012f6:	bd98      	pop	{r3, r4, r7, pc}
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40010800 	.word	0x40010800
 8001300:	40011000 	.word	0x40011000
 8001304:	200000bc 	.word	0x200000bc
 8001308:	20000094 	.word	0x20000094

0800130c <HAL_UART_RxCpltCallback>:
//		}
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_UART_RxCpltCallback+0xb0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d149      	bne.n	80013b2 <HAL_UART_RxCpltCallback+0xa6>
	{
		if(cmd[0] == '@' && cmd[1] == '\n')
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <HAL_UART_RxCpltCallback+0xb4>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b40      	cmp	r3, #64	; 0x40
 8001324:	d10e      	bne.n	8001344 <HAL_UART_RxCpltCallback+0x38>
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <HAL_UART_RxCpltCallback+0xb4>)
 8001328:	785b      	ldrb	r3, [r3, #1]
 800132a:	2b0a      	cmp	r3, #10
 800132c:	d10a      	bne.n	8001344 <HAL_UART_RxCpltCallback+0x38>
		{
			robot_setRGB(1, 0, 1);
 800132e:	2201      	movs	r2, #1
 8001330:	2100      	movs	r1, #0
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff fbf8 	bl	8000b28 <robot_setRGB>
			HAL_UART_AbortReceive_IT(huart);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f004 f84b 	bl	80053d4 <HAL_UART_AbortReceive_IT>
//			isConnected = 1;
			readyToSend = 1;
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_UART_RxCpltCallback+0xb8>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
		}
		if(cmd[0] == '#' && cmd[1] == '\n')
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <HAL_UART_RxCpltCallback+0xb4>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b23      	cmp	r3, #35	; 0x23
 800134a:	d10f      	bne.n	800136c <HAL_UART_RxCpltCallback+0x60>
 800134c:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_UART_RxCpltCallback+0xb4>)
 800134e:	785b      	ldrb	r3, [r3, #1]
 8001350:	2b0a      	cmp	r3, #10
 8001352:	d10b      	bne.n	800136c <HAL_UART_RxCpltCallback+0x60>
		{
			robot_setRGB(0, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fbe5 	bl	8000b28 <robot_setRGB>
			resetBuffer();
 800135e:	f7ff fc41 	bl	8000be4 <resetBuffer>
			HAL_UART_Receive_IT(huart, cmd, SIZE_COMMAND);
 8001362:	2202      	movs	r2, #2
 8001364:	4916      	ldr	r1, [pc, #88]	; (80013c0 <HAL_UART_RxCpltCallback+0xb4>)
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f004 f80f 	bl	800538a <HAL_UART_Receive_IT>
//			isConnected = 0;
		}
		if(cmd[0] == '$' && cmd[1] == '\n')
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_UART_RxCpltCallback+0xb4>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b24      	cmp	r3, #36	; 0x24
 8001372:	d113      	bne.n	800139c <HAL_UART_RxCpltCallback+0x90>
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_UART_RxCpltCallback+0xb4>)
 8001376:	785b      	ldrb	r3, [r3, #1]
 8001378:	2b0a      	cmp	r3, #10
 800137a:	d10f      	bne.n	800139c <HAL_UART_RxCpltCallback+0x90>
		{
			robot_setRGB(0, 1, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fbd1 	bl	8000b28 <robot_setRGB>
			HAL_UART_AbortReceive_IT(huart);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f004 f824 	bl	80053d4 <HAL_UART_AbortReceive_IT>
			HAL_UART_Receive_IT(huart, data, SIZE_DATA);
 800138c:	2227      	movs	r2, #39	; 0x27
 800138e:	490e      	ldr	r1, [pc, #56]	; (80013c8 <HAL_UART_RxCpltCallback+0xbc>)
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f003 fffa 	bl	800538a <HAL_UART_Receive_IT>
			readyToAssign = 1;
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_UART_RxCpltCallback+0xc0>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
		}
		if(cmd[0] == '%' && cmd[1] == '\n')
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_UART_RxCpltCallback+0xb4>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b25      	cmp	r3, #37	; 0x25
 80013a2:	d106      	bne.n	80013b2 <HAL_UART_RxCpltCallback+0xa6>
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_UART_RxCpltCallback+0xb4>)
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	2b0a      	cmp	r3, #10
 80013aa:	d102      	bne.n	80013b2 <HAL_UART_RxCpltCallback+0xa6>
		{
			readyToWrite = 1;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_UART_RxCpltCallback+0xc4>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40013800 	.word	0x40013800
 80013c0:	200000e8 	.word	0x200000e8
 80013c4:	200000b0 	.word	0x200000b0
 80013c8:	200000ec 	.word	0x200000ec
 80013cc:	200000b1 	.word	0x200000b1
 80013d0:	200000b2 	.word	0x200000b2

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013da:	f000 ff5b 	bl	8002294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f961 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f000 fb83 	bl	8001aec <MX_GPIO_Init>
  MX_DMA_Init();
 80013e6:	f000 fb63 	bl	8001ab0 <MX_DMA_Init>
  MX_TIM2_Init();
 80013ea:	f000 fa21 	bl	8001830 <MX_TIM2_Init>
  MX_ADC1_Init();
 80013ee:	f000 f9b5 	bl	800175c <MX_ADC1_Init>
  MX_TIM4_Init();
 80013f2:	f000 fae5 	bl	80019c0 <MX_TIM4_Init>
  MX_TIM3_Init();
 80013f6:	f000 fa95 	bl	8001924 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80013fa:	f000 fb2f 	bl	8001a5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  robot_init();
 80013fe:	f7ff fea7 	bl	8001150 <robot_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch(run_case)
 8001402:	4b98      	ldr	r3, [pc, #608]	; (8001664 <main+0x290>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b04      	cmp	r3, #4
 8001408:	d8fb      	bhi.n	8001402 <main+0x2e>
 800140a:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <main+0x3c>)
 800140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001410:	080015c5 	.word	0x080015c5
 8001414:	08001425 	.word	0x08001425
 8001418:	080014e7 	.word	0x080014e7
 800141c:	08001595 	.word	0x08001595
 8001420:	080015b7 	.word	0x080015b7
	{
		case LEARN_AUTO:
			robot_setBuzzer(LEARN_AUTO_TIME_BEEP, DEFAULT_BEEP_NUMS);
 8001424:	2103      	movs	r1, #3
 8001426:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800142a:	f7ff fbbb 	bl	8000ba4 <robot_setBuzzer>
			for(uint32_t i = 0; i < TIME_LEARN_AUTO; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e04c      	b.n	80014ce <main+0xfa>
			{
				robot_setSpeed(SPEED_LEARN_AUTO, -SPEED_LEARN_AUTO);
 8001434:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8001438:	20c8      	movs	r0, #200	; 0xc8
 800143a:	f7ff f9b5 	bl	80007a8 <robot_setSpeed>
				for(uint8_t j = 0; j < NUM_OF_LINE_SENSOR; j++)
 800143e:	2300      	movs	r3, #0
 8001440:	72fb      	strb	r3, [r7, #11]
 8001442:	e03e      	b.n	80014c2 <main+0xee>
				{
					if(sensor_value[j] > maxOfMin[j])
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	4a88      	ldr	r2, [pc, #544]	; (8001668 <main+0x294>)
 8001448:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800144c:	7afb      	ldrb	r3, [r7, #11]
 800144e:	4987      	ldr	r1, [pc, #540]	; (800166c <main+0x298>)
 8001450:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001454:	429a      	cmp	r2, r3
 8001456:	d907      	bls.n	8001468 <main+0x94>
					{
						maxOfMin[j] = sensor_value[j];
 8001458:	7afa      	ldrb	r2, [r7, #11]
 800145a:	7afb      	ldrb	r3, [r7, #11]
 800145c:	4982      	ldr	r1, [pc, #520]	; (8001668 <main+0x294>)
 800145e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001462:	4a82      	ldr	r2, [pc, #520]	; (800166c <main+0x298>)
 8001464:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(sensor_value[j] < minOfMax[j])
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	4a7f      	ldr	r2, [pc, #508]	; (8001668 <main+0x294>)
 800146c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	497f      	ldr	r1, [pc, #508]	; (8001670 <main+0x29c>)
 8001474:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <main+0xb8>
					{
						minOfMax[j] = sensor_value[j];
 800147c:	7afa      	ldrb	r2, [r7, #11]
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	4979      	ldr	r1, [pc, #484]	; (8001668 <main+0x294>)
 8001482:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001486:	4a7a      	ldr	r2, [pc, #488]	; (8001670 <main+0x29c>)
 8001488:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					v_compare[j] = ((minOfMax[j] + maxOfMin[j]) / 2) + calib_weight[j];
 800148c:	7afb      	ldrb	r3, [r7, #11]
 800148e:	4a78      	ldr	r2, [pc, #480]	; (8001670 <main+0x29c>)
 8001490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001494:	4619      	mov	r1, r3
 8001496:	7afb      	ldrb	r3, [r7, #11]
 8001498:	4a74      	ldr	r2, [pc, #464]	; (800166c <main+0x298>)
 800149a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800149e:	440b      	add	r3, r1
 80014a0:	0fda      	lsrs	r2, r3, #31
 80014a2:	4413      	add	r3, r2
 80014a4:	105b      	asrs	r3, r3, #1
 80014a6:	b299      	uxth	r1, r3
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	4a72      	ldr	r2, [pc, #456]	; (8001674 <main+0x2a0>)
 80014ac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	440a      	add	r2, r1
 80014b4:	b291      	uxth	r1, r2
 80014b6:	4a70      	ldr	r2, [pc, #448]	; (8001678 <main+0x2a4>)
 80014b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint8_t j = 0; j < NUM_OF_LINE_SENSOR; j++)
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	3301      	adds	r3, #1
 80014c0:	72fb      	strb	r3, [r7, #11]
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d9bd      	bls.n	8001444 <main+0x70>
			for(uint32_t i = 0; i < TIME_LEARN_AUTO; i++)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4a6a      	ldr	r2, [pc, #424]	; (800167c <main+0x2a8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d9ae      	bls.n	8001434 <main+0x60>
				}
			}
			robot_setSpeed(0, 0);
 80014d6:	2100      	movs	r1, #0
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff f965 	bl	80007a8 <robot_setSpeed>
			run_case = STOP;
 80014de:	4b61      	ldr	r3, [pc, #388]	; (8001664 <main+0x290>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
			break;
 80014e4:	e0bc      	b.n	8001660 <main+0x28c>
		case LEARN_MANUAL:
			robot_setBuzzer(LEARN_MANUAL_TIME_BEEP, DEFAULT_BEEP_NUMS);
 80014e6:	2103      	movs	r1, #3
 80014e8:	20c8      	movs	r0, #200	; 0xc8
 80014ea:	f7ff fb5b 	bl	8000ba4 <robot_setBuzzer>
			for(uint32_t i = 0; i < TIME_LEARN_AUTO; i++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	e047      	b.n	8001584 <main+0x1b0>
			{
				for(uint8_t j = 0; j < NUM_OF_LINE_SENSOR; j++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	70fb      	strb	r3, [r7, #3]
 80014f8:	e03e      	b.n	8001578 <main+0x1a4>
				{
					if(sensor_value[j] > maxOfMin[j])
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	4a5a      	ldr	r2, [pc, #360]	; (8001668 <main+0x294>)
 80014fe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	4959      	ldr	r1, [pc, #356]	; (800166c <main+0x298>)
 8001506:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800150a:	429a      	cmp	r2, r3
 800150c:	d907      	bls.n	800151e <main+0x14a>
					{
						maxOfMin[j] = sensor_value[j];
 800150e:	78fa      	ldrb	r2, [r7, #3]
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	4955      	ldr	r1, [pc, #340]	; (8001668 <main+0x294>)
 8001514:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001518:	4a54      	ldr	r2, [pc, #336]	; (800166c <main+0x298>)
 800151a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(sensor_value[j] < minOfMax[j])
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	4a51      	ldr	r2, [pc, #324]	; (8001668 <main+0x294>)
 8001522:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	4951      	ldr	r1, [pc, #324]	; (8001670 <main+0x29c>)
 800152a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800152e:	429a      	cmp	r2, r3
 8001530:	d207      	bcs.n	8001542 <main+0x16e>
					{
						minOfMax[j] = sensor_value[j];
 8001532:	78fa      	ldrb	r2, [r7, #3]
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	494c      	ldr	r1, [pc, #304]	; (8001668 <main+0x294>)
 8001538:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <main+0x29c>)
 800153e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					v_compare[j] = ((minOfMax[j] + maxOfMin[j]) / 2) + calib_weight[j];
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	4a4a      	ldr	r2, [pc, #296]	; (8001670 <main+0x29c>)
 8001546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800154a:	4619      	mov	r1, r3
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	4a47      	ldr	r2, [pc, #284]	; (800166c <main+0x298>)
 8001550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001554:	440b      	add	r3, r1
 8001556:	0fda      	lsrs	r2, r3, #31
 8001558:	4413      	add	r3, r2
 800155a:	105b      	asrs	r3, r3, #1
 800155c:	b299      	uxth	r1, r3
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	4a44      	ldr	r2, [pc, #272]	; (8001674 <main+0x2a0>)
 8001562:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	440a      	add	r2, r1
 800156a:	b291      	uxth	r1, r2
 800156c:	4a42      	ldr	r2, [pc, #264]	; (8001678 <main+0x2a4>)
 800156e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint8_t j = 0; j < NUM_OF_LINE_SENSOR; j++)
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	3301      	adds	r3, #1
 8001576:	70fb      	strb	r3, [r7, #3]
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d9bd      	bls.n	80014fa <main+0x126>
			for(uint32_t i = 0; i < TIME_LEARN_AUTO; i++)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3301      	adds	r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a3d      	ldr	r2, [pc, #244]	; (800167c <main+0x2a8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d9b3      	bls.n	80014f4 <main+0x120>
				}
			}
			run_case = STOP;
 800158c:	4b35      	ldr	r3, [pc, #212]	; (8001664 <main+0x290>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
			break;
 8001592:	e065      	b.n	8001660 <main+0x28c>
		case RUN_NO_TC:
			if((sensor_mask & MASK_4BIT) == MASK_010)
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <main+0x2ac>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	2b02      	cmp	r3, #2
 800159e:	d106      	bne.n	80015ae <main+0x1da>
			{
				robot_beepLong(RUN_NO_TC_TIME_BEEP);
 80015a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a4:	f7ff fae4 	bl	8000b70 <robot_beepLong>
				pid_enable = 1;
 80015a8:	4b36      	ldr	r3, [pc, #216]	; (8001684 <main+0x2b0>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
			}
			run_case = STOP;
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <main+0x290>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
			break;
 80015b4:	e054      	b.n	8001660 <main+0x28c>
		case RUN_WITH_TC:
			run_with_sensor = 1;
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <main+0x2b4>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
			run_case = STOP;
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <main+0x290>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
			break;
 80015c2:	e04d      	b.n	8001660 <main+0x28c>

		case STOP:
			if(readyToSend)
 80015c4:	4b31      	ldr	r3, [pc, #196]	; (800168c <main+0x2b8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00c      	beq.n	80015e6 <main+0x212>
			{
				readyToSend = 0;
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <main+0x2b8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
				HAL_Delay(100);
 80015d2:	2064      	movs	r0, #100	; 0x64
 80015d4:	f000 fe90 	bl	80022f8 <HAL_Delay>
				prepareToSend();
 80015d8:	f7ff fb2e 	bl	8000c38 <prepareToSend>
				HAL_UART_Receive_IT(&huart1, cmd, SIZE_COMMAND);
 80015dc:	2202      	movs	r2, #2
 80015de:	492c      	ldr	r1, [pc, #176]	; (8001690 <main+0x2bc>)
 80015e0:	482c      	ldr	r0, [pc, #176]	; (8001694 <main+0x2c0>)
 80015e2:	f003 fed2 	bl	800538a <HAL_UART_Receive_IT>
			}
		  	if(readyToAssign)
 80015e6:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <main+0x2c4>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d01a      	beq.n	8001624 <main+0x250>
		  	{
		  		HAL_UART_Receive_IT(&huart1, data, SIZE_DATA);
 80015ee:	2227      	movs	r2, #39	; 0x27
 80015f0:	492a      	ldr	r1, [pc, #168]	; (800169c <main+0x2c8>)
 80015f2:	4828      	ldr	r0, [pc, #160]	; (8001694 <main+0x2c0>)
 80015f4:	f003 fec9 	bl	800538a <HAL_UART_Receive_IT>
		  		HAL_Delay(TIMEOUT_RECEIVING_DATA);
 80015f8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80015fc:	f000 fe7c 	bl	80022f8 <HAL_Delay>
		  		assignData();
 8001600:	f7ff fc2a 	bl	8000e58 <assignData>
		  		HAL_UART_AbortReceive_IT(&huart1);
 8001604:	4823      	ldr	r0, [pc, #140]	; (8001694 <main+0x2c0>)
 8001606:	f003 fee5 	bl	80053d4 <HAL_UART_AbortReceive_IT>
		  		readyToAssign = 0;
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <main+0x2c4>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
			  	HAL_UART_Receive_IT(&huart1, cmd, SIZE_COMMAND);
 8001610:	2202      	movs	r2, #2
 8001612:	491f      	ldr	r1, [pc, #124]	; (8001690 <main+0x2bc>)
 8001614:	481f      	ldr	r0, [pc, #124]	; (8001694 <main+0x2c0>)
 8001616:	f003 feb8 	bl	800538a <HAL_UART_Receive_IT>
				robot_setRGB(1, 0, 1);
 800161a:	2201      	movs	r2, #1
 800161c:	2100      	movs	r1, #0
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff fa82 	bl	8000b28 <robot_setRGB>
		  	}
		  	if(readyToWrite)
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <main+0x2cc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d017      	beq.n	800165c <main+0x288>
		  	{
		  		robot_setRGB(0, 0, 1);
 800162c:	2201      	movs	r2, #1
 800162e:	2100      	movs	r1, #0
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fa79 	bl	8000b28 <robot_setRGB>
		  		robot_writeFlash();
 8001636:	f7ff fd3f 	bl	80010b8 <robot_writeFlash>
		  		HAL_Delay(TIMEOUT_WRITE_FLASH);
 800163a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800163e:	f000 fe5b 	bl	80022f8 <HAL_Delay>
		  		robot_setRGB(1, 0, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	2100      	movs	r1, #0
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff fa6e 	bl	8000b28 <robot_setRGB>
		  		HAL_UART_Receive_IT(&huart1, cmd, SIZE_COMMAND);
 800164c:	2202      	movs	r2, #2
 800164e:	4910      	ldr	r1, [pc, #64]	; (8001690 <main+0x2bc>)
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <main+0x2c0>)
 8001652:	f003 fe9a 	bl	800538a <HAL_UART_Receive_IT>
		  		readyToWrite = 0;
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <main+0x2cc>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
		  	}
		  	break;
 800165c:	bf00      	nop
 800165e:	e6d0      	b.n	8001402 <main+0x2e>
	switch(run_case)
 8001660:	e6cf      	b.n	8001402 <main+0x2e>
 8001662:	bf00      	nop
 8001664:	20000094 	.word	0x20000094
 8001668:	200000a0 	.word	0x200000a0
 800166c:	2000000c 	.word	0x2000000c
 8001670:	20000004 	.word	0x20000004
 8001674:	20000078 	.word	0x20000078
 8001678:	200000a8 	.word	0x200000a8
 800167c:	0007a11f 	.word	0x0007a11f
 8001680:	2000009f 	.word	0x2000009f
 8001684:	200000ae 	.word	0x200000ae
 8001688:	200000af 	.word	0x200000af
 800168c:	200000b0 	.word	0x200000b0
 8001690:	200000e8 	.word	0x200000e8
 8001694:	20000260 	.word	0x20000260
 8001698:	200000b1 	.word	0x200000b1
 800169c:	200000ec 	.word	0x200000ec
 80016a0:	200000b2 	.word	0x200000b2

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	; 0x50
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ae:	2228      	movs	r2, #40	; 0x28
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f004 fccc 	bl	8006050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e2:	2301      	movs	r3, #1
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e6:	2302      	movs	r3, #2
 80016e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 f922 	bl	8003944 <HAL_RCC_OscConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001706:	f000 fb33 	bl	8001d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170a:	230f      	movs	r3, #15
 800170c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2102      	movs	r1, #2
 8001726:	4618      	mov	r0, r3
 8001728:	f002 fb8e 	bl	8003e48 <HAL_RCC_ClockConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001732:	f000 fb1d 	bl	8001d70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001736:	2302      	movs	r3, #2
 8001738:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800173a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800173e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fd3e 	bl	80041c4 <HAL_RCCEx_PeriphCLKConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800174e:	f000 fb0f 	bl	8001d70 <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	3750      	adds	r7, #80	; 0x50
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <MX_ADC1_Init+0xcc>)
 800176e:	4a2f      	ldr	r2, [pc, #188]	; (800182c <MX_ADC1_Init+0xd0>)
 8001770:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <MX_ADC1_Init+0xcc>)
 8001774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001778:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <MX_ADC1_Init+0xcc>)
 800177c:	2201      	movs	r2, #1
 800177e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <MX_ADC1_Init+0xcc>)
 8001782:	2200      	movs	r2, #0
 8001784:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <MX_ADC1_Init+0xcc>)
 8001788:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800178c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <MX_ADC1_Init+0xcc>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <MX_ADC1_Init+0xcc>)
 8001796:	2204      	movs	r2, #4
 8001798:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800179a:	4823      	ldr	r0, [pc, #140]	; (8001828 <MX_ADC1_Init+0xcc>)
 800179c:	f000 fdd0 	bl	8002340 <HAL_ADC_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80017a6:	f000 fae3 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017aa:	2306      	movs	r3, #6
 80017ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80017b2:	2307      	movs	r3, #7
 80017b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	481b      	ldr	r0, [pc, #108]	; (8001828 <MX_ADC1_Init+0xcc>)
 80017bc:	f000 ff92 	bl	80026e4 <HAL_ADC_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017c6:	f000 fad3 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017ca:	2305      	movs	r3, #5
 80017cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017ce:	2302      	movs	r3, #2
 80017d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4814      	ldr	r0, [pc, #80]	; (8001828 <MX_ADC1_Init+0xcc>)
 80017d8:	f000 ff84 	bl	80026e4 <HAL_ADC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80017e2:	f000 fac5 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017e6:	2304      	movs	r3, #4
 80017e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017ea:	2303      	movs	r3, #3
 80017ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <MX_ADC1_Init+0xcc>)
 80017f4:	f000 ff76 	bl	80026e4 <HAL_ADC_ConfigChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80017fe:	f000 fab7 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001802:	2309      	movs	r3, #9
 8001804:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001806:	2304      	movs	r3, #4
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_ADC1_Init+0xcc>)
 8001810:	f000 ff68 	bl	80026e4 <HAL_ADC_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800181a:	f000 faa9 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000114 	.word	0x20000114
 800182c:	40012400 	.word	0x40012400

08001830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	615a      	str	r2, [r3, #20]
 8001850:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <MX_TIM2_Init+0xf0>)
 8001854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001858:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <MX_TIM2_Init+0xf0>)
 800185c:	2247      	movs	r2, #71	; 0x47
 800185e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <MX_TIM2_Init+0xf0>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <MX_TIM2_Init+0xf0>)
 8001868:	f240 32e7 	movw	r2, #999	; 0x3e7
 800186c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <MX_TIM2_Init+0xf0>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <MX_TIM2_Init+0xf0>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800187a:	4829      	ldr	r0, [pc, #164]	; (8001920 <MX_TIM2_Init+0xf0>)
 800187c:	f002 fdfa 	bl	8004474 <HAL_TIM_PWM_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001886:	f000 fa73 	bl	8001d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001892:	f107 0320 	add.w	r3, r7, #32
 8001896:	4619      	mov	r1, r3
 8001898:	4821      	ldr	r0, [pc, #132]	; (8001920 <MX_TIM2_Init+0xf0>)
 800189a:	f003 fc2b 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80018a4:	f000 fa64 	bl	8001d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a8:	2360      	movs	r3, #96	; 0x60
 80018aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	2200      	movs	r2, #0
 80018bc:	4619      	mov	r1, r3
 80018be:	4818      	ldr	r0, [pc, #96]	; (8001920 <MX_TIM2_Init+0xf0>)
 80018c0:	f002 ffba 	bl	8004838 <HAL_TIM_PWM_ConfigChannel>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80018ca:	f000 fa51 	bl	8001d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2204      	movs	r2, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4812      	ldr	r0, [pc, #72]	; (8001920 <MX_TIM2_Init+0xf0>)
 80018d6:	f002 ffaf 	bl	8004838 <HAL_TIM_PWM_ConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018e0:	f000 fa46 	bl	8001d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2208      	movs	r2, #8
 80018e8:	4619      	mov	r1, r3
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <MX_TIM2_Init+0xf0>)
 80018ec:	f002 ffa4 	bl	8004838 <HAL_TIM_PWM_ConfigChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80018f6:	f000 fa3b 	bl	8001d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	220c      	movs	r2, #12
 80018fe:	4619      	mov	r1, r3
 8001900:	4807      	ldr	r0, [pc, #28]	; (8001920 <MX_TIM2_Init+0xf0>)
 8001902:	f002 ff99 	bl	8004838 <HAL_TIM_PWM_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 800190c:	f000 fa30 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <MX_TIM2_Init+0xf0>)
 8001912:	f000 fb43 	bl	8001f9c <HAL_TIM_MspPostInit>

}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000188 	.word	0x20000188

08001924 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <MX_TIM3_Init+0x94>)
 8001942:	4a1e      	ldr	r2, [pc, #120]	; (80019bc <MX_TIM3_Init+0x98>)
 8001944:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_TIM3_Init+0x94>)
 8001948:	2247      	movs	r2, #71	; 0x47
 800194a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_TIM3_Init+0x94>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <MX_TIM3_Init+0x94>)
 8001954:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001958:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_TIM3_Init+0x94>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_TIM3_Init+0x94>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001966:	4814      	ldr	r0, [pc, #80]	; (80019b8 <MX_TIM3_Init+0x94>)
 8001968:	f002 fce2 	bl	8004330 <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001972:	f000 f9fd 	bl	8001d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	4619      	mov	r1, r3
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <MX_TIM3_Init+0x94>)
 8001984:	f003 f81a 	bl	80049bc <HAL_TIM_ConfigClockSource>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800198e:	f000 f9ef 	bl	8001d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800199a:	463b      	mov	r3, r7
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <MX_TIM3_Init+0x94>)
 80019a0:	f003 fba8 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019aa:	f000 f9e1 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200001d0 	.word	0x200001d0
 80019bc:	40000400 	.word	0x40000400

080019c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <MX_TIM4_Init+0x94>)
 80019de:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <MX_TIM4_Init+0x98>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80019e2:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <MX_TIM4_Init+0x94>)
 80019e4:	2247      	movs	r2, #71	; 0x47
 80019e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_TIM4_Init+0x94>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <MX_TIM4_Init+0x94>)
 80019f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <MX_TIM4_Init+0x94>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_TIM4_Init+0x94>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a02:	4814      	ldr	r0, [pc, #80]	; (8001a54 <MX_TIM4_Init+0x94>)
 8001a04:	f002 fc94 	bl	8004330 <HAL_TIM_Base_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a0e:	f000 f9af 	bl	8001d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <MX_TIM4_Init+0x94>)
 8001a20:	f002 ffcc 	bl	80049bc <HAL_TIM_ConfigClockSource>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001a2a:	f000 f9a1 	bl	8001d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a36:	463b      	mov	r3, r7
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4806      	ldr	r0, [pc, #24]	; (8001a54 <MX_TIM4_Init+0x94>)
 8001a3c:	f003 fb5a 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001a46:	f000 f993 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000218 	.word	0x20000218
 8001a58:	40000800 	.word	0x40000800

08001a5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_USART1_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a94:	f003 fb9e 	bl	80051d4 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f000 f967 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000260 	.word	0x20000260
 8001aac:	40013800 	.word	0x40013800

08001ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_DMA_Init+0x38>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <MX_DMA_Init+0x38>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6153      	str	r3, [r2, #20]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_DMA_Init+0x38>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	200b      	movs	r0, #11
 8001ad4:	f001 f8b5 	bl	8002c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ad8:	200b      	movs	r0, #11
 8001ada:	f001 f8ce 	bl	8002c7a <HAL_NVIC_EnableIRQ>

}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000

08001aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b00:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a40      	ldr	r2, [pc, #256]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b06:	f043 0310 	orr.w	r3, r3, #16
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b18:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a3a      	ldr	r2, [pc, #232]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b1e:	f043 0320 	orr.w	r3, r3, #32
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <MX_GPIO_Init+0x11c>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|B_Pin|G_Pin
 8001b60:	2200      	movs	r2, #0
 8001b62:	f24e 4114 	movw	r1, #58388	; 0xe414
 8001b66:	4829      	ldr	r0, [pc, #164]	; (8001c0c <MX_GPIO_Init+0x120>)
 8001b68:	f001 fed3 	bl	8003912 <HAL_GPIO_WritePin>
                          |R_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b72:	4827      	ldr	r0, [pc, #156]	; (8001c10 <MX_GPIO_Init+0x124>)
 8001b74:	f001 fecd 	bl	8003912 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BT3_Pin */
  GPIO_InitStruct.Pin = BT3_Pin;
 8001b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT3_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4821      	ldr	r0, [pc, #132]	; (8001c14 <MX_GPIO_Init+0x128>)
 8001b8e:	f001 fd25 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BT2_Pin BT4_Pin */
  GPIO_InitStruct.Pin = BT2_Pin|BT4_Pin;
 8001b92:	f248 0380 	movw	r3, #32896	; 0x8080
 8001b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481a      	ldr	r0, [pc, #104]	; (8001c10 <MX_GPIO_Init+0x124>)
 8001ba8:	f001 fd18 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BT1_Pin */
  GPIO_InitStruct.Pin = BT1_Pin;
 8001bac:	2301      	movs	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT1_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4813      	ldr	r0, [pc, #76]	; (8001c0c <MX_GPIO_Init+0x120>)
 8001bc0:	f001 fd0c 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin B_Pin G_Pin
                           R_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|B_Pin|G_Pin
 8001bc4:	f24e 4314 	movw	r3, #58388	; 0xe414
 8001bc8:	613b      	str	r3, [r7, #16]
                          |R_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <MX_GPIO_Init+0x120>)
 8001bde:	f001 fcfd 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8001be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_GPIO_Init+0x124>)
 8001bfc:	f001 fcee 	bl	80035dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010c00 	.word	0x40010c00
 8001c10:	40010800 	.word	0x40010800
 8001c14:	40011000 	.word	0x40011000

08001c18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a3f      	ldr	r2, [pc, #252]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c2a:	f000 fb49 	bl	80022c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a3d      	ldr	r2, [pc, #244]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d145      	bne.n	8001cc4 <HAL_TIM_PeriodElapsedCallback+0xac>
	if(pid_enable == 1)
 8001c38:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d134      	bne.n	8001caa <HAL_TIM_PeriodElapsedCallback+0x92>
	{
		robot_setRGB(0, 1, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2101      	movs	r1, #1
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7fe ff6f 	bl	8000b28 <robot_setRGB>
		if(sensor_value[1] > v_compare[1])
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001c4c:	885a      	ldrh	r2, [r3, #2]
 8001c4e:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001c50:	885b      	ldrh	r3, [r3, #2]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d91f      	bls.n	8001c96 <HAL_TIM_PeriodElapsedCallback+0x7e>
		{
			robot_setParam(targetSpeed_2, kP_2, kD_2);
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	4a38      	ldr	r2, [pc, #224]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001c5c:	6811      	ldr	r1, [r2, #0]
 8001c5e:	4a38      	ldr	r2, [pc, #224]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fd84 	bl	8000770 <robot_setParam>
			if(speed < targetSpeed_2)
 8001c68:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	da0b      	bge.n	8001c90 <HAL_TIM_PeriodElapsedCallback+0x78>
			{
				speed += accel_2;
 8001c78:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001c8e:	801a      	strh	r2, [r3, #0]
			}
			robot_PIDCalib();
 8001c90:	f7fe fe3c 	bl	800090c <robot_PIDCalib>
 8001c94:	e016      	b.n	8001cc4 <HAL_TIM_PeriodElapsedCallback+0xac>
		}
		else
		{
			robot_setParam(targetSpeed_1, kP_1, kD_1);
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	4a2d      	ldr	r2, [pc, #180]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001c9c:	6811      	ldr	r1, [r2, #0]
 8001c9e:	4a2d      	ldr	r2, [pc, #180]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fd64 	bl	8000770 <robot_setParam>
 8001ca8:	e00c      	b.n	8001cc4 <HAL_TIM_PeriodElapsedCallback+0xac>
		}
	}
	else
	{
		speed = 0;
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	801a      	strh	r2, [r3, #0]
		left_speed = 0;
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
		right_speed = 0;
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	801a      	strh	r2, [r3, #0]
		robot_setSpeed(0, 0);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f7fe fd72 	bl	80007a8 <robot_setSpeed>
	}
  }
  if (htim->Instance == TIM4) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d125      	bne.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0x102>
	button_handle();
 8001cce:	f7ff fabb 	bl	8001248 <button_handle>
	sensor_mask = sensor_writeLED();
 8001cd2:	f7fe fee1 	bl	8000a98 <sensor_writeLED>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001cdc:	701a      	strb	r2, [r3, #0]
//	robotDetectCross();
	if((sensor_mask & MASK_4BIT) == MASK_111)
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	2b07      	cmp	r3, #7
 8001ce8:	d107      	bne.n	8001cfa <HAL_TIM_PeriodElapsedCallback+0xe2>
	{
		pid_enable = 0;
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
		robot_setRGB(0, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7fe ff17 	bl	8000b28 <robot_setRGB>
	}
	if(run_with_sensor == 1)
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10b      	bne.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0x102>
	{
		if(sensor_value[3] < gate_sensor_value)
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001d04:	88da      	ldrh	r2, [r3, #6]
 8001d06:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d205      	bcs.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0x102>
		{
			pid_enable = 1;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
			run_with_sensor = 0;
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
		}
	}
  }
  /* USER CODE END Callback 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	200000ae 	.word	0x200000ae
 8001d30:	200000a0 	.word	0x200000a0
 8001d34:	200000a8 	.word	0x200000a8
 8001d38:	20000074 	.word	0x20000074
 8001d3c:	2000006c 	.word	0x2000006c
 8001d40:	20000070 	.word	0x20000070
 8001d44:	2000009a 	.word	0x2000009a
 8001d48:	20000076 	.word	0x20000076
 8001d4c:	20000068 	.word	0x20000068
 8001d50:	20000060 	.word	0x20000060
 8001d54:	20000064 	.word	0x20000064
 8001d58:	20000096 	.word	0x20000096
 8001d5c:	20000098 	.word	0x20000098
 8001d60:	40000800 	.word	0x40000800
 8001d64:	2000009f 	.word	0x2000009f
 8001d68:	200000af 	.word	0x200000af
 8001d6c:	2000007e 	.word	0x2000007e

08001d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d74:	b672      	cpsid	i
}
 8001d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <Error_Handler+0x8>
	...

08001d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6193      	str	r3, [r2, #24]
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	61d3      	str	r3, [r2, #28]
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_MspInit+0x5c>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_MspInit+0x60>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_MspInit+0x60>)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000

08001de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0318 	add.w	r3, r7, #24
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a33      	ldr	r2, [pc, #204]	; (8001ec8 <HAL_ADC_MspInit+0xe8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d15f      	bne.n	8001ec0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e00:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_ADC_MspInit+0xec>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a31      	ldr	r2, [pc, #196]	; (8001ecc <HAL_ADC_MspInit+0xec>)
 8001e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <HAL_ADC_MspInit+0xec>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <HAL_ADC_MspInit+0xec>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ecc <HAL_ADC_MspInit+0xec>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_ADC_MspInit+0xec>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_ADC_MspInit+0xec>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a25      	ldr	r2, [pc, #148]	; (8001ecc <HAL_ADC_MspInit+0xec>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_ADC_MspInit+0xec>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001e48:	2370      	movs	r3, #112	; 0x70
 8001e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	4619      	mov	r1, r3
 8001e56:	481e      	ldr	r0, [pc, #120]	; (8001ed0 <HAL_ADC_MspInit+0xf0>)
 8001e58:	f001 fbc0 	bl	80035dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e60:	2303      	movs	r3, #3
 8001e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 0318 	add.w	r3, r7, #24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	481a      	ldr	r0, [pc, #104]	; (8001ed4 <HAL_ADC_MspInit+0xf4>)
 8001e6c:	f001 fbb6 	bl	80035dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_ADC_MspInit+0xf8>)
 8001e72:	4a1a      	ldr	r2, [pc, #104]	; (8001edc <HAL_ADC_MspInit+0xfc>)
 8001e74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_ADC_MspInit+0xf8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7c:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_ADC_MspInit+0xf8>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_ADC_MspInit+0xf8>)
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_ADC_MspInit+0xf8>)
 8001e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_ADC_MspInit+0xf8>)
 8001e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_ADC_MspInit+0xf8>)
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_ADC_MspInit+0xf8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ea4:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <HAL_ADC_MspInit+0xf8>)
 8001ea6:	f000 fef7 	bl	8002c98 <HAL_DMA_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001eb0:	f7ff ff5e 	bl	8001d70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_ADC_MspInit+0xf8>)
 8001eb8:	621a      	str	r2, [r3, #32]
 8001eba:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <HAL_ADC_MspInit+0xf8>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3728      	adds	r7, #40	; 0x28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40012400 	.word	0x40012400
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010800 	.word	0x40010800
 8001ed4:	40010c00 	.word	0x40010c00
 8001ed8:	20000144 	.word	0x20000144
 8001edc:	40020008 	.word	0x40020008

08001ee0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d10b      	bne.n	8001f0a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_TIM_PWM_MspInit+0x34>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_TIM_PWM_MspInit+0x34>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_TIM_PWM_MspInit+0x34>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	40021000 	.word	0x40021000

08001f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1a      	ldr	r2, [pc, #104]	; (8001f90 <HAL_TIM_Base_MspInit+0x78>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d114      	bne.n	8001f54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_TIM_Base_MspInit+0x7c>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_TIM_Base_MspInit+0x7c>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	61d3      	str	r3, [r2, #28]
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_TIM_Base_MspInit+0x7c>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	201d      	movs	r0, #29
 8001f48:	f000 fe7b 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f4c:	201d      	movs	r0, #29
 8001f4e:	f000 fe94 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f52:	e018      	b.n	8001f86 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_TIM_Base_MspInit+0x80>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d113      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_TIM_Base_MspInit+0x7c>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <HAL_TIM_Base_MspInit+0x7c>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	61d3      	str	r3, [r2, #28]
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_TIM_Base_MspInit+0x7c>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	201e      	movs	r0, #30
 8001f7c:	f000 fe61 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f80:	201e      	movs	r0, #30
 8001f82:	f000 fe7a 	bl	8002c7a <HAL_NVIC_EnableIRQ>
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40000800 	.word	0x40000800

08001f9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fba:	d117      	bne.n	8001fec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_TIM_MspPostInit+0x58>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <HAL_TIM_MspPostInit+0x58>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_TIM_MspPostInit+0x58>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <HAL_TIM_MspPostInit+0x5c>)
 8001fe8:	f001 faf8 	bl	80035dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40010800 	.word	0x40010800

08001ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a20      	ldr	r2, [pc, #128]	; (8002098 <HAL_UART_MspInit+0x9c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d139      	bne.n	8002090 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <HAL_UART_MspInit+0xa0>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_UART_MspInit+0xa0>)
 8002022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_UART_MspInit+0xa0>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_UART_MspInit+0xa0>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_UART_MspInit+0xa0>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_UART_MspInit+0xa0>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800204c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 0310 	add.w	r3, r7, #16
 800205e:	4619      	mov	r1, r3
 8002060:	480f      	ldr	r0, [pc, #60]	; (80020a0 <HAL_UART_MspInit+0xa4>)
 8002062:	f001 fabb 	bl	80035dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	4619      	mov	r1, r3
 800207a:	4809      	ldr	r0, [pc, #36]	; (80020a0 <HAL_UART_MspInit+0xa4>)
 800207c:	f001 faae 	bl	80035dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	2025      	movs	r0, #37	; 0x25
 8002086:	f000 fddc 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800208a:	2025      	movs	r0, #37	; 0x25
 800208c:	f000 fdf5 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40013800 	.word	0x40013800
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010800 	.word	0x40010800

080020a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	; 0x30
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <HAL_InitTick+0xd0>)
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	4a2d      	ldr	r2, [pc, #180]	; (8002174 <HAL_InitTick+0xd0>)
 80020c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020c4:	6193      	str	r3, [r2, #24]
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_InitTick+0xd0>)
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020d2:	f107 020c 	add.w	r2, r7, #12
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 f823 	bl	8004128 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020e2:	f002 f80d 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 80020e6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	4a23      	ldr	r2, [pc, #140]	; (8002178 <HAL_InitTick+0xd4>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	0c9b      	lsrs	r3, r3, #18
 80020f2:	3b01      	subs	r3, #1
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_InitTick+0xd8>)
 80020f8:	4a21      	ldr	r2, [pc, #132]	; (8002180 <HAL_InitTick+0xdc>)
 80020fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <HAL_InitTick+0xd8>)
 80020fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002102:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_InitTick+0xd8>)
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_InitTick+0xd8>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_InitTick+0xd8>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_InitTick+0xd8>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800211c:	4817      	ldr	r0, [pc, #92]	; (800217c <HAL_InitTick+0xd8>)
 800211e:	f002 f907 	bl	8004330 <HAL_TIM_Base_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002128:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11b      	bne.n	8002168 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002130:	4812      	ldr	r0, [pc, #72]	; (800217c <HAL_InitTick+0xd8>)
 8002132:	f002 f94d 	bl	80043d0 <HAL_TIM_Base_Start_IT>
 8002136:	4603      	mov	r3, r0
 8002138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800213c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002140:	2b00      	cmp	r3, #0
 8002142:	d111      	bne.n	8002168 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002144:	2019      	movs	r0, #25
 8002146:	f000 fd98 	bl	8002c7a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d808      	bhi.n	8002162 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002150:	2200      	movs	r2, #0
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	2019      	movs	r0, #25
 8002156:	f000 fd74 	bl	8002c42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_InitTick+0xe0>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e002      	b.n	8002168 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002168:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800216c:	4618      	mov	r0, r3
 800216e:	3730      	adds	r7, #48	; 0x30
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	431bde83 	.word	0x431bde83
 800217c:	200002a8 	.word	0x200002a8
 8002180:	40012c00 	.word	0x40012c00
 8002184:	2000002c 	.word	0x2000002c

08002188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800218c:	e7fe      	b.n	800218c <NMI_Handler+0x4>

0800218e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002192:	e7fe      	b.n	8002192 <HardFault_Handler+0x4>

08002194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002198:	e7fe      	b.n	8002198 <MemManage_Handler+0x4>

0800219a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219e:	e7fe      	b.n	800219e <BusFault_Handler+0x4>

080021a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <UsageFault_Handler+0x4>

080021a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
	...

080021d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <DMA1_Channel1_IRQHandler+0x10>)
 80021de:	f000 fec9 	bl	8002f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000144 	.word	0x20000144

080021ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <TIM1_UP_IRQHandler+0x10>)
 80021f2:	f002 fa31 	bl	8004658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200002a8 	.word	0x200002a8

08002200 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIM3_IRQHandler+0x10>)
 8002206:	f002 fa27 	bl	8004658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200001d0 	.word	0x200001d0

08002214 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM4_IRQHandler+0x10>)
 800221a:	f002 fa1d 	bl	8004658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000218 	.word	0x20000218

08002228 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <USART1_IRQHandler+0x10>)
 800222e:	f003 f983 	bl	8005538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000260 	.word	0x20000260

0800223c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002248:	f7ff fff8 	bl	800223c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800224c:	480b      	ldr	r0, [pc, #44]	; (800227c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800224e:	490c      	ldr	r1, [pc, #48]	; (8002280 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002264:	4c09      	ldr	r4, [pc, #36]	; (800228c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002272:	f003 fef5 	bl	8006060 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002276:	f7ff f8ad 	bl	80013d4 <main>
  bx lr
 800227a:	4770      	bx	lr
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002284:	080060f4 	.word	0x080060f4
  ldr r2, =_sbss
 8002288:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 800228c:	20000318 	.word	0x20000318

08002290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC1_2_IRQHandler>
	...

08002294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_Init+0x28>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_Init+0x28>)
 800229e:	f043 0310 	orr.w	r3, r3, #16
 80022a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 fcc1 	bl	8002c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	200f      	movs	r0, #15
 80022ac:	f7ff fefa 	bl	80020a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7ff fd64 	bl	8001d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40022000 	.word	0x40022000

080022c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_IncTick+0x1c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_IncTick+0x20>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	4a03      	ldr	r2, [pc, #12]	; (80022e0 <HAL_IncTick+0x20>)
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	20000030 	.word	0x20000030
 80022e0:	200002f0 	.word	0x200002f0

080022e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <HAL_GetTick+0x10>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	200002f0 	.word	0x200002f0

080022f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff fff0 	bl	80022e4 <HAL_GetTick>
 8002304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d005      	beq.n	800231e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_Delay+0x44>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800231e:	bf00      	nop
 8002320:	f7ff ffe0 	bl	80022e4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	429a      	cmp	r2, r3
 800232e:	d8f7      	bhi.n	8002320 <HAL_Delay+0x28>
  {
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000030 	.word	0x20000030

08002340 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e0be      	b.n	80024e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fd2e 	bl	8001de0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 faff 	bl	8002988 <ADC_ConversionStop_Disable>
 800238a:	4603      	mov	r3, r0
 800238c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 8099 	bne.w	80024ce <HAL_ADC_Init+0x18e>
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 8095 	bne.w	80024ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ac:	f023 0302 	bic.w	r3, r3, #2
 80023b0:	f043 0202 	orr.w	r2, r3, #2
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	7b1b      	ldrb	r3, [r3, #12]
 80023c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d8:	d003      	beq.n	80023e2 <HAL_ADC_Init+0xa2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <HAL_ADC_Init+0xa8>
 80023e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e6:	e000      	b.n	80023ea <HAL_ADC_Init+0xaa>
 80023e8:	2300      	movs	r3, #0
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7d1b      	ldrb	r3, [r3, #20]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d119      	bne.n	800242c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7b1b      	ldrb	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	3b01      	subs	r3, #1
 8002406:	035a      	lsls	r2, r3, #13
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	e00b      	b.n	800242c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f043 0201 	orr.w	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	430a      	orrs	r2, r1
 800243e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <HAL_ADC_Init+0x1a8>)
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245c:	d003      	beq.n	8002466 <HAL_ADC_Init+0x126>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d104      	bne.n	8002470 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	3b01      	subs	r3, #1
 800246c:	051b      	lsls	r3, r3, #20
 800246e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	430a      	orrs	r2, r1
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_ADC_Init+0x1ac>)
 800248c:	4013      	ands	r3, r2
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	429a      	cmp	r2, r3
 8002492:	d10b      	bne.n	80024ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024aa:	e018      	b.n	80024de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	f023 0312 	bic.w	r3, r3, #18
 80024b4:	f043 0210 	orr.w	r2, r3, #16
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024cc:	e007      	b.n	80024de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	f043 0210 	orr.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024de:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	ffe1f7fd 	.word	0xffe1f7fd
 80024ec:	ff1f0efe 	.word	0xff1f0efe

080024f0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a64      	ldr	r2, [pc, #400]	; (8002698 <HAL_ADC_Start_DMA+0x1a8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_ADC_Start_DMA+0x24>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a63      	ldr	r2, [pc, #396]	; (800269c <HAL_ADC_Start_DMA+0x1ac>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d106      	bne.n	8002522 <HAL_ADC_Start_DMA+0x32>
 8002514:	4b60      	ldr	r3, [pc, #384]	; (8002698 <HAL_ADC_Start_DMA+0x1a8>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 80b3 	bne.w	8002688 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_ADC_Start_DMA+0x40>
 800252c:	2302      	movs	r3, #2
 800252e:	e0ae      	b.n	800268e <HAL_ADC_Start_DMA+0x19e>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f9cb 	bl	80028d4 <ADC_Enable>
 800253e:	4603      	mov	r3, r0
 8002540:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002542:	7dfb      	ldrb	r3, [r7, #23]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 809a 	bne.w	800267e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002552:	f023 0301 	bic.w	r3, r3, #1
 8002556:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a4e      	ldr	r2, [pc, #312]	; (800269c <HAL_ADC_Start_DMA+0x1ac>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d105      	bne.n	8002574 <HAL_ADC_Start_DMA+0x84>
 8002568:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <HAL_ADC_Start_DMA+0x1a8>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d115      	bne.n	80025a0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258a:	2b00      	cmp	r3, #0
 800258c:	d026      	beq.n	80025dc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002596:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800259e:	e01d      	b.n	80025dc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a39      	ldr	r2, [pc, #228]	; (8002698 <HAL_ADC_Start_DMA+0x1a8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d004      	beq.n	80025c0 <HAL_ADC_Start_DMA+0xd0>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a38      	ldr	r2, [pc, #224]	; (800269c <HAL_ADC_Start_DMA+0x1ac>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10d      	bne.n	80025dc <HAL_ADC_Start_DMA+0xec>
 80025c0:	4b35      	ldr	r3, [pc, #212]	; (8002698 <HAL_ADC_Start_DMA+0x1a8>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	f023 0206 	bic.w	r2, r3, #6
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80025f4:	e002      	b.n	80025fc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a25      	ldr	r2, [pc, #148]	; (80026a0 <HAL_ADC_Start_DMA+0x1b0>)
 800260a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a24      	ldr	r2, [pc, #144]	; (80026a4 <HAL_ADC_Start_DMA+0x1b4>)
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a23      	ldr	r2, [pc, #140]	; (80026a8 <HAL_ADC_Start_DMA+0x1b8>)
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0202 	mvn.w	r2, #2
 8002624:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002634:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a18      	ldr	r0, [r3, #32]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	334c      	adds	r3, #76	; 0x4c
 8002640:	4619      	mov	r1, r3
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f000 fb81 	bl	8002d4c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002654:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002658:	d108      	bne.n	800266c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002668:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800266a:	e00f      	b.n	800268c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800267a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800267c:	e006      	b.n	800268c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002686:	e001      	b.n	800268c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800268c:	7dfb      	ldrb	r3, [r7, #23]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40012400 	.word	0x40012400
 800269c:	40012800 	.word	0x40012800
 80026a0:	08002a0b 	.word	0x08002a0b
 80026a4:	08002a87 	.word	0x08002a87
 80026a8:	08002aa3 	.word	0x08002aa3

080026ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x20>
 8002700:	2302      	movs	r3, #2
 8002702:	e0dc      	b.n	80028be <HAL_ADC_ConfigChannel+0x1da>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b06      	cmp	r3, #6
 8002712:	d81c      	bhi.n	800274e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	3b05      	subs	r3, #5
 8002726:	221f      	movs	r2, #31
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	4019      	ands	r1, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	3b05      	subs	r3, #5
 8002740:	fa00 f203 	lsl.w	r2, r0, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	635a      	str	r2, [r3, #52]	; 0x34
 800274c:	e03c      	b.n	80027c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d81c      	bhi.n	8002790 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	3b23      	subs	r3, #35	; 0x23
 8002768:	221f      	movs	r2, #31
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	4019      	ands	r1, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	3b23      	subs	r3, #35	; 0x23
 8002782:	fa00 f203 	lsl.w	r2, r0, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
 800278e:	e01b      	b.n	80027c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	3b41      	subs	r3, #65	; 0x41
 80027a2:	221f      	movs	r2, #31
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	4019      	ands	r1, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	3b41      	subs	r3, #65	; 0x41
 80027bc:	fa00 f203 	lsl.w	r2, r0, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	d91c      	bls.n	800280a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68d9      	ldr	r1, [r3, #12]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	3b1e      	subs	r3, #30
 80027e2:	2207      	movs	r2, #7
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	4019      	ands	r1, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6898      	ldr	r0, [r3, #8]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	3b1e      	subs	r3, #30
 80027fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]
 8002808:	e019      	b.n	800283e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6919      	ldr	r1, [r3, #16]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	2207      	movs	r2, #7
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	4019      	ands	r1, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6898      	ldr	r0, [r3, #8]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	fa00 f203 	lsl.w	r2, r0, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b10      	cmp	r3, #16
 8002844:	d003      	beq.n	800284e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800284a:	2b11      	cmp	r3, #17
 800284c:	d132      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d125      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d126      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002874:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b10      	cmp	r3, #16
 800287c:	d11a      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_ADC_ConfigChannel+0x1e8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	0c9a      	lsrs	r2, r3, #18
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002894:	e002      	b.n	800289c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	3b01      	subs	r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f9      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x1b2>
 80028a2:	e007      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	40012400 	.word	0x40012400
 80028cc:	20000028 	.word	0x20000028
 80028d0:	431bde83 	.word	0x431bde83

080028d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d040      	beq.n	8002974 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002902:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <ADC_Enable+0xac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <ADC_Enable+0xb0>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002910:	e002      	b.n	8002918 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3b01      	subs	r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f9      	bne.n	8002912 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800291e:	f7ff fce1 	bl	80022e4 <HAL_GetTick>
 8002922:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002924:	e01f      	b.n	8002966 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002926:	f7ff fcdd 	bl	80022e4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d918      	bls.n	8002966 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d011      	beq.n	8002966 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	f043 0210 	orr.w	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e007      	b.n	8002976 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d1d8      	bne.n	8002926 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000028 	.word	0x20000028
 8002984:	431bde83 	.word	0x431bde83

08002988 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d12e      	bne.n	8002a00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029b2:	f7ff fc97 	bl	80022e4 <HAL_GetTick>
 80029b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029b8:	e01b      	b.n	80029f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029ba:	f7ff fc93 	bl	80022e4 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d914      	bls.n	80029f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d10d      	bne.n	80029f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	f043 0210 	orr.w	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f043 0201 	orr.w	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e007      	b.n	8002a02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d0dc      	beq.n	80029ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d127      	bne.n	8002a74 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a3a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a3e:	d115      	bne.n	8002a6c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d111      	bne.n	8002a6c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff fe1d 	bl	80026ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a72:	e004      	b.n	8002a7e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff fe12 	bl	80026be <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f043 0204 	orr.w	r2, r3, #4
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7ff fe01 	bl	80026d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4906      	ldr	r1, [pc, #24]	; (8002b70 <__NVIC_EnableIRQ+0x34>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100

08002b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	db0a      	blt.n	8002b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	490c      	ldr	r1, [pc, #48]	; (8002bc0 <__NVIC_SetPriority+0x4c>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b9c:	e00a      	b.n	8002bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4908      	ldr	r1, [pc, #32]	; (8002bc4 <__NVIC_SetPriority+0x50>)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3b04      	subs	r3, #4
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	761a      	strb	r2, [r3, #24]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f1c3 0307 	rsb	r3, r3, #7
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	bf28      	it	cs
 8002be6:	2304      	movcs	r3, #4
 8002be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d902      	bls.n	8002bf8 <NVIC_EncodePriority+0x30>
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3b03      	subs	r3, #3
 8002bf6:	e000      	b.n	8002bfa <NVIC_EncodePriority+0x32>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43d9      	mvns	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	4313      	orrs	r3, r2
         );
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	; 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ff4f 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c54:	f7ff ff64 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	6978      	ldr	r0, [r7, #20]
 8002c60:	f7ff ffb2 	bl	8002bc8 <NVIC_EncodePriority>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff81 	bl	8002b74 <__NVIC_SetPriority>
}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff57 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e043      	b.n	8002d36 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_DMA_Init+0xa8>)
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_DMA_Init+0xac>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	009a      	lsls	r2, r3, #2
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <HAL_DMA_Init+0xb0>)
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ce2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ce6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	bffdfff8 	.word	0xbffdfff8
 8002d44:	cccccccd 	.word	0xcccccccd
 8002d48:	40020000 	.word	0x40020000

08002d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_DMA_Start_IT+0x20>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e04b      	b.n	8002e04 <HAL_DMA_Start_IT+0xb8>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d13a      	bne.n	8002df6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f9eb 	bl	8003180 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 020e 	orr.w	r2, r2, #14
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e00f      	b.n	8002de4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0204 	bic.w	r2, r2, #4
 8002dd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 020a 	orr.w	r2, r2, #10
 8002de2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	e005      	b.n	8002e02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d008      	beq.n	8002e36 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2204      	movs	r2, #4
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e020      	b.n	8002e78 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 020e 	bic.w	r2, r2, #14
 8002e44:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d005      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
 8002ea6:	e051      	b.n	8002f4c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 020e 	bic.w	r2, r2, #14
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_DMA_Abort_IT+0xd4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d029      	beq.n	8002f26 <HAL_DMA_Abort_IT+0xa2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_DMA_Abort_IT+0xd8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d022      	beq.n	8002f22 <HAL_DMA_Abort_IT+0x9e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1f      	ldr	r2, [pc, #124]	; (8002f60 <HAL_DMA_Abort_IT+0xdc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01a      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x98>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <HAL_DMA_Abort_IT+0xe0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d012      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x92>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <HAL_DMA_Abort_IT+0xe4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00a      	beq.n	8002f10 <HAL_DMA_Abort_IT+0x8c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1b      	ldr	r2, [pc, #108]	; (8002f6c <HAL_DMA_Abort_IT+0xe8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d102      	bne.n	8002f0a <HAL_DMA_Abort_IT+0x86>
 8002f04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f08:	e00e      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f0e:	e00b      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f14:	e008      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f1a:	e005      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f20:	e002      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f22:	2310      	movs	r3, #16
 8002f24:	e000      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f26:	2301      	movs	r3, #1
 8002f28:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <HAL_DMA_Abort_IT+0xec>)
 8002f2a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
    } 
  }
  return status;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40020008 	.word	0x40020008
 8002f5c:	4002001c 	.word	0x4002001c
 8002f60:	40020030 	.word	0x40020030
 8002f64:	40020044 	.word	0x40020044
 8002f68:	40020058 	.word	0x40020058
 8002f6c:	4002006c 	.word	0x4002006c
 8002f70:	40020000 	.word	0x40020000

08002f74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	2204      	movs	r2, #4
 8002f92:	409a      	lsls	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d04f      	beq.n	800303c <HAL_DMA_IRQHandler+0xc8>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d04a      	beq.n	800303c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0204 	bic.w	r2, r2, #4
 8002fc2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a66      	ldr	r2, [pc, #408]	; (8003164 <HAL_DMA_IRQHandler+0x1f0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d029      	beq.n	8003022 <HAL_DMA_IRQHandler+0xae>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a65      	ldr	r2, [pc, #404]	; (8003168 <HAL_DMA_IRQHandler+0x1f4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d022      	beq.n	800301e <HAL_DMA_IRQHandler+0xaa>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a63      	ldr	r2, [pc, #396]	; (800316c <HAL_DMA_IRQHandler+0x1f8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01a      	beq.n	8003018 <HAL_DMA_IRQHandler+0xa4>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a62      	ldr	r2, [pc, #392]	; (8003170 <HAL_DMA_IRQHandler+0x1fc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d012      	beq.n	8003012 <HAL_DMA_IRQHandler+0x9e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a60      	ldr	r2, [pc, #384]	; (8003174 <HAL_DMA_IRQHandler+0x200>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00a      	beq.n	800300c <HAL_DMA_IRQHandler+0x98>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a5f      	ldr	r2, [pc, #380]	; (8003178 <HAL_DMA_IRQHandler+0x204>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d102      	bne.n	8003006 <HAL_DMA_IRQHandler+0x92>
 8003000:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003004:	e00e      	b.n	8003024 <HAL_DMA_IRQHandler+0xb0>
 8003006:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800300a:	e00b      	b.n	8003024 <HAL_DMA_IRQHandler+0xb0>
 800300c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003010:	e008      	b.n	8003024 <HAL_DMA_IRQHandler+0xb0>
 8003012:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003016:	e005      	b.n	8003024 <HAL_DMA_IRQHandler+0xb0>
 8003018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800301c:	e002      	b.n	8003024 <HAL_DMA_IRQHandler+0xb0>
 800301e:	2340      	movs	r3, #64	; 0x40
 8003020:	e000      	b.n	8003024 <HAL_DMA_IRQHandler+0xb0>
 8003022:	2304      	movs	r3, #4
 8003024:	4a55      	ldr	r2, [pc, #340]	; (800317c <HAL_DMA_IRQHandler+0x208>)
 8003026:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8094 	beq.w	800315a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800303a:	e08e      	b.n	800315a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	2202      	movs	r2, #2
 8003042:	409a      	lsls	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d056      	beq.n	80030fa <HAL_DMA_IRQHandler+0x186>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d051      	beq.n	80030fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 020a 	bic.w	r2, r2, #10
 8003072:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a38      	ldr	r2, [pc, #224]	; (8003164 <HAL_DMA_IRQHandler+0x1f0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d029      	beq.n	80030da <HAL_DMA_IRQHandler+0x166>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a37      	ldr	r2, [pc, #220]	; (8003168 <HAL_DMA_IRQHandler+0x1f4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x162>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a35      	ldr	r2, [pc, #212]	; (800316c <HAL_DMA_IRQHandler+0x1f8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01a      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x15c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a34      	ldr	r2, [pc, #208]	; (8003170 <HAL_DMA_IRQHandler+0x1fc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d012      	beq.n	80030ca <HAL_DMA_IRQHandler+0x156>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a32      	ldr	r2, [pc, #200]	; (8003174 <HAL_DMA_IRQHandler+0x200>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00a      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x150>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a31      	ldr	r2, [pc, #196]	; (8003178 <HAL_DMA_IRQHandler+0x204>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d102      	bne.n	80030be <HAL_DMA_IRQHandler+0x14a>
 80030b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030bc:	e00e      	b.n	80030dc <HAL_DMA_IRQHandler+0x168>
 80030be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030c2:	e00b      	b.n	80030dc <HAL_DMA_IRQHandler+0x168>
 80030c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030c8:	e008      	b.n	80030dc <HAL_DMA_IRQHandler+0x168>
 80030ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030ce:	e005      	b.n	80030dc <HAL_DMA_IRQHandler+0x168>
 80030d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030d4:	e002      	b.n	80030dc <HAL_DMA_IRQHandler+0x168>
 80030d6:	2320      	movs	r3, #32
 80030d8:	e000      	b.n	80030dc <HAL_DMA_IRQHandler+0x168>
 80030da:	2302      	movs	r3, #2
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <HAL_DMA_IRQHandler+0x208>)
 80030de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d034      	beq.n	800315a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030f8:	e02f      	b.n	800315a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2208      	movs	r2, #8
 8003100:	409a      	lsls	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d028      	beq.n	800315c <HAL_DMA_IRQHandler+0x1e8>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d023      	beq.n	800315c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 020e 	bic.w	r2, r2, #14
 8003122:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
    }
  }
  return;
 800315a:	bf00      	nop
 800315c:	bf00      	nop
}
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40020008 	.word	0x40020008
 8003168:	4002001c 	.word	0x4002001c
 800316c:	40020030 	.word	0x40020030
 8003170:	40020044 	.word	0x40020044
 8003174:	40020058 	.word	0x40020058
 8003178:	4002006c 	.word	0x4002006c
 800317c:	40020000 	.word	0x40020000

08003180 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003196:	2101      	movs	r1, #1
 8003198:	fa01 f202 	lsl.w	r2, r1, r2
 800319c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d108      	bne.n	80031c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031be:	e007      	b.n	80031d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	60da      	str	r2, [r3, #12]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80031f6:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <HAL_FLASH_Program+0xd8>)
 80031f8:	7e1b      	ldrb	r3, [r3, #24]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_FLASH_Program+0x26>
 80031fe:	2302      	movs	r3, #2
 8003200:	e054      	b.n	80032ac <HAL_FLASH_Program+0xd0>
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_FLASH_Program+0xd8>)
 8003204:	2201      	movs	r2, #1
 8003206:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800320c:	f000 f8a8 	bl	8003360 <FLASH_WaitForLastOperation>
 8003210:	4603      	mov	r3, r0
 8003212:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d144      	bne.n	80032a4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d102      	bne.n	8003226 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003220:	2301      	movs	r3, #1
 8003222:	757b      	strb	r3, [r7, #21]
 8003224:	e007      	b.n	8003236 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d102      	bne.n	8003232 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800322c:	2302      	movs	r3, #2
 800322e:	757b      	strb	r3, [r7, #21]
 8003230:	e001      	b.n	8003236 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003232:	2304      	movs	r3, #4
 8003234:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003236:	2300      	movs	r3, #0
 8003238:	75bb      	strb	r3, [r7, #22]
 800323a:	e02d      	b.n	8003298 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800323c:	7dbb      	ldrb	r3, [r7, #22]
 800323e:	005a      	lsls	r2, r3, #1
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	eb02 0c03 	add.w	ip, r2, r3
 8003246:	7dbb      	ldrb	r3, [r7, #22]
 8003248:	0119      	lsls	r1, r3, #4
 800324a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800324e:	f1c1 0620 	rsb	r6, r1, #32
 8003252:	f1a1 0020 	sub.w	r0, r1, #32
 8003256:	fa22 f401 	lsr.w	r4, r2, r1
 800325a:	fa03 f606 	lsl.w	r6, r3, r6
 800325e:	4334      	orrs	r4, r6
 8003260:	fa23 f000 	lsr.w	r0, r3, r0
 8003264:	4304      	orrs	r4, r0
 8003266:	fa23 f501 	lsr.w	r5, r3, r1
 800326a:	b2a3      	uxth	r3, r4
 800326c:	4619      	mov	r1, r3
 800326e:	4660      	mov	r0, ip
 8003270:	f000 f85a 	bl	8003328 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003274:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003278:	f000 f872 	bl	8003360 <FLASH_WaitForLastOperation>
 800327c:	4603      	mov	r3, r0
 800327e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003280:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_FLASH_Program+0xdc>)
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <HAL_FLASH_Program+0xdc>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003292:	7dbb      	ldrb	r3, [r7, #22]
 8003294:	3301      	adds	r3, #1
 8003296:	75bb      	strb	r3, [r7, #22]
 8003298:	7dba      	ldrb	r2, [r7, #22]
 800329a:	7d7b      	ldrb	r3, [r7, #21]
 800329c:	429a      	cmp	r2, r3
 800329e:	d3cd      	bcc.n	800323c <HAL_FLASH_Program+0x60>
 80032a0:	e000      	b.n	80032a4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80032a2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <HAL_FLASH_Program+0xd8>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	761a      	strb	r2, [r3, #24]

  return status;
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032b4:	200002f8 	.word	0x200002f8
 80032b8:	40022000 	.word	0x40022000

080032bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_FLASH_Unlock+0x40>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_FLASH_Unlock+0x40>)
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <HAL_FLASH_Unlock+0x44>)
 80032d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_FLASH_Unlock+0x40>)
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <HAL_FLASH_Unlock+0x48>)
 80032dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <HAL_FLASH_Unlock+0x40>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80032ee:	79fb      	ldrb	r3, [r7, #7]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40022000 	.word	0x40022000
 8003300:	45670123 	.word	0x45670123
 8003304:	cdef89ab 	.word	0xcdef89ab

08003308 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_FLASH_Lock+0x1c>)
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <HAL_FLASH_Lock+0x1c>)
 8003312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003316:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40022000 	.word	0x40022000

08003328 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <FLASH_Program_HalfWord+0x30>)
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <FLASH_Program_HalfWord+0x34>)
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <FLASH_Program_HalfWord+0x34>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	887a      	ldrh	r2, [r7, #2]
 800334a:	801a      	strh	r2, [r3, #0]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	200002f8 	.word	0x200002f8
 800335c:	40022000 	.word	0x40022000

08003360 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7fe ffbc 	bl	80022e4 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800336e:	e010      	b.n	8003392 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d00c      	beq.n	8003392 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <FLASH_WaitForLastOperation+0x2e>
 800337e:	f7fe ffb1 	bl	80022e4 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	429a      	cmp	r2, r3
 800338c:	d201      	bcs.n	8003392 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e025      	b.n	80033de <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003392:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <FLASH_WaitForLastOperation+0x88>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e8      	bne.n	8003370 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <FLASH_WaitForLastOperation+0x88>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80033aa:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <FLASH_WaitForLastOperation+0x88>)
 80033ac:	2220      	movs	r2, #32
 80033ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80033b0:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <FLASH_WaitForLastOperation+0x88>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <FLASH_WaitForLastOperation+0x88>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <FLASH_WaitForLastOperation+0x88>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80033d4:	f000 f80a 	bl	80033ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40022000 	.word	0x40022000

080033ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80033f6:	4b23      	ldr	r3, [pc, #140]	; (8003484 <FLASH_SetErrorCode+0x98>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003402:	4b21      	ldr	r3, [pc, #132]	; (8003488 <FLASH_SetErrorCode+0x9c>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f043 0302 	orr.w	r3, r3, #2
 800340a:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <FLASH_SetErrorCode+0x9c>)
 800340c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f043 0310 	orr.w	r3, r3, #16
 8003414:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <FLASH_SetErrorCode+0x98>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003422:	4b19      	ldr	r3, [pc, #100]	; (8003488 <FLASH_SetErrorCode+0x9c>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <FLASH_SetErrorCode+0x9c>)
 800342c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <FLASH_SetErrorCode+0x98>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <FLASH_SetErrorCode+0x9c>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <FLASH_SetErrorCode+0x9c>)
 800344c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <FLASH_SetErrorCode+0x98>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4a0c      	ldr	r2, [pc, #48]	; (8003484 <FLASH_SetErrorCode+0x98>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f240 1201 	movw	r2, #257	; 0x101
 8003460:	4293      	cmp	r3, r2
 8003462:	d106      	bne.n	8003472 <FLASH_SetErrorCode+0x86>
 8003464:	4b07      	ldr	r3, [pc, #28]	; (8003484 <FLASH_SetErrorCode+0x98>)
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	4a06      	ldr	r2, [pc, #24]	; (8003484 <FLASH_SetErrorCode+0x98>)
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	61d3      	str	r3, [r2, #28]
}  
 8003470:	e002      	b.n	8003478 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003472:	4a04      	ldr	r2, [pc, #16]	; (8003484 <FLASH_SetErrorCode+0x98>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60d3      	str	r3, [r2, #12]
}  
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40022000 	.word	0x40022000
 8003488:	200002f8 	.word	0x200002f8

0800348c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800349e:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_FLASHEx_Erase+0xd0>)
 80034a0:	7e1b      	ldrb	r3, [r3, #24]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_FLASHEx_Erase+0x1e>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e053      	b.n	8003552 <HAL_FLASHEx_Erase+0xc6>
 80034aa:	4b2c      	ldr	r3, [pc, #176]	; (800355c <HAL_FLASHEx_Erase+0xd0>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d116      	bne.n	80034e6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80034b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034bc:	f7ff ff50 	bl	8003360 <FLASH_WaitForLastOperation>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d141      	bne.n	800354a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80034c6:	2001      	movs	r0, #1
 80034c8:	f000 f84c 	bl	8003564 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034d0:	f7ff ff46 	bl	8003360 <FLASH_WaitForLastOperation>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80034d8:	4b21      	ldr	r3, [pc, #132]	; (8003560 <HAL_FLASHEx_Erase+0xd4>)
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <HAL_FLASHEx_Erase+0xd4>)
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	6113      	str	r3, [r2, #16]
 80034e4:	e031      	b.n	800354a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80034e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034ea:	f7ff ff39 	bl	8003360 <FLASH_WaitForLastOperation>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d12a      	bne.n	800354a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f04f 32ff 	mov.w	r2, #4294967295
 80034fa:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	e019      	b.n	8003538 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003504:	68b8      	ldr	r0, [r7, #8]
 8003506:	f000 f849 	bl	800359c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800350a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800350e:	f7ff ff27 	bl	8003360 <FLASH_WaitForLastOperation>
 8003512:	4603      	mov	r3, r0
 8003514:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_FLASHEx_Erase+0xd4>)
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	4a11      	ldr	r2, [pc, #68]	; (8003560 <HAL_FLASHEx_Erase+0xd4>)
 800351c:	f023 0302 	bic.w	r3, r3, #2
 8003520:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	601a      	str	r2, [r3, #0]
            break;
 800352e:	e00c      	b.n	800354a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003536:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	029a      	lsls	r2, r3, #10
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	4413      	add	r3, r2
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	d3dc      	bcc.n	8003504 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <HAL_FLASHEx_Erase+0xd0>)
 800354c:	2200      	movs	r2, #0
 800354e:	761a      	strb	r2, [r3, #24]

  return status;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200002f8 	.word	0x200002f8
 8003560:	40022000 	.word	0x40022000

08003564 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <FLASH_MassErase+0x30>)
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <FLASH_MassErase+0x34>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	4a08      	ldr	r2, [pc, #32]	; (8003598 <FLASH_MassErase+0x34>)
 8003578:	f043 0304 	orr.w	r3, r3, #4
 800357c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <FLASH_MassErase+0x34>)
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	4a05      	ldr	r2, [pc, #20]	; (8003598 <FLASH_MassErase+0x34>)
 8003584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003588:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	200002f8 	.word	0x200002f8
 8003598:	40022000 	.word	0x40022000

0800359c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <FLASH_PageErase+0x38>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <FLASH_PageErase+0x3c>)
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <FLASH_PageErase+0x3c>)
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <FLASH_PageErase+0x3c>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <FLASH_PageErase+0x3c>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <FLASH_PageErase+0x3c>)
 80035c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	200002f8 	.word	0x200002f8
 80035d8:	40022000 	.word	0x40022000

080035dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035dc:	b480      	push	{r7}
 80035de:	b08b      	sub	sp, #44	; 0x2c
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ee:	e169      	b.n	80038c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035f0:	2201      	movs	r2, #1
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	429a      	cmp	r2, r3
 800360a:	f040 8158 	bne.w	80038be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4a9a      	ldr	r2, [pc, #616]	; (800387c <HAL_GPIO_Init+0x2a0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d05e      	beq.n	80036d6 <HAL_GPIO_Init+0xfa>
 8003618:	4a98      	ldr	r2, [pc, #608]	; (800387c <HAL_GPIO_Init+0x2a0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d875      	bhi.n	800370a <HAL_GPIO_Init+0x12e>
 800361e:	4a98      	ldr	r2, [pc, #608]	; (8003880 <HAL_GPIO_Init+0x2a4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d058      	beq.n	80036d6 <HAL_GPIO_Init+0xfa>
 8003624:	4a96      	ldr	r2, [pc, #600]	; (8003880 <HAL_GPIO_Init+0x2a4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d86f      	bhi.n	800370a <HAL_GPIO_Init+0x12e>
 800362a:	4a96      	ldr	r2, [pc, #600]	; (8003884 <HAL_GPIO_Init+0x2a8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d052      	beq.n	80036d6 <HAL_GPIO_Init+0xfa>
 8003630:	4a94      	ldr	r2, [pc, #592]	; (8003884 <HAL_GPIO_Init+0x2a8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d869      	bhi.n	800370a <HAL_GPIO_Init+0x12e>
 8003636:	4a94      	ldr	r2, [pc, #592]	; (8003888 <HAL_GPIO_Init+0x2ac>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d04c      	beq.n	80036d6 <HAL_GPIO_Init+0xfa>
 800363c:	4a92      	ldr	r2, [pc, #584]	; (8003888 <HAL_GPIO_Init+0x2ac>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d863      	bhi.n	800370a <HAL_GPIO_Init+0x12e>
 8003642:	4a92      	ldr	r2, [pc, #584]	; (800388c <HAL_GPIO_Init+0x2b0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d046      	beq.n	80036d6 <HAL_GPIO_Init+0xfa>
 8003648:	4a90      	ldr	r2, [pc, #576]	; (800388c <HAL_GPIO_Init+0x2b0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d85d      	bhi.n	800370a <HAL_GPIO_Init+0x12e>
 800364e:	2b12      	cmp	r3, #18
 8003650:	d82a      	bhi.n	80036a8 <HAL_GPIO_Init+0xcc>
 8003652:	2b12      	cmp	r3, #18
 8003654:	d859      	bhi.n	800370a <HAL_GPIO_Init+0x12e>
 8003656:	a201      	add	r2, pc, #4	; (adr r2, 800365c <HAL_GPIO_Init+0x80>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	080036d7 	.word	0x080036d7
 8003660:	080036b1 	.word	0x080036b1
 8003664:	080036c3 	.word	0x080036c3
 8003668:	08003705 	.word	0x08003705
 800366c:	0800370b 	.word	0x0800370b
 8003670:	0800370b 	.word	0x0800370b
 8003674:	0800370b 	.word	0x0800370b
 8003678:	0800370b 	.word	0x0800370b
 800367c:	0800370b 	.word	0x0800370b
 8003680:	0800370b 	.word	0x0800370b
 8003684:	0800370b 	.word	0x0800370b
 8003688:	0800370b 	.word	0x0800370b
 800368c:	0800370b 	.word	0x0800370b
 8003690:	0800370b 	.word	0x0800370b
 8003694:	0800370b 	.word	0x0800370b
 8003698:	0800370b 	.word	0x0800370b
 800369c:	0800370b 	.word	0x0800370b
 80036a0:	080036b9 	.word	0x080036b9
 80036a4:	080036cd 	.word	0x080036cd
 80036a8:	4a79      	ldr	r2, [pc, #484]	; (8003890 <HAL_GPIO_Init+0x2b4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036ae:	e02c      	b.n	800370a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	623b      	str	r3, [r7, #32]
          break;
 80036b6:	e029      	b.n	800370c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	3304      	adds	r3, #4
 80036be:	623b      	str	r3, [r7, #32]
          break;
 80036c0:	e024      	b.n	800370c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	3308      	adds	r3, #8
 80036c8:	623b      	str	r3, [r7, #32]
          break;
 80036ca:	e01f      	b.n	800370c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	330c      	adds	r3, #12
 80036d2:	623b      	str	r3, [r7, #32]
          break;
 80036d4:	e01a      	b.n	800370c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036de:	2304      	movs	r3, #4
 80036e0:	623b      	str	r3, [r7, #32]
          break;
 80036e2:	e013      	b.n	800370c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036ec:	2308      	movs	r3, #8
 80036ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	611a      	str	r2, [r3, #16]
          break;
 80036f6:	e009      	b.n	800370c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036f8:	2308      	movs	r3, #8
 80036fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	615a      	str	r2, [r3, #20]
          break;
 8003702:	e003      	b.n	800370c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003704:	2300      	movs	r3, #0
 8003706:	623b      	str	r3, [r7, #32]
          break;
 8003708:	e000      	b.n	800370c <HAL_GPIO_Init+0x130>
          break;
 800370a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2bff      	cmp	r3, #255	; 0xff
 8003710:	d801      	bhi.n	8003716 <HAL_GPIO_Init+0x13a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	e001      	b.n	800371a <HAL_GPIO_Init+0x13e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2bff      	cmp	r3, #255	; 0xff
 8003720:	d802      	bhi.n	8003728 <HAL_GPIO_Init+0x14c>
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	e002      	b.n	800372e <HAL_GPIO_Init+0x152>
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	3b08      	subs	r3, #8
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	210f      	movs	r1, #15
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	401a      	ands	r2, r3
 8003740:	6a39      	ldr	r1, [r7, #32]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	431a      	orrs	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80b1 	beq.w	80038be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800375c:	4b4d      	ldr	r3, [pc, #308]	; (8003894 <HAL_GPIO_Init+0x2b8>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	4a4c      	ldr	r2, [pc, #304]	; (8003894 <HAL_GPIO_Init+0x2b8>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6193      	str	r3, [r2, #24]
 8003768:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <HAL_GPIO_Init+0x2b8>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003774:	4a48      	ldr	r2, [pc, #288]	; (8003898 <HAL_GPIO_Init+0x2bc>)
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	089b      	lsrs	r3, r3, #2
 800377a:	3302      	adds	r3, #2
 800377c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003780:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	220f      	movs	r2, #15
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4013      	ands	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a40      	ldr	r2, [pc, #256]	; (800389c <HAL_GPIO_Init+0x2c0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <HAL_GPIO_Init+0x1ec>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a3f      	ldr	r2, [pc, #252]	; (80038a0 <HAL_GPIO_Init+0x2c4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00d      	beq.n	80037c4 <HAL_GPIO_Init+0x1e8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a3e      	ldr	r2, [pc, #248]	; (80038a4 <HAL_GPIO_Init+0x2c8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <HAL_GPIO_Init+0x1e4>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a3d      	ldr	r2, [pc, #244]	; (80038a8 <HAL_GPIO_Init+0x2cc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_GPIO_Init+0x1e0>
 80037b8:	2303      	movs	r3, #3
 80037ba:	e006      	b.n	80037ca <HAL_GPIO_Init+0x1ee>
 80037bc:	2304      	movs	r3, #4
 80037be:	e004      	b.n	80037ca <HAL_GPIO_Init+0x1ee>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e002      	b.n	80037ca <HAL_GPIO_Init+0x1ee>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_GPIO_Init+0x1ee>
 80037c8:	2300      	movs	r3, #0
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	f002 0203 	and.w	r2, r2, #3
 80037d0:	0092      	lsls	r2, r2, #2
 80037d2:	4093      	lsls	r3, r2
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037da:	492f      	ldr	r1, [pc, #188]	; (8003898 <HAL_GPIO_Init+0x2bc>)
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	3302      	adds	r3, #2
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d006      	beq.n	8003802 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037f4:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	492c      	ldr	r1, [pc, #176]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	608b      	str	r3, [r1, #8]
 8003800:	e006      	b.n	8003810 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003802:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	43db      	mvns	r3, r3
 800380a:	4928      	ldr	r1, [pc, #160]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 800380c:	4013      	ands	r3, r2
 800380e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d006      	beq.n	800382a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800381c:	4b23      	ldr	r3, [pc, #140]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	4922      	ldr	r1, [pc, #136]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4313      	orrs	r3, r2
 8003826:	60cb      	str	r3, [r1, #12]
 8003828:	e006      	b.n	8003838 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	43db      	mvns	r3, r3
 8003832:	491e      	ldr	r1, [pc, #120]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 8003834:	4013      	ands	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d006      	beq.n	8003852 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	4918      	ldr	r1, [pc, #96]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
 8003850:	e006      	b.n	8003860 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003852:	4b16      	ldr	r3, [pc, #88]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	43db      	mvns	r3, r3
 800385a:	4914      	ldr	r1, [pc, #80]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 800385c:	4013      	ands	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d021      	beq.n	80038b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	490e      	ldr	r1, [pc, #56]	; (80038ac <HAL_GPIO_Init+0x2d0>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]
 8003878:	e021      	b.n	80038be <HAL_GPIO_Init+0x2e2>
 800387a:	bf00      	nop
 800387c:	10320000 	.word	0x10320000
 8003880:	10310000 	.word	0x10310000
 8003884:	10220000 	.word	0x10220000
 8003888:	10210000 	.word	0x10210000
 800388c:	10120000 	.word	0x10120000
 8003890:	10110000 	.word	0x10110000
 8003894:	40021000 	.word	0x40021000
 8003898:	40010000 	.word	0x40010000
 800389c:	40010800 	.word	0x40010800
 80038a0:	40010c00 	.word	0x40010c00
 80038a4:	40011000 	.word	0x40011000
 80038a8:	40011400 	.word	0x40011400
 80038ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_GPIO_Init+0x304>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	4909      	ldr	r1, [pc, #36]	; (80038e0 <HAL_GPIO_Init+0x304>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	3301      	adds	r3, #1
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	fa22 f303 	lsr.w	r3, r2, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f47f ae8e 	bne.w	80035f0 <HAL_GPIO_Init+0x14>
  }
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	372c      	adds	r7, #44	; 0x2c
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	40010400 	.word	0x40010400

080038e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	e001      	b.n	8003906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	807b      	strh	r3, [r7, #2]
 800391e:	4613      	mov	r3, r2
 8003920:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003922:	787b      	ldrb	r3, [r7, #1]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003928:	887a      	ldrh	r2, [r7, #2]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800392e:	e003      	b.n	8003938 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003930:	887b      	ldrh	r3, [r7, #2]
 8003932:	041a      	lsls	r2, r3, #16
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	611a      	str	r2, [r3, #16]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
	...

08003944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e272      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8087 	beq.w	8003a72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003964:	4b92      	ldr	r3, [pc, #584]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b04      	cmp	r3, #4
 800396e:	d00c      	beq.n	800398a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003970:	4b8f      	ldr	r3, [pc, #572]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d112      	bne.n	80039a2 <HAL_RCC_OscConfig+0x5e>
 800397c:	4b8c      	ldr	r3, [pc, #560]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003988:	d10b      	bne.n	80039a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398a:	4b89      	ldr	r3, [pc, #548]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d06c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x12c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d168      	bne.n	8003a70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e24c      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x76>
 80039ac:	4b80      	ldr	r3, [pc, #512]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a7f      	ldr	r2, [pc, #508]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 80039b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	e02e      	b.n	8003a18 <HAL_RCC_OscConfig+0xd4>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x98>
 80039c2:	4b7b      	ldr	r3, [pc, #492]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a7a      	ldr	r2, [pc, #488]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b78      	ldr	r3, [pc, #480]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a77      	ldr	r2, [pc, #476]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <HAL_RCC_OscConfig+0xd4>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0xbc>
 80039e6:	4b72      	ldr	r3, [pc, #456]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a71      	ldr	r2, [pc, #452]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b6f      	ldr	r3, [pc, #444]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6e      	ldr	r2, [pc, #440]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xd4>
 8003a00:	4b6b      	ldr	r3, [pc, #428]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a6a      	ldr	r2, [pc, #424]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b68      	ldr	r3, [pc, #416]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a67      	ldr	r2, [pc, #412]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fe fc60 	bl	80022e4 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe fc5c 	bl	80022e4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e200      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b5d      	ldr	r3, [pc, #372]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0xe4>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fe fc4c 	bl	80022e4 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fe fc48 	bl	80022e4 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e1ec      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	4b53      	ldr	r3, [pc, #332]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x10c>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d063      	beq.n	8003b46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a7e:	4b4c      	ldr	r3, [pc, #304]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a8a:	4b49      	ldr	r3, [pc, #292]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d11c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x18c>
 8003a96:	4b46      	ldr	r3, [pc, #280]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	4b43      	ldr	r3, [pc, #268]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x176>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e1c0      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b3d      	ldr	r3, [pc, #244]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4939      	ldr	r1, [pc, #228]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	e03a      	b.n	8003b46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ade:	f7fe fc01 	bl	80022e4 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae6:	f7fe fbfd 	bl	80022e4 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e1a1      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af8:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	4b2a      	ldr	r3, [pc, #168]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4927      	ldr	r1, [pc, #156]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]
 8003b18:	e015      	b.n	8003b46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1a:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fe fbe0 	bl	80022e4 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b28:	f7fe fbdc 	bl	80022e4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e180      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d03a      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d019      	beq.n	8003b8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5a:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <HAL_RCC_OscConfig+0x274>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b60:	f7fe fbc0 	bl	80022e4 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b68:	f7fe fbbc 	bl	80022e4 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e160      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b86:	2001      	movs	r0, #1
 8003b88:	f000 fafe 	bl	8004188 <RCC_Delay>
 8003b8c:	e01c      	b.n	8003bc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_RCC_OscConfig+0x274>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b94:	f7fe fba6 	bl	80022e4 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9a:	e00f      	b.n	8003bbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b9c:	f7fe fba2 	bl	80022e4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d908      	bls.n	8003bbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e146      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	42420000 	.word	0x42420000
 8003bb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bbc:	4b92      	ldr	r3, [pc, #584]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e9      	bne.n	8003b9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80a6 	beq.w	8003d22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bda:	4b8b      	ldr	r3, [pc, #556]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10d      	bne.n	8003c02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	4b88      	ldr	r3, [pc, #544]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	4a87      	ldr	r2, [pc, #540]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	61d3      	str	r3, [r2, #28]
 8003bf2:	4b85      	ldr	r3, [pc, #532]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b82      	ldr	r3, [pc, #520]	; (8003e0c <HAL_RCC_OscConfig+0x4c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0e:	4b7f      	ldr	r3, [pc, #508]	; (8003e0c <HAL_RCC_OscConfig+0x4c8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7e      	ldr	r2, [pc, #504]	; (8003e0c <HAL_RCC_OscConfig+0x4c8>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fe fb63 	bl	80022e4 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fe fb5f 	bl	80022e4 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b64      	cmp	r3, #100	; 0x64
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e103      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b75      	ldr	r3, [pc, #468]	; (8003e0c <HAL_RCC_OscConfig+0x4c8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x312>
 8003c48:	4b6f      	ldr	r3, [pc, #444]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4a6e      	ldr	r2, [pc, #440]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6213      	str	r3, [r2, #32]
 8003c54:	e02d      	b.n	8003cb2 <HAL_RCC_OscConfig+0x36e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x334>
 8003c5e:	4b6a      	ldr	r3, [pc, #424]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	4a69      	ldr	r2, [pc, #420]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	6213      	str	r3, [r2, #32]
 8003c6a:	4b67      	ldr	r3, [pc, #412]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4a66      	ldr	r2, [pc, #408]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	6213      	str	r3, [r2, #32]
 8003c76:	e01c      	b.n	8003cb2 <HAL_RCC_OscConfig+0x36e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d10c      	bne.n	8003c9a <HAL_RCC_OscConfig+0x356>
 8003c80:	4b61      	ldr	r3, [pc, #388]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4a60      	ldr	r2, [pc, #384]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	f043 0304 	orr.w	r3, r3, #4
 8003c8a:	6213      	str	r3, [r2, #32]
 8003c8c:	4b5e      	ldr	r3, [pc, #376]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4a5d      	ldr	r2, [pc, #372]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6213      	str	r3, [r2, #32]
 8003c98:	e00b      	b.n	8003cb2 <HAL_RCC_OscConfig+0x36e>
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4a5a      	ldr	r2, [pc, #360]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	6213      	str	r3, [r2, #32]
 8003ca6:	4b58      	ldr	r3, [pc, #352]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4a57      	ldr	r2, [pc, #348]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d015      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cba:	f7fe fb13 	bl	80022e4 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	e00a      	b.n	8003cd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7fe fb0f 	bl	80022e4 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0b1      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd8:	4b4b      	ldr	r3, [pc, #300]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ee      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x37e>
 8003ce4:	e014      	b.n	8003d10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce6:	f7fe fafd 	bl	80022e4 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fe faf9 	bl	80022e4 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e09b      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d04:	4b40      	ldr	r3, [pc, #256]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1ee      	bne.n	8003cee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d105      	bne.n	8003d22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d16:	4b3c      	ldr	r3, [pc, #240]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4a3b      	ldr	r2, [pc, #236]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8087 	beq.w	8003e3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d2c:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d061      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d146      	bne.n	8003dce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d40:	4b33      	ldr	r3, [pc, #204]	; (8003e10 <HAL_RCC_OscConfig+0x4cc>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d46:	f7fe facd 	bl	80022e4 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4e:	f7fe fac9 	bl	80022e4 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e06d      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d60:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d74:	d108      	bne.n	8003d88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d76:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	4921      	ldr	r1, [pc, #132]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d88:	4b1f      	ldr	r3, [pc, #124]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a19      	ldr	r1, [r3, #32]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	491b      	ldr	r1, [pc, #108]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da0:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x4cc>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da6:	f7fe fa9d 	bl	80022e4 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dae:	f7fe fa99 	bl	80022e4 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e03d      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x46a>
 8003dcc:	e035      	b.n	8003e3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RCC_OscConfig+0x4cc>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fa86 	bl	80022e4 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ddc:	f7fe fa82 	bl	80022e4 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e026      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x498>
 8003dfa:	e01e      	b.n	8003e3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d107      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e019      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40007000 	.word	0x40007000
 8003e10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_OscConfig+0x500>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40021000 	.word	0x40021000

08003e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0d0      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b6a      	ldr	r3, [pc, #424]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d910      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b67      	ldr	r3, [pc, #412]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 0207 	bic.w	r2, r3, #7
 8003e72:	4965      	ldr	r1, [pc, #404]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0b8      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea4:	4b59      	ldr	r3, [pc, #356]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ebc:	4b53      	ldr	r3, [pc, #332]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ec6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec8:	4b50      	ldr	r3, [pc, #320]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	494d      	ldr	r1, [pc, #308]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d040      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d115      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e07f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	4b41      	ldr	r3, [pc, #260]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e073      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	4b3d      	ldr	r3, [pc, #244]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e06b      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f26:	4b39      	ldr	r3, [pc, #228]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4936      	ldr	r1, [pc, #216]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f38:	f7fe f9d4 	bl	80022e4 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7fe f9d0 	bl	80022e4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e053      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	4b2d      	ldr	r3, [pc, #180]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f003 020c 	and.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1eb      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f68:	4b27      	ldr	r3, [pc, #156]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d210      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 0207 	bic.w	r2, r3, #7
 8003f7e:	4922      	ldr	r1, [pc, #136]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b20      	ldr	r3, [pc, #128]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e032      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4916      	ldr	r1, [pc, #88]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	490e      	ldr	r1, [pc, #56]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fd6:	f000 f821 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	490a      	ldr	r1, [pc, #40]	; (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	fa22 f303 	lsr.w	r3, r2, r3
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1cc>)
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x1d0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe f854 	bl	80020a4 <HAL_InitTick>

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40022000 	.word	0x40022000
 800400c:	40021000 	.word	0x40021000
 8004010:	080060c0 	.word	0x080060c0
 8004014:	20000028 	.word	0x20000028
 8004018:	2000002c 	.word	0x2000002c

0800401c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	2300      	movs	r3, #0
 8004030:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004036:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b04      	cmp	r3, #4
 8004044:	d002      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x30>
 8004046:	2b08      	cmp	r3, #8
 8004048:	d003      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x36>
 800404a:	e027      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800404e:	613b      	str	r3, [r7, #16]
      break;
 8004050:	e027      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	0c9b      	lsrs	r3, r3, #18
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800405c:	5cd3      	ldrb	r3, [r2, r3]
 800405e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d010      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	0c5b      	lsrs	r3, r3, #17
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	4a11      	ldr	r2, [pc, #68]	; (80040bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004076:	5cd3      	ldrb	r3, [r2, r3]
 8004078:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800407e:	fb03 f202 	mul.w	r2, r3, r2
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	fbb2 f3f3 	udiv	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e004      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004090:	fb02 f303 	mul.w	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	613b      	str	r3, [r7, #16]
      break;
 800409a:	e002      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800409e:	613b      	str	r3, [r7, #16]
      break;
 80040a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a2:	693b      	ldr	r3, [r7, #16]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000
 80040b4:	007a1200 	.word	0x007a1200
 80040b8:	080060d8 	.word	0x080060d8
 80040bc:	080060e8 	.word	0x080060e8
 80040c0:	003d0900 	.word	0x003d0900

080040c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c8:	4b02      	ldr	r3, [pc, #8]	; (80040d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ca:	681b      	ldr	r3, [r3, #0]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	20000028 	.word	0x20000028

080040d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040dc:	f7ff fff2 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4903      	ldr	r1, [pc, #12]	; (80040fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	080060d0 	.word	0x080060d0

08004100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004104:	f7ff ffde 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	0adb      	lsrs	r3, r3, #11
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	080060d0 	.word	0x080060d0

08004128 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	220f      	movs	r2, #15
 8004136:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_RCC_GetClockConfig+0x58>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 0203 	and.w	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_RCC_GetClockConfig+0x58>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_GetClockConfig+0x58>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800415c:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_RCC_GetClockConfig+0x58>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	08db      	lsrs	r3, r3, #3
 8004162:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_GetClockConfig+0x5c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0207 	and.w	r2, r3, #7
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	40021000 	.word	0x40021000
 8004184:	40022000 	.word	0x40022000

08004188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004190:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <RCC_Delay+0x34>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0a      	ldr	r2, [pc, #40]	; (80041c0 <RCC_Delay+0x38>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	0a5b      	lsrs	r3, r3, #9
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041a4:	bf00      	nop
  }
  while (Delay --);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1e5a      	subs	r2, r3, #1
 80041aa:	60fa      	str	r2, [r7, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f9      	bne.n	80041a4 <RCC_Delay+0x1c>
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	20000028 	.word	0x20000028
 80041c0:	10624dd3 	.word	0x10624dd3

080041c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d07d      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80041e0:	2300      	movs	r3, #0
 80041e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e4:	4b4f      	ldr	r3, [pc, #316]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10d      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f0:	4b4c      	ldr	r3, [pc, #304]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	4a4b      	ldr	r2, [pc, #300]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fa:	61d3      	str	r3, [r2, #28]
 80041fc:	4b49      	ldr	r3, [pc, #292]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004208:	2301      	movs	r3, #1
 800420a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420c:	4b46      	ldr	r3, [pc, #280]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d118      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004218:	4b43      	ldr	r3, [pc, #268]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a42      	ldr	r2, [pc, #264]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004224:	f7fe f85e 	bl	80022e4 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422a:	e008      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422c:	f7fe f85a 	bl	80022e4 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e06d      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423e:	4b3a      	ldr	r3, [pc, #232]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800424a:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02e      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d027      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004268:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004270:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004272:	4b2e      	ldr	r3, [pc, #184]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004278:	4b2c      	ldr	r3, [pc, #176]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800427e:	4a29      	ldr	r2, [pc, #164]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d014      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428e:	f7fe f829 	bl	80022e4 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004294:	e00a      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7fe f825 	bl	80022e4 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e036      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ee      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4917      	ldr	r1, [pc, #92]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	4a13      	ldr	r2, [pc, #76]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e8:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	490b      	ldr	r1, [pc, #44]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004306:	4b07      	ldr	r3, [pc, #28]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4904      	ldr	r1, [pc, #16]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004314:	4313      	orrs	r3, r2
 8004316:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
 8004328:	40007000 	.word	0x40007000
 800432c:	42420440 	.word	0x42420440

08004330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e041      	b.n	80043c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd fdde 	bl	8001f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f000 fc10 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d001      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e03a      	b.n	800445e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_TIM_Base_Start_IT+0x98>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00e      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x58>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004412:	d009      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x58>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a14      	ldr	r2, [pc, #80]	; (800446c <HAL_TIM_Base_Start_IT+0x9c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x58>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a13      	ldr	r2, [pc, #76]	; (8004470 <HAL_TIM_Base_Start_IT+0xa0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d111      	bne.n	800444c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b06      	cmp	r3, #6
 8004438:	d010      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444a:	e007      	b.n	800445c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr
 8004468:	40012c00 	.word	0x40012c00
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800

08004474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e041      	b.n	800450a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fd fd20 	bl	8001ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f000 fb6e 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HAL_TIM_PWM_Start+0x24>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e022      	b.n	800457e <HAL_TIM_PWM_Start+0x6a>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d109      	bne.n	8004552 <HAL_TIM_PWM_Start+0x3e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	e015      	b.n	800457e <HAL_TIM_PWM_Start+0x6a>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d109      	bne.n	800456c <HAL_TIM_PWM_Start+0x58>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e008      	b.n	800457e <HAL_TIM_PWM_Start+0x6a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e05e      	b.n	8004644 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <HAL_TIM_PWM_Start+0x82>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	e013      	b.n	80045be <HAL_TIM_PWM_Start+0xaa>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b04      	cmp	r3, #4
 800459a:	d104      	bne.n	80045a6 <HAL_TIM_PWM_Start+0x92>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a4:	e00b      	b.n	80045be <HAL_TIM_PWM_Start+0xaa>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_PWM_Start+0xa2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b4:	e003      	b.n	80045be <HAL_TIM_PWM_Start+0xaa>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2201      	movs	r2, #1
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fd70 	bl	80050ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1e      	ldr	r2, [pc, #120]	; (800464c <HAL_TIM_PWM_Start+0x138>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d107      	bne.n	80045e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a18      	ldr	r2, [pc, #96]	; (800464c <HAL_TIM_PWM_Start+0x138>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_TIM_PWM_Start+0xfa>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f8:	d009      	beq.n	800460e <HAL_TIM_PWM_Start+0xfa>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a14      	ldr	r2, [pc, #80]	; (8004650 <HAL_TIM_PWM_Start+0x13c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_TIM_PWM_Start+0xfa>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a12      	ldr	r2, [pc, #72]	; (8004654 <HAL_TIM_PWM_Start+0x140>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d111      	bne.n	8004632 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b06      	cmp	r3, #6
 800461e:	d010      	beq.n	8004642 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004630:	e007      	b.n	8004642 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40000400 	.word	0x40000400
 8004654:	40000800 	.word	0x40000800

08004658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d020      	beq.n	80046bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0202 	mvn.w	r2, #2
 800468c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa5a 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa4d 	bl	8004b4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fa5c 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d020      	beq.n	8004708 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01b      	beq.n	8004708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0204 	mvn.w	r2, #4
 80046d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fa34 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa27 	bl	8004b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fa36 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d020      	beq.n	8004754 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01b      	beq.n	8004754 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0208 	mvn.w	r2, #8
 8004724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2204      	movs	r2, #4
 800472a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fa0e 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fa01 	bl	8004b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fa10 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d020      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01b      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0210 	mvn.w	r2, #16
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2208      	movs	r2, #8
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f9e8 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9db 	bl	8004b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f9ea 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d007      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0201 	mvn.w	r2, #1
 80047bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fd fa2a 	bl	8001c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fced 	bl	80051c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00c      	beq.n	800480c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f9ba 	bl	8004b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0220 	mvn.w	r2, #32
 8004828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fcc0 	bl	80051b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004852:	2302      	movs	r3, #2
 8004854:	e0ae      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b0c      	cmp	r3, #12
 8004862:	f200 809f 	bhi.w	80049a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	080048a1 	.word	0x080048a1
 8004870:	080049a5 	.word	0x080049a5
 8004874:	080049a5 	.word	0x080049a5
 8004878:	080049a5 	.word	0x080049a5
 800487c:	080048e1 	.word	0x080048e1
 8004880:	080049a5 	.word	0x080049a5
 8004884:	080049a5 	.word	0x080049a5
 8004888:	080049a5 	.word	0x080049a5
 800488c:	08004923 	.word	0x08004923
 8004890:	080049a5 	.word	0x080049a5
 8004894:	080049a5 	.word	0x080049a5
 8004898:	080049a5 	.word	0x080049a5
 800489c:	08004963 	.word	0x08004963
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f9e2 	bl	8004c70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0208 	orr.w	r2, r2, #8
 80048ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0204 	bic.w	r2, r2, #4
 80048ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6999      	ldr	r1, [r3, #24]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	619a      	str	r2, [r3, #24]
      break;
 80048de:	e064      	b.n	80049aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fa28 	bl	8004d3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6999      	ldr	r1, [r3, #24]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	021a      	lsls	r2, r3, #8
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	619a      	str	r2, [r3, #24]
      break;
 8004920:	e043      	b.n	80049aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fa71 	bl	8004e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0208 	orr.w	r2, r2, #8
 800493c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0204 	bic.w	r2, r2, #4
 800494c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69d9      	ldr	r1, [r3, #28]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	61da      	str	r2, [r3, #28]
      break;
 8004960:	e023      	b.n	80049aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fabb 	bl	8004ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69d9      	ldr	r1, [r3, #28]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	021a      	lsls	r2, r3, #8
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	61da      	str	r2, [r3, #28]
      break;
 80049a2:	e002      	b.n	80049aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	75fb      	strb	r3, [r7, #23]
      break;
 80049a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_TIM_ConfigClockSource+0x1c>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e0b4      	b.n	8004b42 <HAL_TIM_ConfigClockSource+0x186>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a10:	d03e      	beq.n	8004a90 <HAL_TIM_ConfigClockSource+0xd4>
 8004a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a16:	f200 8087 	bhi.w	8004b28 <HAL_TIM_ConfigClockSource+0x16c>
 8004a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1e:	f000 8086 	beq.w	8004b2e <HAL_TIM_ConfigClockSource+0x172>
 8004a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a26:	d87f      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x16c>
 8004a28:	2b70      	cmp	r3, #112	; 0x70
 8004a2a:	d01a      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0xa6>
 8004a2c:	2b70      	cmp	r3, #112	; 0x70
 8004a2e:	d87b      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x16c>
 8004a30:	2b60      	cmp	r3, #96	; 0x60
 8004a32:	d050      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x11a>
 8004a34:	2b60      	cmp	r3, #96	; 0x60
 8004a36:	d877      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x16c>
 8004a38:	2b50      	cmp	r3, #80	; 0x50
 8004a3a:	d03c      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a3c:	2b50      	cmp	r3, #80	; 0x50
 8004a3e:	d873      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x16c>
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d058      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0x13a>
 8004a44:	2b40      	cmp	r3, #64	; 0x40
 8004a46:	d86f      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b30      	cmp	r3, #48	; 0x30
 8004a4a:	d064      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x15a>
 8004a4c:	2b30      	cmp	r3, #48	; 0x30
 8004a4e:	d86b      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x16c>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d060      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x15a>
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d867      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d05c      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x15a>
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d05a      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x15a>
 8004a60:	e062      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a72:	f000 fafc 	bl	800506e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	609a      	str	r2, [r3, #8]
      break;
 8004a8e:	e04f      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aa0:	f000 fae5 	bl	800506e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ab2:	609a      	str	r2, [r3, #8]
      break;
 8004ab4:	e03c      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f000 fa5c 	bl	8004f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2150      	movs	r1, #80	; 0x50
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fab3 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004ad4:	e02c      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f000 fa7a 	bl	8004fdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2160      	movs	r1, #96	; 0x60
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 faa3 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004af4:	e01c      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 fa3c 	bl	8004f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2140      	movs	r1, #64	; 0x40
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fa93 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004b14:	e00c      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f000 fa8a 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004b26:	e003      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2c:	e000      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr

08004b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr
	...

08004b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a2f      	ldr	r2, [pc, #188]	; (8004c64 <TIM_Base_SetConfig+0xd0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00b      	beq.n	8004bc4 <TIM_Base_SetConfig+0x30>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb2:	d007      	beq.n	8004bc4 <TIM_Base_SetConfig+0x30>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a2c      	ldr	r2, [pc, #176]	; (8004c68 <TIM_Base_SetConfig+0xd4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_Base_SetConfig+0x30>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a2b      	ldr	r2, [pc, #172]	; (8004c6c <TIM_Base_SetConfig+0xd8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d108      	bne.n	8004bd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a22      	ldr	r2, [pc, #136]	; (8004c64 <TIM_Base_SetConfig+0xd0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00b      	beq.n	8004bf6 <TIM_Base_SetConfig+0x62>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be4:	d007      	beq.n	8004bf6 <TIM_Base_SetConfig+0x62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1f      	ldr	r2, [pc, #124]	; (8004c68 <TIM_Base_SetConfig+0xd4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <TIM_Base_SetConfig+0x62>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <TIM_Base_SetConfig+0xd8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d108      	bne.n	8004c08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a0d      	ldr	r2, [pc, #52]	; (8004c64 <TIM_Base_SetConfig+0xd0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d103      	bne.n	8004c3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f023 0201 	bic.w	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	611a      	str	r2, [r3, #16]
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800

08004c70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f023 0201 	bic.w	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f023 0302 	bic.w	r3, r3, #2
 8004cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <TIM_OC1_SetConfig+0xc8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10c      	bne.n	8004ce6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0308 	bic.w	r3, r3, #8
 8004cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f023 0304 	bic.w	r3, r3, #4
 8004ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a13      	ldr	r2, [pc, #76]	; (8004d38 <TIM_OC1_SetConfig+0xc8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d111      	bne.n	8004d12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	621a      	str	r2, [r3, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40012c00 	.word	0x40012c00

08004d3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f023 0210 	bic.w	r2, r3, #16
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 0320 	bic.w	r3, r3, #32
 8004d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <TIM_OC2_SetConfig+0xd0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d10d      	bne.n	8004db8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <TIM_OC2_SetConfig+0xd0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d113      	bne.n	8004de8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	bf00      	nop
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr
 8004e0c:	40012c00 	.word	0x40012c00

08004e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <TIM_OC3_SetConfig+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10d      	bne.n	8004e8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a14      	ldr	r2, [pc, #80]	; (8004ee0 <TIM_OC3_SetConfig+0xd0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d113      	bne.n	8004eba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	621a      	str	r2, [r3, #32]
}
 8004ed4:	bf00      	nop
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40012c00 	.word	0x40012c00

08004ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	031b      	lsls	r3, r3, #12
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a0f      	ldr	r2, [pc, #60]	; (8004f7c <TIM_OC4_SetConfig+0x98>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d109      	bne.n	8004f58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	019b      	lsls	r3, r3, #6
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr
 8004f7c:	40012c00 	.word	0x40012c00

08004f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 030a 	bic.w	r3, r3, #10
 8004fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0210 	bic.w	r2, r3, #16
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	031b      	lsls	r3, r3, #12
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005018:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	621a      	str	r2, [r3, #32]
}
 8005030:	bf00      	nop
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	f043 0307 	orr.w	r3, r3, #7
 800505c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	609a      	str	r2, [r3, #8]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr

0800506e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800506e:	b480      	push	{r7}
 8005070:	b087      	sub	sp, #28
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005088:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	021a      	lsls	r2, r3, #8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	431a      	orrs	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4313      	orrs	r3, r2
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	609a      	str	r2, [r3, #8]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr

080050ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	2201      	movs	r2, #1
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1a      	ldr	r2, [r3, #32]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	43db      	mvns	r3, r3
 80050ce:	401a      	ands	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a1a      	ldr	r2, [r3, #32]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	fa01 f303 	lsl.w	r3, r1, r3
 80050e4:	431a      	orrs	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005108:	2302      	movs	r3, #2
 800510a:	e046      	b.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00e      	beq.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d009      	beq.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a10      	ldr	r2, [pc, #64]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d10c      	bne.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	4313      	orrs	r3, r2
 800517e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800

080051b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr

080051c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e042      	b.n	800526c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fc fefe 	bl	8001ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2224      	movs	r2, #36	; 0x24
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fe8b 	bl	8005f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800522c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695a      	ldr	r2, [r3, #20]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800523c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800524c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08a      	sub	sp, #40	; 0x28
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b20      	cmp	r3, #32
 8005292:	d175      	bne.n	8005380 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_UART_Transmit+0x2c>
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e06e      	b.n	8005382 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2221      	movs	r2, #33	; 0x21
 80052ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052b2:	f7fd f817 	bl	80022e4 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	88fa      	ldrh	r2, [r7, #6]
 80052c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052cc:	d108      	bne.n	80052e0 <HAL_UART_Transmit+0x6c>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d104      	bne.n	80052e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e003      	b.n	80052e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052e8:	e02e      	b.n	8005348 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2200      	movs	r2, #0
 80052f2:	2180      	movs	r1, #128	; 0x80
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fbd7 	bl	8005aa8 <UART_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e03a      	b.n	8005382 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10b      	bne.n	800532a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005320:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	3302      	adds	r3, #2
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	e007      	b.n	800533a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	781a      	ldrb	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	3301      	adds	r3, #1
 8005338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1cb      	bne.n	80052ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	2140      	movs	r1, #64	; 0x40
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fba3 	bl	8005aa8 <UART_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e006      	b.n	8005382 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	e000      	b.n	8005382 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005380:	2302      	movs	r3, #2
  }
}
 8005382:	4618      	mov	r0, r3
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	4613      	mov	r3, r2
 8005396:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d112      	bne.n	80053ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_UART_Receive_IT+0x26>
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e00b      	b.n	80053cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	461a      	mov	r2, r3
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 fbca 	bl	8005b5a <UART_Start_Receive_IT>
 80053c6:	4603      	mov	r3, r0
 80053c8:	e000      	b.n	80053cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b09a      	sub	sp, #104	; 0x68
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80053ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053f2:	667b      	str	r3, [r7, #100]	; 0x64
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053fc:	657a      	str	r2, [r7, #84]	; 0x54
 80053fe:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005402:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800540a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e5      	bne.n	80053dc <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3314      	adds	r3, #20
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	f023 0301 	bic.w	r3, r3, #1
 8005426:	663b      	str	r3, [r7, #96]	; 0x60
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3314      	adds	r3, #20
 800542e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005430:	643a      	str	r2, [r7, #64]	; 0x40
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e5      	bne.n	8005410 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	2b01      	cmp	r3, #1
 800544a:	d119      	bne.n	8005480 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	61fb      	str	r3, [r7, #28]
   return(result);
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f023 0310 	bic.w	r3, r3, #16
 8005462:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330c      	adds	r3, #12
 800546a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800546c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e5      	bne.n	800544c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d03f      	beq.n	800550e <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3314      	adds	r3, #20
 8005494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	60bb      	str	r3, [r7, #8]
   return(result);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3314      	adds	r3, #20
 80054ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054ae:	61ba      	str	r2, [r7, #24]
 80054b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6979      	ldr	r1, [r7, #20]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	613b      	str	r3, [r7, #16]
   return(result);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d013      	beq.n	80054f2 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	4a19      	ldr	r2, [pc, #100]	; (8005534 <HAL_UART_AbortReceive_IT+0x160>)
 80054d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fd fcd4 	bl	8002e84 <HAL_DMA_Abort_IT>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d022      	beq.n	8005528 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
 80054f0:	e01a      	b.n	8005528 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 faba 	bl	8005a80 <HAL_UART_AbortReceiveCpltCallback>
 800550c:	e00c      	b.n	8005528 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 faac 	bl	8005a80 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3768      	adds	r7, #104	; 0x68
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	08005cb9 	.word	0x08005cb9

08005538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b0ba      	sub	sp, #232	; 0xe8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800555e:	2300      	movs	r3, #0
 8005560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800556a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10f      	bne.n	800559e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800557e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <HAL_UART_IRQHandler+0x66>
 800558a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fc0d 	bl	8005db6 <UART_Receive_IT>
      return;
 800559c:	e25b      	b.n	8005a56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800559e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80de 	beq.w	8005764 <HAL_UART_IRQHandler+0x22c>
 80055a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80d1 	beq.w	8005764 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <HAL_UART_IRQHandler+0xae>
 80055ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	f043 0201 	orr.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <HAL_UART_IRQHandler+0xd2>
 80055f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	f043 0202 	orr.w	r2, r3, #2
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800560a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <HAL_UART_IRQHandler+0xf6>
 8005616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	f043 0204 	orr.w	r2, r3, #4
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d011      	beq.n	800565e <HAL_UART_IRQHandler+0x126>
 800563a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d105      	bne.n	8005652 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005656:	f043 0208 	orr.w	r2, r3, #8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 81f2 	beq.w	8005a4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_UART_IRQHandler+0x14e>
 8005674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fb98 	bl	8005db6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d103      	bne.n	80056b2 <HAL_UART_IRQHandler+0x17a>
 80056aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d04f      	beq.n	8005752 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fa8a 	bl	8005bcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d041      	beq.n	800574a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3314      	adds	r3, #20
 80056cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056d4:	e853 3f00 	ldrex	r3, [r3]
 80056d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3314      	adds	r3, #20
 80056ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800570a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1d9      	bne.n	80056c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d013      	beq.n	8005742 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	4a7e      	ldr	r2, [pc, #504]	; (8005918 <HAL_UART_IRQHandler+0x3e0>)
 8005720:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	4618      	mov	r0, r3
 8005728:	f7fd fbac 	bl	8002e84 <HAL_DMA_Abort_IT>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d016      	beq.n	8005760 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	e00e      	b.n	8005760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f993 	bl	8005a6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	e00a      	b.n	8005760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f98f 	bl	8005a6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	e006      	b.n	8005760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f98b 	bl	8005a6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800575e:	e175      	b.n	8005a4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	bf00      	nop
    return;
 8005762:	e173      	b.n	8005a4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	2b01      	cmp	r3, #1
 800576a:	f040 814f 	bne.w	8005a0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800576e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8148 	beq.w	8005a0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800577c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8141 	beq.w	8005a0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80b6 	beq.w	800591c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8145 	beq.w	8005a50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ce:	429a      	cmp	r2, r3
 80057d0:	f080 813e 	bcs.w	8005a50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	f000 8088 	beq.w	80058f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	330c      	adds	r3, #12
 8005810:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005814:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005818:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005820:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005824:	e841 2300 	strex	r3, r2, [r1]
 8005828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800582c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1d9      	bne.n	80057e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3314      	adds	r3, #20
 800583a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3314      	adds	r3, #20
 8005854:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005858:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800585c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005860:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800586a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e1      	bne.n	8005834 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3314      	adds	r3, #20
 8005876:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005894:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005896:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800589a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e3      	bne.n	8005870 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	330c      	adds	r3, #12
 80058bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c8:	f023 0310 	bic.w	r3, r3, #16
 80058cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058da:	65ba      	str	r2, [r7, #88]	; 0x58
 80058dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e3      	bne.n	80058b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fd fa8a 	bl	8002e0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005906:	b29b      	uxth	r3, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	b29b      	uxth	r3, r3
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8bf 	bl	8005a92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005914:	e09c      	b.n	8005a50 <HAL_UART_IRQHandler+0x518>
 8005916:	bf00      	nop
 8005918:	08005c91 	.word	0x08005c91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005924:	b29b      	uxth	r3, r3
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 808e 	beq.w	8005a54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8089 	beq.w	8005a54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005966:	647a      	str	r2, [r7, #68]	; 0x44
 8005968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800596c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e3      	bne.n	8005942 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3314      	adds	r3, #20
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	623b      	str	r3, [r7, #32]
   return(result);
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3314      	adds	r3, #20
 800599a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800599e:	633a      	str	r2, [r7, #48]	; 0x30
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e3      	bne.n	800597a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0310 	bic.w	r3, r3, #16
 80059d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059e4:	61fa      	str	r2, [r7, #28]
 80059e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	69b9      	ldr	r1, [r7, #24]
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	617b      	str	r3, [r7, #20]
   return(result);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e3      	bne.n	80059c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f844 	bl	8005a92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a0a:	e023      	b.n	8005a54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d009      	beq.n	8005a2c <HAL_UART_IRQHandler+0x4f4>
 8005a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f95f 	bl	8005ce8 <UART_Transmit_IT>
    return;
 8005a2a:	e014      	b.n	8005a56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00e      	beq.n	8005a56 <HAL_UART_IRQHandler+0x51e>
 8005a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f99e 	bl	8005d86 <UART_EndTransmit_IT>
    return;
 8005a4a:	e004      	b.n	8005a56 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a54:	bf00      	nop
  }
}
 8005a56:	37e8      	adds	r7, #232	; 0xe8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr

08005a6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr

08005a92 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr

08005aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab8:	e03b      	b.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d037      	beq.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac2:	f7fc fc0f 	bl	80022e4 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	6a3a      	ldr	r2, [r7, #32]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e03a      	b.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d023      	beq.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b80      	cmp	r3, #128	; 0x80
 8005aee:	d020      	beq.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d01d      	beq.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d116      	bne.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f856 	bl	8005bcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2208      	movs	r2, #8
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e00f      	b.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	bf0c      	ite	eq
 8005b42:	2301      	moveq	r3, #1
 8005b44:	2300      	movne	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d0b4      	beq.n	8005aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	4613      	mov	r3, r2
 8005b66:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	88fa      	ldrh	r2, [r7, #6]
 8005b72:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	88fa      	ldrh	r2, [r7, #6]
 8005b78:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2222      	movs	r2, #34	; 0x22
 8005b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695a      	ldr	r2, [r3, #20]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0220 	orr.w	r2, r2, #32
 8005bbe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b095      	sub	sp, #84	; 0x54
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bf4:	643a      	str	r2, [r7, #64]	; 0x40
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e5      	bne.n	8005bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f023 0301 	bic.w	r3, r3, #1
 8005c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3314      	adds	r3, #20
 8005c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e5      	bne.n	8005c08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d119      	bne.n	8005c78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f023 0310 	bic.w	r3, r3, #16
 8005c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	330c      	adds	r3, #12
 8005c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c64:	61ba      	str	r2, [r7, #24]
 8005c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6979      	ldr	r1, [r7, #20]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	613b      	str	r3, [r7, #16]
   return(result);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e5      	bne.n	8005c44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c86:	bf00      	nop
 8005c88:	3754      	adds	r7, #84	; 0x54
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff fedf 	bl	8005a6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cb0:	bf00      	nop
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff fed0 	bl	8005a80 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b21      	cmp	r3, #33	; 0x21
 8005cfa:	d13e      	bne.n	8005d7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d04:	d114      	bne.n	8005d30 <UART_Transmit_IT+0x48>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d110      	bne.n	8005d30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	1c9a      	adds	r2, r3, #2
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	621a      	str	r2, [r3, #32]
 8005d2e:	e008      	b.n	8005d42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	1c59      	adds	r1, r3, #1
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6211      	str	r1, [r2, #32]
 8005d3a:	781a      	ldrb	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10f      	bne.n	8005d76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e000      	b.n	8005d7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d7a:	2302      	movs	r3, #2
  }
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff fe58 	bl	8005a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b08c      	sub	sp, #48	; 0x30
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b22      	cmp	r3, #34	; 0x22
 8005dc8:	f040 80ae 	bne.w	8005f28 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd4:	d117      	bne.n	8005e06 <UART_Receive_IT+0x50>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d113      	bne.n	8005e06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	1c9a      	adds	r2, r3, #2
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	629a      	str	r2, [r3, #40]	; 0x28
 8005e04:	e026      	b.n	8005e54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e18:	d007      	beq.n	8005e2a <UART_Receive_IT+0x74>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <UART_Receive_IT+0x82>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	e008      	b.n	8005e4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	4619      	mov	r1, r3
 8005e62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d15d      	bne.n	8005f24 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0220 	bic.w	r2, r2, #32
 8005e76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695a      	ldr	r2, [r3, #20]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d135      	bne.n	8005f1a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	330c      	adds	r3, #12
 8005eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f023 0310 	bic.w	r3, r3, #16
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed4:	623a      	str	r2, [r7, #32]
 8005ed6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	69f9      	ldr	r1, [r7, #28]
 8005eda:	6a3a      	ldr	r2, [r7, #32]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e5      	bne.n	8005eb4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d10a      	bne.n	8005f0c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff fdbd 	bl	8005a92 <HAL_UARTEx_RxEventCallback>
 8005f18:	e002      	b.n	8005f20 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fb f9f6 	bl	800130c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	e002      	b.n	8005f2a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e000      	b.n	8005f2a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f28:	2302      	movs	r3, #2
  }
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3730      	adds	r7, #48	; 0x30
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f6e:	f023 030c 	bic.w	r3, r3, #12
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2c      	ldr	r2, [pc, #176]	; (8006048 <UART_SetConfig+0x114>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d103      	bne.n	8005fa4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f9c:	f7fe f8b0 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	e002      	b.n	8005faa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fa4:	f7fe f898 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 8005fa8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009a      	lsls	r2, r3, #2
 8005fb4:	441a      	add	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	4a22      	ldr	r2, [pc, #136]	; (800604c <UART_SetConfig+0x118>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	0119      	lsls	r1, r3, #4
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009a      	lsls	r2, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	; (800604c <UART_SetConfig+0x118>)
 8005fe2:	fba3 0302 	umull	r0, r3, r3, r2
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	2064      	movs	r0, #100	; 0x64
 8005fea:	fb00 f303 	mul.w	r3, r0, r3
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	3332      	adds	r3, #50	; 0x32
 8005ff4:	4a15      	ldr	r2, [pc, #84]	; (800604c <UART_SetConfig+0x118>)
 8005ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006000:	4419      	add	r1, r3
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009a      	lsls	r2, r3, #2
 800600c:	441a      	add	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	fbb2 f2f3 	udiv	r2, r2, r3
 8006018:	4b0c      	ldr	r3, [pc, #48]	; (800604c <UART_SetConfig+0x118>)
 800601a:	fba3 0302 	umull	r0, r3, r3, r2
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	2064      	movs	r0, #100	; 0x64
 8006022:	fb00 f303 	mul.w	r3, r0, r3
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	3332      	adds	r3, #50	; 0x32
 800602c:	4a07      	ldr	r2, [pc, #28]	; (800604c <UART_SetConfig+0x118>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	f003 020f 	and.w	r2, r3, #15
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	440a      	add	r2, r1
 800603e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40013800 	.word	0x40013800
 800604c:	51eb851f 	.word	0x51eb851f

08006050 <memset>:
 8006050:	4603      	mov	r3, r0
 8006052:	4402      	add	r2, r0
 8006054:	4293      	cmp	r3, r2
 8006056:	d100      	bne.n	800605a <memset+0xa>
 8006058:	4770      	bx	lr
 800605a:	f803 1b01 	strb.w	r1, [r3], #1
 800605e:	e7f9      	b.n	8006054 <memset+0x4>

08006060 <__libc_init_array>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	2600      	movs	r6, #0
 8006064:	4d0c      	ldr	r5, [pc, #48]	; (8006098 <__libc_init_array+0x38>)
 8006066:	4c0d      	ldr	r4, [pc, #52]	; (800609c <__libc_init_array+0x3c>)
 8006068:	1b64      	subs	r4, r4, r5
 800606a:	10a4      	asrs	r4, r4, #2
 800606c:	42a6      	cmp	r6, r4
 800606e:	d109      	bne.n	8006084 <__libc_init_array+0x24>
 8006070:	f000 f81a 	bl	80060a8 <_init>
 8006074:	2600      	movs	r6, #0
 8006076:	4d0a      	ldr	r5, [pc, #40]	; (80060a0 <__libc_init_array+0x40>)
 8006078:	4c0a      	ldr	r4, [pc, #40]	; (80060a4 <__libc_init_array+0x44>)
 800607a:	1b64      	subs	r4, r4, r5
 800607c:	10a4      	asrs	r4, r4, #2
 800607e:	42a6      	cmp	r6, r4
 8006080:	d105      	bne.n	800608e <__libc_init_array+0x2e>
 8006082:	bd70      	pop	{r4, r5, r6, pc}
 8006084:	f855 3b04 	ldr.w	r3, [r5], #4
 8006088:	4798      	blx	r3
 800608a:	3601      	adds	r6, #1
 800608c:	e7ee      	b.n	800606c <__libc_init_array+0xc>
 800608e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006092:	4798      	blx	r3
 8006094:	3601      	adds	r6, #1
 8006096:	e7f2      	b.n	800607e <__libc_init_array+0x1e>
 8006098:	080060ec 	.word	0x080060ec
 800609c:	080060ec 	.word	0x080060ec
 80060a0:	080060ec 	.word	0x080060ec
 80060a4:	080060f0 	.word	0x080060f0

080060a8 <_init>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	bf00      	nop
 80060ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ae:	bc08      	pop	{r3}
 80060b0:	469e      	mov	lr, r3
 80060b2:	4770      	bx	lr

080060b4 <_fini>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr
